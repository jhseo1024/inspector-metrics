var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/BaseMetric.html",[0,0.174,1,1.828]],["body/classes/BaseMetric.html",[0,0.271,1,3.227,2,0.768,3,0.132,4,0.201,5,0.109,6,0.276,7,1.949,8,0.284,9,3.067,10,2.678,11,0.74,12,1.493,13,3.616,14,3.138,15,2.962,16,0.01,17,1.906,18,1.079,19,1.842,20,2.465,21,2.633,22,2.864,23,0.14,24,0.638,25,1.221,26,2.14,27,1.652,28,1.114,29,0.96,30,3.044,31,2.498,32,3.096,33,3.096,34,0.928,35,3.138,36,4.302,37,3.796,38,3.795,39,3.617,40,4.302,41,3.138,42,3.566,43,3.138,44,2.962,45,3.138,46,3.138,47,2.962,48,3.138,49,3.138,50,2.962,51,2.962,52,3.067,53,3.796,54,3.972,55,0.463,56,0.769,57,1.576,58,1.128,59,1.072,60,1.341,61,2.97,62,0.877,63,2.962,64,4.299,65,2.113,66,2.043,67,2.043,68,1.228,69,1.516,70,1.516,71,1.293,72,1.29,73,2.97,74,2.97,75,2.962,76,2.97,77,0.313,78,0.791,79,2.97,80,2.56,81,2.97,82,2.97,83,2.962,84,2.678,85,2.97,86,2.068,87,1.554,88,2.97,89,0.643,90,2.97,91,2.678,92,2.97,93,2.674,94,2.97,95,2.97,96,2.678,97,2.97,98,2.97,99,2.678,100,2.97,101,2.678,102,2.97,103,2.678,104,2.97,105,1.391,106,3.582,107,2.97,108,2.81,109,2.97,110,2.678,111,2.97,112,3.582,113,2.97,114,2.678,115,2.97,116,2.455,117,2.97,118,2.97,119,3.138,120,1.856,121,1.516,122,2.97,123,2.97,124,2.97,125,0.177,126,0.261,127,4.852,128,2.065,129,4.468,130,2.38,131,1.85,132,3.863,133,1.221,134,0.945,135,0.915,136,0.351,137,0.723,138,1.254,139,2.065,140,0.456,141,1.615,142,3.616,143,2.781,144,3.616,145,3.616,146,3.616,147,1.047,148,0.998,149,2.38,150,3.298,151,2.087,152,1.949,153,4.867,154,2.065,155,1.615,156,1.949,157,2.38,158,2.38,159,1.949,160,2.38,161,1.494,162,2.205,163,2.38,164,2.38,165,1.685,166,2.38,167,2.38,168,1.763,169,0.312,170,1.183,171,0.397,172,0.415,173,1.362,174,1.15,175,2.38,176,1.055,177,2.065,178,2.38,179,2.38,180,2.38,181,3.616,182,2.38,183,2.38,184,2.746,185,2.678,186,4.052,187,3.616,188,2.38,189,2.205,190,2.38,191,1.301,192,2.38,193,2.205,194,2.38,195,2.38,196,2.38,197,2.38,198,2.38,199,2.38,200,2.38,201,2.065,202,0.005,203,0.005]],["title/interfaces/BucketCounting.html",[169,0.227,204,2.237]],["body/interfaces/BucketCounting.html",[0,0.246,3,0.209,4,0.278,5,0.172,6,0.222,8,0.16,11,0.719,16,0.01,22,2.302,23,0.221,26,1.94,27,1.577,28,0.574,34,1.286,56,0.977,58,0.86,59,0.826,60,0.963,65,3.297,67,2.833,71,1.345,77,0.275,78,0.975,89,0.65,120,2.573,121,1.577,125,0.182,126,0.413,133,1.93,134,1.494,135,0.981,136,0.368,137,0.803,138,1.271,140,0.791,141,2.553,143,2.655,147,0.954,148,1.577,150,3.148,151,2.391,169,0.436,170,1.408,171,0.688,172,0.401,202,0.007,203,0.007,204,4.408,205,0.574,206,2.785,207,4.352,208,2.103,209,4.439,210,3.096,211,3.427,212,2.302,213,2.423,214,3.404,215,2.103,216,1.793,217,4.643,218,4.468,219,1.608,220,4.255,221,4.457,222,4.261,223,4.692,224,2.432,225,4,226,1.916,227,1.584,228,4.377,229,4.692,230,3.415,231,3.643,232,3.404,233,1.765,234,3.263,235,3.263,236,1.417,237,1.793,238,2.553,239,2.452,240,2.553,241,3.263,242,1.765,243,3.263,244,3.08,245,0.804,246,3.263,247,3.263,248,1.041,249,4.352,250,3.263,251,3.263,252,2.452,253,3.263,254,3.263,255,3.263,256,2.198,257,1.577,258,3.415,259,4.206,260,4.6,261,2.922,262,4.352,263,4.352,264,3.263,265,2.785,266,4.107,267,3.263,268,3.263,269,2.785,270,3.263,271,3.263,272,3.263]],["title/interfaces/BucketToCountMap.html",[169,0.227,259,2.324]],["body/interfaces/BucketToCountMap.html",[0,0.251,3,0.215,4,0.284,5,0.178,6,0.202,8,0.165,11,0.719,16,0.01,22,2.338,26,1.98,27,1.61,28,0.592,56,0.988,58,0.878,59,0.852,60,0.745,65,2.992,67,2.191,71,1.387,77,0.262,78,0.987,89,0.643,120,2.94,121,1.627,125,0.186,126,0.426,133,1.991,134,1.541,135,0.987,136,0.37,137,0.809,138,1.284,140,0.799,141,2.633,143,2.71,147,0.963,148,1.627,150,3.214,151,2.276,169,0.439,170,1.391,171,0.629,172,0.405,202,0.007,203,0.007,204,4.405,205,0.592,206,2.873,207,3.367,208,1.627,209,4.314,210,3.048,211,3.132,212,2.089,213,1.874,214,2.633,215,1.627,216,1.387,217,4.243,218,4.503,219,1.47,220,3.889,221,2.873,222,2.747,224,2.207,225,3.983,226,1.738,227,1.508,228,4.299,230,3.099,231,3.442,232,2.633,233,1.82,234,3.367,235,3.367,236,1.461,237,1.83,238,2.633,239,2.53,240,2.633,241,3.367,242,1.82,243,3.367,244,3.177,245,0.829,246,3.367,247,3.367,248,1.074,249,4.443,250,3.367,251,3.367,252,2.53,253,3.367,254,3.367,255,3.367,256,2.267,257,2.147,258,3.834,259,4.326,260,4.618,261,3.015,262,4.443,263,4.443,264,3.367,265,2.873,266,4.193,267,3.367,268,3.367,269,2.873,270,3.367,271,3.367,272,3.367,273,3.015,274,4.84]],["title/classes/Buckets.html",[0,0.174,225,2.013]],["body/classes/Buckets.html",[0,0.237,2,1.152,3,0.198,4,0.269,5,0.163,6,0.243,8,0.152,11,0.711,16,0.01,18,0.839,22,2.243,23,0.21,24,0.855,26,2.457,27,1.524,28,0.839,29,1.064,34,1.243,55,0.387,56,1.012,57,1.773,58,1.09,59,0.784,60,1.131,62,0.529,65,2.831,67,2.018,71,1.732,77,0.252,78,1.029,86,1.729,87,1.34,89,0.645,120,2.486,121,1.498,125,0.176,126,0.392,133,1.833,134,1.419,135,0.972,136,0.366,137,0.793,138,1.249,140,0.777,141,2.425,143,2.565,147,0.94,148,1.498,150,3.041,151,2.184,169,0.427,170,1.358,171,0.604,172,0.395,202,0.007,203,0.007,204,4.353,206,2.646,207,3.1,208,1.498,209,4.68,210,3.091,211,3.005,212,1.977,213,1.726,214,2.425,215,1.498,216,1.277,217,4.071,218,4.312,219,1.41,220,3.731,221,2.646,222,2.529,224,2.088,225,4.028,226,2.001,227,1.551,228,4.182,230,2.932,231,3.33,232,2.425,233,1.676,234,3.1,235,3.1,236,1.346,237,1.732,238,2.425,239,2.33,240,3.288,241,4.204,242,2.273,243,4.204,244,3.968,245,1.26,246,5.115,247,4.771,248,1.522,249,5.115,250,3.1,251,4.204,252,4.018,253,4.771,254,3.1,255,3.1,256,2.088,257,1.498,258,3.327,259,4.143,260,4.57,261,2.776,262,4.204,263,4.204,264,3.1,265,2.646,266,3.968,267,3.1,268,3.1,269,2.646,270,3.1,271,3.1,272,3.1,275,4.845,276,0.94,277,3.924,278,4.458,279,4.458,280,3.924,281,4.458,282,3.924,283,4.458,284,3.31,285,2.776,286,1.015,287,4.458,288,1.778,289,2.529,290,4.458,291,4.458,292,4.845,293,4.458,294,4.458,295,3.31,296,4.458]],["title/interfaces/CarbonData.html",[169,0.227,297,3.301]],["body/interfaces/CarbonData.html",[0,0.192,3,0.147,4,0.217,5,0.121,6,0.104,8,0.113,11,0.672,16,0.01,18,0.403,19,1.886,20,0.97,23,0.155,24,0.822,25,1.287,27,1.872,28,0.908,29,0.859,31,2.641,55,0.428,58,1.105,59,1.206,62,0.813,71,0.945,72,1.016,77,0.179,78,0.89,89,0.615,125,0.142,126,0.29,135,0.936,136,0.3,137,0.837,138,0.793,140,0.881,147,1.004,155,1.794,161,1.659,169,0.38,170,1.101,171,0.29,172,0.428,173,0.996,176,1.171,177,2.294,202,0.008,203,0.005,205,0.403,216,1.665,219,0.678,236,1.939,237,2.129,245,0.565,257,1.64,276,0.696,286,0.751,297,6.408,298,2.449,299,3.624,300,2.735,301,1.39,302,4.706,303,3.395,304,3.204,305,3.624,306,4.471,307,4.627,308,3.04,309,2.897,310,1.947,311,2.125,312,2.232,313,3.765,314,2.428,315,1.665,316,3.113,317,2.25,318,1.734,319,2.064,320,1.783,321,2.631,322,2.546,323,1.734,324,2.415,325,0.79,326,0.859,327,3.232,328,1.493,329,2.294,330,1.871,331,2.054,332,1.6,333,1.6,334,2.449,335,2.903,336,2.903,337,2.643,338,2.903,339,1.659,340,1.079,341,4.27,342,3.152,343,5.091,344,2.294,345,2.643,346,1.295,347,6.354,348,1.871,349,2.39,350,1.356,351,1.6,352,2.546,353,1.445,354,1.513,355,2.725,356,1.445,357,1.734,358,1.474,359,1.079,360,3.297,361,1.871,362,3.494,363,2.165,364,1.316,365,1.316,366,1.554,367,2.165,368,2.466,369,2.393,370,2.07,371,1.399,372,1.544,373,2.045,374,2.286,375,1.399,376,2.331,377,1.709,378,2.48,379,2.054,380,2.294,381,1.724,382,1.724,383,1.734,384,2.643,385,2.903,386,0.875,387,3.912,388,2.903,389,1.957,390,2.449,391,2.294,392,2.294,393,1.794,394,2.903,395,2.903,396,1.108,397,3.246,398,3.326,399,1.399,400,0.81,401,2.903,402,2.165,403,1.6,404,2.903,405,2.165,406,2.449,407,2.903,408,2.643,409,1.659,410,2.903,411,2.903,412,2.903,413,3.395,414,4.297,415,2.449,416,2.165,417,2.643,418,3.046,419,1.601,420,1.399,421,2.138,422,4.069,423,4.215,424,6.035,425,2.294,426,6.035,427,2.294,428,3.89,429,2.903,430,5.654,431,1.659,432,2.138,433,2.294,434,2.294,435,2.903,436,2.903,437,1.659,438,2.368,439,1.399,440,1.659,441,2.294,442,2.294,443,2.903,444,4.297,445,2.456,446,4.297,447,2.456,448,4.297,449,2.456,450,4.297,451,2.456,452,4.297,453,2.456,454,4.297,455,2.456,456,4.297,457,2.456,458,4.297,459,2.456,460,4.297,461,2.456,462,4.297,463,2.456,464,1.659,465,2.368,466,2.903,467,2.294,468,2.294,469,2.903,470,4.297,471,1.659,472,4.297,473,1.659,474,4.297,475,1.659,476,4.297,477,1.659,478,1.659,479,2.138,480,1.659,481,2.294,482,2.294,483,2.903,484,1.659,485,1.659,486,1.659,487,1.659,488,1.871,489,2.903]],["title/interfaces/CarbonMetricReporterOptions.html",[169,0.227,343,3.301]],["body/interfaces/CarbonMetricReporterOptions.html",[0,0.191,3,0.146,4,0.217,5,0.121,6,0.104,8,0.112,11,0.657,16,0.01,18,0.403,19,1.842,20,0.969,23,0.155,24,0.908,25,1.286,27,1.871,28,0.908,29,0.858,31,2.64,55,0.428,58,1.105,59,1.206,62,0.813,71,0.944,72,1.079,77,0.179,78,0.889,89,0.615,125,0.142,126,0.29,135,0.935,136,0.3,137,0.836,138,0.792,140,0.881,147,1.004,155,1.791,161,1.657,169,0.38,170,1.174,171,0.29,172,0.428,173,0.994,176,1.17,177,2.29,202,0.008,203,0.005,205,0.403,216,1.664,219,0.677,236,1.938,237,2.128,245,0.564,257,1.107,276,0.695,286,0.75,297,6.381,298,2.445,299,2.445,300,2.56,301,1.389,302,4.56,303,2.29,304,2.161,305,2.445,306,4.469,307,4.625,308,2.051,309,1.954,310,1.945,311,2.124,312,2.231,313,3.884,314,2.427,315,1.664,316,3.112,317,2.248,318,1.732,319,2.062,320,1.782,321,2.629,322,2.812,323,1.732,324,2.414,325,0.789,326,0.858,327,3.229,328,1.491,329,2.29,330,1.869,331,2.051,332,1.597,333,1.597,334,2.445,335,2.899,336,2.899,337,2.639,338,4.292,339,2.453,340,1.595,341,4.934,342,3.41,343,5.328,344,3.391,345,3.908,346,1.293,347,6.352,348,1.869,349,2.388,350,1.354,351,1.597,352,2.544,353,1.443,354,1.512,355,2.723,356,1.443,357,1.732,358,1.472,359,1.077,360,3.295,361,1.869,362,3.492,363,2.161,364,1.314,365,1.314,366,1.552,367,2.161,368,2.463,369,2.392,370,2.069,371,1.397,372,1.542,373,2.043,374,2.284,375,1.397,376,2.331,377,1.708,378,2.479,379,2.051,380,2.29,381,1.721,382,1.721,383,1.732,384,2.639,385,2.899,386,0.873,387,3.908,388,2.899,389,1.954,390,2.445,391,2.29,392,2.29,393,1.791,394,2.899,395,2.899,396,1.107,397,3.245,398,3.324,399,1.397,400,0.809,401,2.899,402,2.161,403,1.597,404,2.899,405,2.161,406,2.445,407,2.899,408,2.639,409,1.657,410,2.899,411,2.899,412,2.899,413,3.391,414,4.292,415,2.445,416,2.161,417,2.639,418,3.044,419,1.6,420,1.397,421,2.136,422,4.067,423,4.213,424,6.032,425,2.29,426,6.032,427,2.29,428,3.888,429,2.899,430,5.65,431,1.657,432,2.136,433,2.29,434,2.29,435,2.899,436,2.899,437,1.657,438,2.365,439,1.397,440,1.657,441,2.29,442,2.29,443,2.899,444,4.292,445,2.453,446,4.292,447,2.453,448,4.292,449,2.453,450,4.292,451,2.453,452,4.292,453,2.453,454,4.292,455,2.453,456,4.292,457,2.453,458,4.292,459,2.453,460,4.292,461,2.453,462,4.292,463,2.453,464,1.657,465,2.365,466,2.899,467,2.29,468,2.29,469,2.899,470,4.292,471,1.657,472,4.292,473,1.657,474,4.292,475,1.657,476,4.292,477,1.657,478,1.657,479,2.136,480,1.657,481,2.29,482,2.29,483,2.899,484,1.657,485,1.657,486,1.657,487,1.657,488,1.869,489,2.899]],["title/classes/Clock.html",[0,0.174,354,1.378]],["body/classes/Clock.html",[0,0.317,2,1.478,3,0.254,4,0.344,5,0.21,6,0.225,8,0.195,9,4.267,16,0.01,23,0.269,28,0.989,34,1.461,56,0.945,57,1.478,59,1.25,60,0.879,77,0.21,89,0.629,125,0.166,126,0.503,136,0.364,137,0.695,138,0.928,140,0.782,147,0.917,169,0.363,170,1.218,171,0.68,172,0.354,202,0.008,203,0.008,215,3.087,219,1.59,224,2.455,226,1.556,227,1.499,233,2.15,242,3.042,323,2.747,354,2.75,383,2.03,490,3.752,491,4.426,492,3.015,493,5.695,494,5.716,495,4.721,496,5.695,497,4.942,498,4.942,499,4.526,500,4.244,501,4.217,502,6.007,503,4.244,504,2.876,505,4.244,506,2.677,507,5.276,508,3.752,509,3.244,510,5.695,511,4.581,512,4.581,513,5.276,514,5.695,515,4.581,516,4.581,517,5.695,518,4.581,519,4.581,520,3.976,521,3.11,522,3.976]],["title/interfaces/ClusterOptions.html",[169,0.227,358,1.342]],["body/interfaces/ClusterOptions.html",[0,0.283,3,0.189,4,0.26,5,0.156,6,0.228,8,0.145,11,0.547,12,1.56,16,0.01,17,2.006,18,0.715,19,1.447,23,0.2,24,0.828,28,1.043,29,1.536,34,1.203,55,0.464,56,0.652,57,1.098,60,1.029,62,0.794,68,2.057,69,2.626,70,2.626,77,0.245,86,1.474,87,1.142,89,0.591,125,0.22,126,0.374,135,0.673,136,0.341,137,0.654,138,1.269,140,0.43,148,2.422,169,0.369,171,0.515,172,0.444,202,0.006,203,0.006,205,0.519,227,1.411,301,1.266,309,2.521,310,3.253,326,1.177,328,1.923,340,2.357,346,2.072,354,2.422,357,1.509,358,2.635,366,1.352,369,2.623,370,1.283,373,1.352,376,2.444,383,1.509,386,1.774,492,1.802,523,3.627,524,2.646,525,2.648,526,4.436,527,5.672,528,4.433,529,4.866,530,5.434,531,4.489,532,4.248,533,2.943,534,3.643,535,4.068,536,4.248,537,2.685,538,4.184,539,3.204,540,2.693,541,3.643,542,4.069,543,4.248,544,3.366,545,3.482,546,3.158,547,3.627,548,2.311,549,4.912,550,4.343,551,3.067,552,3.154,553,3.643,554,2.788,555,3.154,556,1.861,557,4.25,558,2.521,559,2.411,560,3.182,561,2.955,562,2.411,563,2.137,564,2.311,565,2.646,566,2.788,567,2.311,568,1.428,569,2.955,570,3.154,571,2.646,572,3.154,573,3.154,574,2.751,575,3.154,576,3.154,577,3.154,578,3.154,579,4.262]],["title/classes/Counter.html",[0,0.174,27,1.12]],["body/classes/Counter.html",[0,0.257,1,3.7,2,1.054,3,0.181,4,0.253,5,0.149,6,0.207,8,0.291,11,0.67,12,1.532,16,0.01,17,0.976,18,1.102,19,1.416,20,1.199,21,2.316,23,0.192,24,0.804,25,1.311,26,2.029,27,2.093,28,1.122,29,1,30,3.004,31,2.52,32,3.225,33,3.225,34,1.169,35,3.953,36,4.296,37,4.076,38,3.953,39,3.885,40,4.296,41,3.953,42,3.56,43,3.953,44,3.731,45,3.953,46,3.953,47,3.731,48,3.953,49,3.953,50,3.731,51,3.731,52,3.293,53,4.076,55,0.471,56,0.963,57,1.925,58,1.225,59,1.393,60,1.388,62,0.915,63,2.675,64,4.076,65,1.909,66,1.845,67,1.845,68,1.109,69,1.37,70,1.37,71,1.168,72,1.284,75,2.675,77,0.308,78,0.738,80,2.313,83,2.675,84,2.419,86,2.206,87,1.716,89,0.64,91,2.419,93,2.66,96,2.419,99,2.419,101,2.419,103,2.419,105,1.909,106,2.675,108,2.539,110,2.419,112,2.675,114,2.419,116,2.217,125,0.191,126,0.359,136,0.238,137,0.64,170,1.122,171,0.359,172,0.326,173,1.231,184,2.051,185,2.419,202,0.006,203,0.006,210,2.982,224,2.833,228,3.852,233,1.533,236,2.534,239,3.421,245,0.974,276,1.199,295,4.221,359,1.333,396,2.2,580,3.027,581,4.076,582,4.076,583,4.076,584,5.684,585,5.761,586,5.761,587,3.027,588,4.076,589,4.221,590,6.681,591,4.076,592,4.221,593,3.267,594,3.267,595,3.267,596,3.267,597,3.267,598,3.267,599,3.267,600,4.076,601,4.076,602,4.076,603,5.761,604,4.556,605,3.588,606,4.076,607,5.004,608,4.076,609,4.076,610,4.076,611,3.588,612,2.13,613,2.313,614,1.977,615,3.267,616,3.267,617,3.267,618,3.267,619,3.267,620,3.267,621,3.267,622,3.267,623,3.267,624,3.267,625,3.267,626,3.267,627,3.267,628,3.267,629,3.267,630,3.267,631,3.267,632,3.267,633,2.675,634,1.626,635,3.267,636,3.588,637,2.675]],["title/interfaces/Counting.html",[169,0.227,228,2.418]],["body/interfaces/Counting.html",[0,0.249,3,0.213,4,0.282,5,0.175,6,0.2,8,0.163,11,0.721,16,0.01,22,2.325,23,0.226,26,1.965,27,1.907,28,0.585,34,1.303,56,0.987,58,0.978,59,0.842,60,0.736,65,2.969,67,2.166,71,1.371,77,0.261,78,0.982,89,0.647,120,2.607,121,1.608,125,0.185,126,0.421,133,1.968,134,1.523,135,0.985,136,0.369,137,0.807,138,1.279,140,0.796,141,2.603,143,2.689,147,0.96,148,1.608,150,3.189,151,2.263,169,0.434,170,1.414,171,0.666,172,0.403,202,0.007,203,0.007,204,4.398,205,0.585,206,2.84,207,3.328,208,1.608,209,4.294,210,3.067,211,3.114,212,2.325,213,1.853,214,2.603,215,1.608,216,1.371,217,4.219,218,4.401,219,1.461,220,3.867,221,2.84,222,2.715,224,2.456,225,3.977,226,1.725,227,1.499,228,4.401,230,3.075,231,3.426,232,2.603,233,2.384,234,4.409,235,4.409,236,1.914,237,2.169,238,3.448,239,3.956,240,2.603,241,3.328,242,1.799,243,3.328,244,3.14,245,0.82,246,3.328,247,3.328,248,1.062,249,4.409,250,3.328,251,3.328,252,2.501,253,3.328,254,3.328,255,3.328,256,2.241,257,1.608,258,3.448,259,4.229,260,4.611,261,2.98,262,4.409,263,4.409,264,3.328,265,2.84,266,4.161,267,3.328,268,3.328,269,2.84,270,3.328,271,3.328,272,3.328,638,4.784]],["title/interfaces/CsvFileWriter.html",[169,0.227,639,2.769]],["body/interfaces/CsvFileWriter.html",[0,0.146,3,0.103,4,0.165,5,0.195,6,0.147,8,0.159,11,0.694,16,0.01,17,1.793,18,0.651,19,1.688,20,2.341,21,1.216,22,1.907,23,0.109,25,1.609,27,1.569,28,0.651,29,1.373,31,2.556,34,0.764,55,0.457,56,0.258,57,0.599,58,0.989,59,0.819,60,0.572,62,0.632,66,1.049,68,1.267,71,1.065,72,1.206,77,0.136,78,0.808,86,0.937,87,0.726,89,0.611,93,2.092,105,2.18,125,0.155,135,0.535,136,0.318,137,0.84,138,0.604,140,0.871,147,0.902,148,0.779,151,1.696,165,2.11,169,0.359,170,0.798,171,0.327,172,0.432,174,3.193,176,0.823,191,1.629,202,0.007,203,0.004,205,0.283,210,1.892,213,0.898,215,1.25,216,1.065,219,1.28,220,2.898,222,2.11,227,1.23,232,1.261,236,1.406,237,1.874,242,2.193,245,0.397,248,1.182,257,0.779,258,1.804,276,0.489,286,0.846,300,2.326,301,0.804,310,1.483,311,1.93,312,1.948,314,1.982,315,1.671,316,2.41,317,2.532,318,1.321,319,1.654,320,0.847,321,2.108,322,1.629,323,1.321,324,2.027,325,0.555,326,1.151,340,0.758,346,1.235,349,1.915,350,1.529,352,1.629,353,1.015,354,1.153,355,1.578,356,1.015,357,1.321,358,1.123,359,0.758,364,1.483,365,0.925,366,1.184,368,1.578,369,2.475,370,2.296,371,0.984,372,1.086,373,2.29,374,2.18,375,0.984,376,2.009,377,1.831,378,2.75,381,1.212,382,1.212,386,0.986,389,1.376,396,1.25,397,3.034,399,0.984,400,1.309,402,1.522,403,1.124,418,1.975,420,0.984,421,1.015,428,2.11,431,1.166,432,1.015,437,1.166,439,1.065,440,1.166,445,1.871,447,1.871,449,1.871,451,1.871,453,1.871,455,1.871,457,1.871,459,1.871,461,1.871,463,1.871,464,1.166,471,1.166,473,1.166,475,1.166,477,1.166,478,1.166,479,1.015,480,1.166,484,1.166,485,1.166,486,1.166,487,1.166,488,1.315,492,0.984,526,1.261,537,0.823,539,1.803,540,1.651,542,1.741,545,2.125,546,1.629,547,1.166,548,0.801,551,1.398,563,1.166,568,1.96,574,1.529,639,4.233,640,1.444,641,2.98,642,2.316,643,1.683,644,3.418,645,2.98,646,2.761,647,5.233,648,2.318,649,3.253,650,1.804,651,3.318,652,3.827,653,2.761,654,2.318,655,3.814,656,2.98,657,1.444,658,1.444,659,1.444,660,2.11,661,2.586,662,4.33,663,1.721,664,1.376,665,3.318,666,1.376,667,5.047,668,2.761,669,1.612,670,4.991,671,2.398,672,5.484,673,4.056,674,1.612,675,2.98,676,4.548,677,1.721,678,1.721,679,5.233,680,5.484,681,4.292,682,1.721,683,2.207,684,2.761,685,1.261,686,1.721,687,3.457,688,3.457,689,3.457,690,4.622,691,2.761,692,3.457,693,2.44,694,1.871,695,3.457,696,3.457,697,3.457,698,1.444,699,3.457,700,2.316,701,2.761,702,3.457,703,3.457,704,2.11,705,1.522,706,4.269,707,1.858,708,4.622,709,1.721,710,1.721,711,1.721,712,1.444,713,3.632,714,1.444,715,1.522,716,1.612,717,2.68,718,1.858,719,1.721,720,0.925,721,2.899,722,1.444,723,1.858,724,4.673,725,3.731,726,2.98,727,4.269,728,2.316,729,3.238,730,2.586,731,1.376,732,1.315,733,1.444,734,1.444,735,1.444,736,1.376,737,1.858,738,1.315,739,1.444,740,1.858,741,1.612,742,1.721,743,1.858,744,1.858,745,1.858,746,1.858,747,1.522,748,1.858,749,1.858,750,2.316,751,2.642,752,1.612,753,1.444,754,1.858,755,1.858,756,1.376,757,2.44,758,4.269,759,1.858,760,1.858,761,1.612,762,1.858,763,1.858,764,1.858,765,1.858,766,1.858,767,1.858,768,4.673,769,3.632,770,4.269,771,2.98,772,2.98,773,2.98,774,2.98,775,1.871,776,1.683,777,2.316,778,2.44,779,2.44,780,2.44,781,2.44,782,2.44,783,2.44,784,2.44,785,1.741,786,1.612,787,1.858,788,2.44,789,2.44,790,2.44,791,2.44,792,1.858,793,1.612,794,1.444,795,1.049,796,1.858,797,2.98,798,3.731,799,2.761,800,1.858,801,1.858,802,1.858,803,1.858,804,1.858,805,1.858,806,1.858,807,3.731,808,1.858,809,1.858,810,1.858,811,1.858,812,1.858,813,1.858,814,1.858,815,1.858,816,1.858,817,1.612,818,1.858,819,1.015,820,1.612,821,3.731,822,1.858,823,2.98,824,1.721,825,1.858,826,1.858,827,1.858,828,1.858,829,1.858,830,2.98,831,1.858,832,2.98,833,2.98,834,1.858,835,1.858,836,1.858,837,1.858,838,1.858,839,2.98,840,1.858,841,1.858,842,1.858,843,1.612,844,2.98,845,1.858,846,1.858,847,1.858,848,1.858,849,1.858,850,1.858,851,5.447,852,1.858,853,1.612,854,3.731,855,1.858,856,1.858,857,1.858,858,1.858,859,1.858,860,2.586,861,1.858,862,1.612,863,1.858,864,1.858,865,3.731,866,1.858,867,3.814,868,1.858,869,5.62,870,1.858,871,1.858,872,1.858,873,1.858,874,1.858,875,1.858,876,1.858,877,1.858,878,1.858,879,1.858,880,1.858,881,1.858,882,1.858,883,1.858,884,1.612,885,1.858,886,1.858]],["title/interfaces/CsvMetricReporterOptions.html",[169,0.227,680,3.092]],["body/interfaces/CsvMetricReporterOptions.html",[0,0.142,3,0.099,4,0.16,5,0.166,6,0.071,8,0.155,11,0.68,16,0.01,17,1.775,18,0.441,19,1.724,20,2.396,21,1.18,22,1.485,23,0.105,24,0.51,25,1.597,27,1.542,28,0.637,29,1.361,31,2.537,55,0.463,56,0.249,57,0.577,58,0.952,59,0.799,62,0.618,66,1.011,68,1.235,71,1.034,72,1.234,77,0.132,78,0.794,87,1.632,89,0.597,93,2.057,105,2.126,125,0.152,135,0.522,136,0.32,137,0.837,138,0.847,140,0.868,147,0.893,148,0.75,151,1.659,165,2.047,169,0.343,170,0.893,171,0.317,172,0.431,174,3.173,176,0.793,191,1.58,202,0.007,203,0.004,205,0.273,210,1.851,213,0.865,215,0.75,216,1.034,219,1.072,220,1.963,222,2.047,227,1.5,232,1.215,236,1.371,237,1.845,242,2.301,245,0.383,248,0.801,257,0.75,258,1.75,276,0.471,286,0.821,300,2.282,301,0.483,310,1.439,311,1.897,312,1.921,314,1.948,315,1.639,316,2.37,317,2.494,318,1.281,319,1.612,320,0.816,321,2.055,322,1.989,323,1.281,324,1.996,325,0.535,326,1.077,340,1.18,346,1.204,349,1.867,350,1.484,352,1.58,353,0.978,354,1.118,355,1.531,356,0.978,357,1.281,358,1.089,359,0.73,364,1.439,365,0.891,366,1.149,368,1.531,369,2.425,370,2.336,371,0.947,372,1.046,373,2.359,374,2.126,375,0.947,376,1.984,377,1.8,378,2.729,381,1.167,382,1.167,386,0.957,389,1.325,396,1.212,397,3.005,399,0.947,400,1.281,402,1.466,403,1.083,418,1.926,420,0.947,421,0.978,428,2.958,431,1.123,432,0.978,437,1.123,439,1.034,440,1.123,445,1.815,447,1.815,449,1.815,451,1.815,453,1.815,455,1.815,457,1.815,459,1.815,461,1.815,463,1.815,464,1.123,471,1.123,473,1.123,475,1.123,477,1.123,478,1.123,479,0.978,480,1.123,484,1.123,485,1.123,486,1.123,487,1.123,488,1.267,492,1.531,526,1.215,537,0.793,539,1.758,540,1.616,542,1.69,545,2.441,546,1.989,547,1.123,548,0.771,551,1.357,563,1.123,568,1.526,574,1.484,639,4.312,640,1.391,641,1.789,642,1.391,643,1.011,644,2.724,646,1.658,647,5.104,649,2.724,650,1.083,651,2.247,652,3.421,653,1.658,655,3.646,656,1.789,657,1.391,658,1.391,659,1.391,660,2.047,661,2.509,662,5.141,663,1.658,664,1.325,665,4.011,666,1.325,667,5.279,668,2.679,669,1.553,670,5.014,671,2.517,672,5.761,673,4.815,674,1.553,675,2.891,676,5.238,677,1.658,678,1.658,679,5.227,680,5.494,681,4.772,682,2.679,683,2.694,684,3.87,685,1.963,686,2.679,687,4.544,688,4.544,689,4.544,690,5.502,691,3.87,692,4.544,693,3.421,694,2.623,695,4.544,696,4.544,697,4.544,698,2.247,699,4.544,700,3.246,701,3.87,702,4.544,703,4.544,704,2.047,705,1.466,706,4.177,707,1.789,708,4.544,709,1.658,710,1.658,711,1.658,712,1.391,713,3.563,714,1.391,715,1.466,716,1.553,717,2.623,718,1.789,719,1.658,720,0.891,721,2.827,722,1.391,723,1.789,724,4.585,725,3.638,726,2.891,727,4.177,728,2.247,729,3.157,730,2.509,731,1.325,732,1.267,733,1.391,734,1.391,735,1.391,736,1.325,737,1.789,738,1.267,739,1.391,740,1.789,741,1.553,742,1.658,743,1.789,744,1.789,745,1.789,746,1.789,747,1.466,748,1.789,749,1.789,750,2.247,751,2.576,752,1.553,753,1.391,754,1.789,755,1.789,756,1.325,757,2.368,758,4.177,759,1.789,760,1.789,761,1.553,762,1.789,763,1.789,764,1.789,765,1.789,766,1.789,767,1.789,768,4.585,769,3.563,770,4.177,771,2.891,772,2.891,773,2.891,774,2.891,775,1.815,776,1.633,777,2.247,778,2.368,779,2.368,780,2.368,781,2.368,782,2.368,783,2.368,784,2.368,785,1.69,786,1.553,787,1.789,788,2.368,789,2.368,790,2.368,791,2.368,792,1.789,793,1.553,794,1.391,795,1.011,796,1.789,797,2.891,798,3.638,799,2.679,800,1.789,801,1.789,802,1.789,803,1.789,804,1.789,805,1.789,806,1.789,807,3.638,808,1.789,809,1.789,810,1.789,811,1.789,812,1.789,813,1.789,814,1.789,815,1.789,816,1.789,817,1.553,818,1.789,819,0.978,820,1.553,821,3.638,822,1.789,823,2.891,824,1.658,825,1.789,826,1.789,827,1.789,828,1.789,829,1.789,830,2.891,831,1.789,832,2.891,833,2.891,834,1.789,835,1.789,836,1.789,837,1.789,838,1.789,839,2.891,840,1.789,841,1.789,842,1.789,843,1.553,844,2.891,845,1.789,846,1.789,847,1.789,848,1.789,849,1.789,850,1.789,851,5.372,852,1.789,853,1.553,854,3.638,855,1.789,856,1.789,857,1.789,858,1.789,859,1.789,860,2.509,861,1.789,862,1.553,863,1.789,864,1.789,865,3.638,866,1.789,867,3.766,868,1.789,869,5.548,870,1.789,871,1.789,872,1.789,873,1.789,874,1.789,875,1.789,876,1.789,877,1.789,878,1.789,879,1.789,880,1.789,881,1.789,882,1.789,883,1.789,884,1.553,885,1.789,886,1.789]],["title/classes/DefaultClusterOptions.html",[0,0.174,310,1.773]],["body/classes/DefaultClusterOptions.html",[0,0.28,2,1.076,3,0.185,4,0.257,5,0.153,6,0.252,8,0.142,11,0.584,12,1.624,16,0.01,17,2.064,19,1.432,23,0.196,24,0.816,28,1.091,29,1.581,55,0.464,56,0.643,57,2.098,58,1.068,60,1.194,62,0.684,68,1.945,69,2.609,70,2.609,77,0.243,89,0.5,125,0.218,126,0.366,135,0.663,136,0.34,137,0.647,138,1.261,140,0.421,148,2.401,169,0.365,171,0.366,172,0.443,202,0.006,203,0.006,227,1.217,301,1.248,309,2.471,310,3.287,326,1.165,328,2.611,340,2.165,346,2.212,354,2.407,357,1.479,358,2.628,366,1.325,369,2.566,370,1.257,373,1.325,376,2.495,383,2.049,386,1.756,492,1.766,523,4.005,524,2.593,525,1.885,526,4.224,527,5.4,528,4.258,529,4.674,530,5.219,531,4.451,533,2.094,534,2.593,535,2.895,537,2.538,538,3.922,539,3.006,540,2.635,541,2.593,542,3.947,544,3.33,545,3.437,546,2.527,547,3.33,548,1.993,549,4.816,550,3.091,551,3.098,552,3.091,553,4.122,554,2.732,555,3.091,556,1.824,557,4.224,558,2.471,559,2.362,560,3.138,561,2.895,562,2.362,563,2.094,564,2.264,565,2.593,566,2.732,567,2.264,568,1.399,569,4.012,570,4.283,571,3.593,572,4.283,573,4.283,574,3.193,575,4.283,576,4.283,577,3.091,578,3.091,579,4.241,887,4.163,888,4.163,889,4.163,890,4.163,891,4.163,892,4.163]],["title/classes/DefaultCsvFileWriter.html",[0,0.174,893,3.092]],["body/classes/DefaultCsvFileWriter.html",[0,0.201,2,0.909,3,0.156,4,0.228,5,0.316,6,0.258,8,0.12,11,0.635,12,1.305,16,0.01,18,0.95,22,2.302,23,0.166,24,0.724,25,1.775,28,0.95,29,1.464,34,1.052,55,0.454,59,0.619,60,1.238,62,0.607,72,1.269,77,0.129,78,0.984,86,1.851,87,1.434,89,0.587,125,0.221,133,2.104,136,0.277,137,0.759,138,0.831,140,0.743,147,0.871,148,1.72,169,0.262,172,0.426,174,2.335,202,0.006,203,0.006,219,1.24,224,2.288,242,1.924,245,0.877,248,1.47,276,1.079,286,0.801,301,1.107,325,0.842,326,1.292,332,1.706,339,3.035,340,2.59,364,2.642,369,2.626,370,2.626,378,2.779,386,0.933,396,2.226,405,3.959,406,4.479,413,5.402,415,4.479,416,3.358,545,2.642,548,1.215,558,3.037,567,3.603,568,2.027,574,2.724,592,4.918,639,4.125,644,3.152,645,4.834,646,2.611,647,3.187,649,2.674,650,2.482,652,3.959,653,2.611,661,2.446,665,2.19,679,2.19,681,4.62,693,4.347,694,1.769,704,3.422,713,4.384,747,4.62,757,3.358,795,3.186,893,5.876,894,2.611,895,5.309,896,5.309,897,4.384,898,6.465,899,6.465,900,5.508,901,3.517,902,6.312,903,5.117,904,3.517,905,6.813,906,4.607,907,5.308,908,4.834,909,3.517,910,6.851,911,3.517,912,5.309,913,4.504,914,3.517,915,4.504,916,4.834,917,4.101,918,4.834,919,4.504,920,4.504,921,3.517,922,6.465,923,6.837,924,5.108,925,6.465,926,5.454,927,5.886,928,3.995,929,5.886,930,5.454,931,4.504,932,3.517,933,3.517,934,3.517,935,3.517,936,4.504,937,4.504,938,4.918,939,3.096,940,2.611,941,2.611,942,3.096,943,4.834,944,2.818,945,6.075,946,5.308,947,2.818,948,4.834,949,4.101,950,2.818,951,2.818,952,3.096,953,2.818,954,2.446,955,2.611,956,3.096,957,3.096,958,3.096,959,4.479,960,3.096,961,3.096,962,3.096,963,5.309,964,4.504,965,3.096,966,3.037,967,3.096,968,3.096,969,3.187,970,3.096,971,5.831,972,5.831,973,3.096,974,3.096,975,3.096,976,3.096,977,4.504,978,3.096,979,4.504,980,3.096,981,3.096,982,3.096,983,3.096,984,3.096]],["title/interfaces/DefaultCsvFileWriterOptions.html",[169,0.227,902,3.301]],["body/interfaces/DefaultCsvFileWriterOptions.html",[0,0.214,3,0.171,4,0.243,5,0.316,6,0.122,8,0.131,11,0.596,12,1.181,16,0.01,18,0.471,22,2.075,23,0.181,24,0.772,25,1.706,28,0.776,29,1.424,55,0.453,59,0.677,62,0.457,72,1.263,77,0.141,78,0.946,87,1.663,89,0.48,125,0.227,133,2.839,136,0.289,137,0.778,138,1.292,140,0.766,147,0.898,148,1.835,169,0.279,172,0.431,174,2.457,202,0.006,203,0.006,205,0.471,219,1.304,224,1.886,242,1.447,245,0.66,248,1.212,276,0.812,286,0.876,301,0.833,325,0.922,326,1.37,332,2.648,339,3.192,340,2.476,364,2.754,369,2.552,370,2.552,378,2.835,386,1.448,396,1.835,405,4.164,406,4.711,413,5.534,415,4.711,416,3.584,545,3.174,548,1.33,558,2.284,567,2.97,568,2.132,574,2.839,592,4.054,639,3.952,644,2.012,645,3.085,647,2.397,649,2.012,650,1.867,652,3.584,661,2.677,665,3.4,679,2.397,681,4.532,693,5.223,694,2.747,704,3.6,713,4.3,747,4.532,757,2.526,795,2.872,893,5.879,894,2.858,895,3.388,896,3.388,897,3.4,898,5.585,899,5.585,900,4.802,902,6.321,905,6.903,906,3.797,907,4.375,908,5.085,910,6.967,912,4.806,913,3.388,915,3.388,916,5.085,917,3.085,918,5.085,919,3.388,920,3.388,922,5.585,923,6.078,924,4.413,925,5.585,926,4.711,927,5.085,928,3.451,929,5.085,930,4.711,931,3.388,936,3.388,937,4.806,938,5.127,939,3.388,940,2.858,941,2.858,942,3.388,943,6.068,944,4.375,945,6.577,946,6.377,947,4.375,948,6.068,949,5.533,950,4.375,951,4.375,952,3.388,953,3.085,954,2.677,955,2.858,956,3.388,957,3.388,958,3.388,959,4.711,960,3.388,961,3.388,962,3.388,963,5.585,964,4.806,965,3.388,966,3.24,967,3.388,968,3.388,969,3.4,970,3.388,971,6.078,972,6.078,973,3.388,974,3.388,975,3.388,976,3.388,977,4.806,978,3.388,979,4.806,980,3.388,981,3.388,982,3.388,983,3.388,984,3.388]],["title/classes/DefaultPrometheusClusterOptions.html",[0,0.174,985,3.092]],["body/classes/DefaultPrometheusClusterOptions.html",[0,0.257,2,1.302,3,0.224,4,0.292,5,0.185,6,0.271,8,0.172,11,0.536,12,1.577,16,0.01,17,1.849,18,0.801,23,0.237,24,0.927,28,1.106,29,1.541,34,1.347,55,0.454,56,0.812,57,2.069,58,1.002,60,1.303,68,1.784,69,2.594,70,2.203,77,0.185,86,1.652,87,1.28,89,0.605,125,0.233,135,0.579,136,0.274,140,0.737,147,0.597,172,0.416,173,1.979,191,2.205,202,0.007,203,0.007,214,3.565,248,1.455,276,1.537,301,1.418,310,3.273,325,1.206,326,0.886,328,2.967,364,2.008,369,2.477,370,2.586,376,1.443,383,2.742,419,1.803,526,3.964,527,5.068,528,4.135,529,4.808,530,5.068,531,4.539,534,4.985,535,3.501,537,2.742,538,3.426,540,2.679,541,3.135,542,4.101,545,3.273,547,3.298,548,2.517,549,4.581,551,3.086,553,4.082,554,3.304,560,3.565,574,3.375,751,2.857,959,3.738,985,5.369,986,3.738,987,4.558,988,4.082,989,5.567,990,6.415,991,6.554,992,5.034,993,5.034,994,7.287,995,5.253,996,5.034,997,5.769,998,5.034,999,5.034,1000,6.554,1001,5.034,1002,6.554,1003,6.554,1004,4.431,1005,5.034,1006,5.034,1007,5.034,1008,5.034,1009,5.034,1010,5.034]],["title/classes/DefaultReservoir.html",[0,0.174,1011,3.092]],["body/classes/DefaultReservoir.html",[0,0.263,2,1.347,3,0.232,4,0.298,5,0.191,6,0.266,8,0.178,12,1.603,16,0.01,18,0.819,23,0.246,24,0.948,25,1.71,28,1.063,34,1.378,55,0.435,56,1.018,57,1.347,58,1.216,60,1.274,62,0.879,77,0.191,78,1.015,86,1.689,87,1.309,89,0.637,125,0.195,126,0.458,136,0.327,137,0.724,147,0.618,169,0.343,171,0.652,172,0.425,202,0.007,203,0.007,208,1.751,219,1.378,233,1.959,245,1.34,248,1.984,276,1.099,400,1.646,419,1.826,439,2.507,643,3.033,775,3.371,924,5.439,1011,6.045,1012,3.623,1013,4.398,1014,5.289,1015,4.728,1016,5.76,1017,6.267,1018,6.637,1019,3.789,1020,4.173,1021,5.37,1022,6.7,1023,5.5,1024,5.209,1025,5.209,1026,5.209,1027,5.152,1028,5.209,1029,3.593,1030,5.37,1031,5.37,1032,5.37,1033,4.398,1034,2.834,1035,4.175,1036,4.398]],["title/classes/DisabledClusterOptions.html",[0,0.174,579,2.324]],["body/classes/DisabledClusterOptions.html",[0,0.282,2,1.089,3,0.187,4,0.259,5,0.154,6,0.252,8,0.144,11,0.544,12,1.631,16,0.01,17,2.088,19,1.441,23,0.199,24,0.823,28,1.092,29,1.582,55,0.465,56,0.648,57,2.065,58,1.072,60,1.199,62,0.69,68,1.812,69,2.414,70,2.414,77,0.244,89,0.503,125,0.219,126,0.371,135,0.669,136,0.341,137,0.651,138,1.266,140,0.426,148,2.735,169,0.367,171,0.371,172,0.443,202,0.006,203,0.006,227,1.227,301,1.258,309,2.5,310,3.247,326,1.023,328,1.907,340,2.178,346,2.191,354,2.416,357,1.496,358,2.632,366,1.341,369,2.571,370,1.272,373,1.341,376,2.535,383,1.496,386,1.767,492,1.787,523,4.018,524,2.624,525,1.907,526,4.239,527,5.42,528,4.276,529,4.694,530,5.242,531,4.473,533,2.119,534,2.624,535,2.93,537,2.366,538,3.754,539,2.918,540,2.618,541,2.624,542,3.955,544,2.926,545,3.443,546,2.548,547,3.614,548,2.009,549,4.83,550,3.128,551,3.003,552,3.128,553,3.622,554,2.765,555,3.128,556,1.845,557,4.239,558,2.5,559,2.39,560,3.164,561,2.93,562,2.39,563,2.119,564,2.292,565,2.624,566,2.765,567,2.292,568,1.416,569,2.93,570,3.128,571,2.624,572,3.128,573,3.128,574,2.739,575,3.128,576,3.128,577,3.128,578,4.318,579,4.318,1037,4.212,1038,4.212,1039,4.212,1040,4.212,1041,4.212,1042,4.212]],["title/interfaces/ElasticsearchMetricReporterOption.html",[169,0.227,1043,3.563]],["body/interfaces/ElasticsearchMetricReporterOption.html",[0,0.163,3,0.119,4,0.185,5,0.098,6,0.085,8,0.091,11,0.73,16,0.01,18,0.845,19,1.654,20,1.225,21,1.887,23,0.326,24,0.589,25,1.327,26,2.571,27,2.007,28,0.974,29,1.165,31,2.535,55,0.459,56,0.643,58,1.141,59,1.165,62,0.82,72,1.011,77,0.153,78,0.749,87,1.396,89,0.645,125,0.149,126,0.236,135,0.863,136,0.277,137,0.84,140,0.863,143,1.136,147,1.03,151,1.326,155,1.456,161,1.347,169,0.295,170,1.071,171,0.629,172,0.429,173,0.808,176,0.951,202,0.007,203,0.005,205,0.327,210,2.352,212,0.875,213,2.421,216,1.465,219,0.55,220,1.456,226,1.134,227,1.583,236,1.999,237,2.191,245,0.459,248,1.887,276,0.564,286,0.948,289,2.364,300,2.04,301,0.901,303,5.107,304,1.757,309,1.588,310,1.662,311,1.938,312,2.255,313,3.729,314,2.434,315,2.048,316,2.676,317,2.768,318,1.48,319,1.48,320,0.978,321,1.886,322,2.528,323,1.48,324,2.37,325,0.641,326,1.015,327,3.596,329,1.861,330,1.519,331,1.667,332,1.298,333,1.298,340,1.887,342,3.115,346,1.105,348,1.519,349,2.103,350,1.101,351,1.298,352,2.24,353,1.172,354,1.291,355,1.767,356,1.172,357,1.48,358,1.258,359,0.875,360,2.902,361,1.519,362,3.401,363,1.757,364,1.068,365,1.068,366,0.852,368,1.767,369,1.999,370,1.544,371,1.136,372,1.254,373,2.535,374,1.951,375,1.136,376,2.282,377,2.102,378,1.766,381,1.399,382,1.399,386,1.105,387,2.145,397,3.287,398,2.799,399,1.136,400,1.956,402,1.757,403,1.298,409,3.146,418,1.767,419,1.838,420,1.136,421,1.825,422,3.425,423,1.519,431,1.347,432,1.172,437,1.347,438,1.298,439,1.194,440,1.347,445,2.096,447,2.096,449,2.096,451,2.096,453,2.096,455,2.096,457,2.096,459,2.096,461,2.096,463,2.096,464,1.347,465,1.298,471,1.347,473,1.347,475,1.347,477,1.347,478,1.347,479,1.172,480,1.347,484,1.347,485,1.347,486,1.347,487,1.347,501,1.588,537,0.951,540,1.291,551,1.006,556,1.825,642,1.667,666,1.588,742,1.987,769,4.124,819,1.825,966,1.588,969,1.667,987,1.861,1043,5.884,1044,2.145,1045,6.906,1046,4.916,1047,5.828,1048,6.381,1049,5.828,1050,3.338,1051,4.605,1052,6.446,1053,3.093,1054,1.951,1055,2.356,1056,2.145,1057,2.356,1058,2.145,1059,2.356,1060,2.676,1061,2.145,1062,2.676,1063,2.356,1064,2.676,1065,2.676,1066,2.676,1067,4.098,1068,2.676,1069,2.897,1070,2.356,1071,2.356,1072,3.667,1073,2.356,1074,2.356,1075,2.356,1076,2.356,1077,2.356,1078,2.676,1079,2.676,1080,2.676,1081,2.676,1082,2.676,1083,2.676,1084,2.676,1085,1.861,1086,2.676,1087,4.165,1088,2.676,1089,2.676,1090,2.676,1091,2.676,1092,5.114,1093,4.165,1094,4.165,1095,4.165,1096,4.165,1097,4.165,1098,4.165,1099,4.165,1100,4.165,1101,4.165,1102,4.165,1103,2.676,1104,4.165,1105,4.165,1106,4.165,1107,4.165,1108,2.676,1109,2.676,1110,2.356,1111,2.676,1112,2.356,1113,2.676,1114,2.676,1115,2.676,1116,4.501,1117,2.676,1118,1.987,1119,2.676,1120,2.676,1121,2.676,1122,1.588,1123,2.676,1124,5.114,1125,2.676,1126,2.676,1127,2.676,1128,2.676,1129,2.676,1130,3.797,1131,1.987,1132,1.987,1133,2.676,1134,1.347,1135,6.621,1136,2.676,1137,1.987,1138,4.098,1139,3.185,1140,4.165,1141,2.676,1142,4.165,1143,2.676,1144,4.104,1145,2.676,1146,2.676,1147,2.676,1148,2.676,1149,2.676]],["title/classes/ExponentiallyWeightedMovingAverage.html",[0,0.174,1150,3.301]],["body/classes/ExponentiallyWeightedMovingAverage.html",[0,0.208,2,0.952,3,0.164,4,0.235,5,0.135,6,0.274,8,0.126,12,1.34,16,0.01,18,0.757,23,0.174,24,0.749,25,1.767,26,2.68,28,1.076,34,1.088,55,0.46,56,1.016,57,2.034,58,1.216,59,1.09,60,1.33,62,0.628,67,2.803,77,0.135,86,1.561,87,1.209,89,0.629,125,0.154,126,0.324,134,1.685,136,0.283,137,0.752,138,0.859,140,0.535,147,0.885,169,0.271,171,0.692,172,0.427,202,0.006,203,0.006,212,1.205,215,2.732,216,2.513,219,0.757,224,2.717,233,1.99,245,0.907,248,1.174,275,4.241,276,1.306,285,2.294,286,1.968,288,3.243,292,2.952,311,1.142,318,1.309,396,1.238,419,1.674,497,2.562,499,2.879,506,1.725,520,3.68,643,1.668,785,3.895,794,2.294,995,2.952,1020,4.465,1027,4.307,1029,3.004,1150,6.389,1151,6.446,1152,2.735,1153,4.658,1154,5.958,1155,4.926,1156,7.61,1157,5.948,1158,5.451,1159,5.451,1160,5.451,1161,5.451,1162,5.451,1163,5.451,1164,6.569,1165,6.174,1166,5.451,1167,6.31,1168,4.658,1169,5.958,1170,6.569,1171,4.658,1172,5.107,1173,5.291,1174,3.684,1175,5.958,1176,7.32,1177,6.664,1178,3.684,1179,3.684,1180,3.682,1181,3.684,1182,3.684,1183,3.684,1184,3.684,1185,4.442,1186,3.684,1187,3.684,1188,3.9,1189,3.684,1190,3.684,1191,4.658,1192,2.879,1193,3.684,1194,5.451,1195,3.684,1196,3.684,1197,3.684,1198,4.241,1199,4.658,1200,4.658,1201,3.538,1202,4.658,1203,4.658,1204,4.658,1205,3.68,1206,4.658,1207,4.658,1208,4.658,1209,4.658,1210,3.684,1211,3.473,1212,2.418,1213,3.243,1214,1.854,1215,2.562,1216,5.451,1217,4.658,1218,4.658,1219,3.243,1220,3.243,1221,6.569,1222,3.243,1223,5.451]],["title/interfaces/Fields.html",[169,0.227,174,1.721]],["body/interfaces/Fields.html",[0,0.148,3,0.105,4,0.168,5,0.173,6,0.119,8,0.161,11,0.686,16,0.01,17,1.803,18,0.462,19,1.696,20,2.351,21,1.236,22,1.543,25,1.615,27,1.583,28,0.659,29,1.379,31,2.566,55,0.456,56,0.264,57,0.611,58,0.971,59,0.83,60,0.364,62,0.639,66,1.071,68,1.284,71,1.083,72,1.216,77,0.139,78,0.815,89,0.604,93,2.11,105,2.21,125,0.157,135,0.543,136,0.32,137,0.842,138,0.614,140,0.873,147,0.906,148,0.795,151,1.715,165,2.144,169,0.361,170,0.808,171,0.332,172,0.433,174,3.235,176,0.84,191,1.655,202,0.007,203,0.004,205,0.289,210,1.914,213,0.916,215,0.795,216,1.083,219,1.108,220,2.055,222,2.144,227,1.242,232,1.286,236,1.424,237,1.889,242,2.026,245,0.405,248,0.838,257,1.27,258,1.833,273,1.473,276,0.499,286,0.86,300,2.35,301,0.512,310,1.507,311,1.947,312,1.962,314,1.999,315,1.688,316,2.432,317,2.552,318,1.342,319,1.676,320,0.864,321,2.136,322,1.655,323,1.342,324,2.043,325,0.566,326,1.105,340,0.773,346,1.251,349,1.94,350,1.554,352,1.655,353,1.036,354,1.171,355,1.603,356,1.036,357,1.342,358,1.141,359,0.773,364,1.507,365,0.943,366,1.203,368,1.603,369,2.451,370,2.307,371,1.003,372,1.108,373,2.305,374,2.21,375,1.003,376,2.023,377,1.847,378,2.761,381,1.236,382,1.236,386,1.002,389,1.403,396,1.27,397,3.049,399,1.003,400,1.324,402,1.552,403,1.147,418,2.002,420,1.003,421,1.036,428,2.144,431,1.19,432,1.036,437,1.19,439,1.083,440,1.19,445,1.901,447,1.901,449,1.901,451,1.901,453,1.901,455,1.901,457,1.901,459,1.901,461,1.901,463,1.901,464,1.19,471,1.19,473,1.19,475,1.19,477,1.19,478,1.19,479,1.036,480,1.19,484,1.19,485,1.19,486,1.19,487,1.19,488,1.342,492,1.003,526,1.286,537,0.84,539,1.827,540,1.67,542,1.769,545,2.149,546,1.655,547,1.19,548,0.817,551,1.421,563,1.19,568,1.585,574,1.554,639,4.105,640,1.473,641,1.895,642,1.473,643,1.071,644,2.816,646,1.756,647,5.152,649,2.816,650,1.147,651,2.353,652,3.536,653,1.756,655,3.84,656,1.895,657,1.473,658,1.473,659,1.473,660,2.144,661,2.628,662,4.373,663,1.756,664,1.403,665,3.356,666,1.403,667,5.084,668,2.805,669,1.645,670,5.016,671,2.422,672,5.507,673,4.096,674,1.645,675,3.028,676,4.585,677,1.756,678,1.756,679,5.248,680,5.507,681,4.326,682,1.756,683,2.242,684,2.805,685,1.286,686,1.756,687,3.503,688,3.503,689,3.503,690,4.663,691,2.805,692,3.503,693,2.48,694,1.901,695,3.503,696,3.503,697,3.503,698,1.473,699,3.503,700,2.353,701,2.805,702,3.503,703,3.503,704,2.144,705,1.552,706,4.318,707,1.895,708,4.663,709,1.756,710,1.756,711,1.756,712,1.473,713,3.668,714,1.473,715,1.552,716,1.645,717,2.711,718,1.895,719,1.756,720,0.943,721,2.938,722,1.473,723,1.895,724,4.72,725,3.781,726,3.028,727,4.318,728,2.353,729,3.281,730,2.628,731,1.403,732,1.342,733,1.473,734,1.473,735,1.473,736,1.403,737,1.895,738,1.342,739,1.473,740,1.895,741,1.645,742,1.756,743,1.895,744,1.895,745,1.895,746,1.895,747,1.552,748,1.895,749,1.895,750,2.353,751,2.677,752,1.645,753,1.473,754,1.895,755,1.895,756,1.403,757,2.48,758,4.318,759,1.895,760,1.895,761,1.645,762,1.895,763,1.895,764,1.895,765,1.895,766,1.895,767,1.895,768,4.72,769,3.668,770,4.318,771,3.028,772,3.028,773,3.028,774,3.028,775,1.901,776,1.71,777,2.353,778,2.48,779,2.48,780,2.48,781,2.48,782,2.48,783,2.48,784,2.48,785,1.769,786,1.645,787,1.895,788,2.48,789,2.48,790,2.48,791,2.48,792,1.895,793,1.645,794,1.473,795,1.071,796,1.895,797,3.028,798,3.781,799,2.805,800,1.895,801,1.895,802,1.895,803,1.895,804,1.895,805,1.895,806,1.895,807,3.781,808,1.895,809,1.895,810,1.895,811,1.895,812,1.895,813,1.895,814,1.895,815,1.895,816,1.895,817,1.645,818,1.895,819,1.036,820,1.645,821,3.781,822,1.895,823,3.028,824,1.756,825,1.895,826,1.895,827,1.895,828,1.895,829,1.895,830,3.028,831,1.895,832,3.028,833,3.028,834,1.895,835,1.895,836,1.895,837,1.895,838,1.895,839,3.028,840,1.895,841,1.895,842,1.895,843,1.645,844,3.028,845,1.895,846,1.895,847,1.895,848,1.895,849,1.895,850,1.895,851,5.487,852,1.895,853,1.645,854,3.781,855,1.895,856,1.895,857,1.895,858,1.895,859,1.895,860,2.628,861,1.895,862,1.645,863,1.895,864,1.895,865,3.781,866,1.895,867,3.84,868,1.895,869,5.657,870,1.895,871,1.895,872,1.895,873,1.895,874,1.895,875,1.895,876,1.895,877,1.895,878,1.895,879,1.895,880,1.895,881,1.895,882,1.895,883,1.895,884,1.645,885,1.895,886,1.895,1224,2.365]],["title/interfaces/Gauge.html",[169,0.227,312,1.274]],["body/interfaces/Gauge.html",[0,0.277,1,3.166,3,0.252,4,0.314,5,0.208,6,0.223,8,0.283,10,3.36,11,0.691,12,1.528,16,0.01,17,1.356,18,1.014,22,2.518,23,0.267,25,1.415,28,0.986,34,1.452,52,2.848,55,0.405,56,0.956,58,1.224,59,1.243,60,0.871,62,0.671,72,1.141,77,0.259,87,1.503,89,0.627,93,2.709,125,0.206,126,0.498,135,0.651,136,0.337,137,0.753,140,0.572,147,0.913,169,0.361,170,1.45,171,0.678,172,0.422,173,1.709,184,2.848,185,3.36,202,0.008,203,0.008,205,0.692,212,1.851,224,2.866,245,0.97,276,1.194,312,2.538,359,1.851,366,1.802,386,1.501,400,1.391,612,2.959,613,3.212,614,2.746,634,2.258,897,3.526,1013,3.716,1019,2.651,1225,4.204,1226,6.218,1227,5.245,1228,4.174,1229,5.661,1230,5.694,1231,4.983,1232,6.777,1233,4.983,1234,3.526,1235,4.399,1236,3.526,1237,3.716]],["title/interfaces/Groupable.html",[127,2.918,169,0.227]],["body/interfaces/Groupable.html",[3,0.284,4,0.338,5,0.234,6,0.257,8,0.259,11,0.687,16,0.01,18,1.091,20,2.237,21,2.933,23,0.301,34,1.563,37,5.234,47,4.991,55,0.336,60,1.17,72,1.263,77,0.234,78,0.987,86,1.61,87,1.248,89,0.614,108,4.736,125,0.186,126,0.562,127,5.634,136,0.318,137,0.625,169,0.43,171,0.669,172,0.379,173,2.296,202,0.008,203,0.008,205,0.781,227,1.604,346,2.017,1238,5.121,1239,6.094,1240,7.604,1241,6.39,1242,6.39]],["title/classes/HdrSnapshot.html",[0,0.174,1243,3.563]],["body/classes/HdrSnapshot.html",[0,0.254,2,0.863,3,0.148,4,0.219,5,0.122,6,0.267,8,0.22,11,0.478,12,1.691,16,0.01,18,0.843,23,0.157,25,1.381,28,1.104,29,1.137,34,1.013,54,4.336,55,0.362,56,1.014,58,1.093,59,1.435,60,1.289,62,0.885,72,0.914,77,0.122,78,0.838,86,1.241,87,1.262,89,0.682,125,0.217,126,0.294,135,0.948,136,0.27,137,0.748,140,0.338,147,1,170,0.844,171,0.294,172,0.431,202,0.005,203,0.005,204,2.945,210,1.75,213,3.359,219,1.8,225,3.376,228,3.184,231,1.511,237,2.558,245,1.003,248,1.529,276,1.234,286,1.121,288,1.332,325,0.8,326,0.587,328,2.925,339,2.478,350,1.373,376,0.957,391,4.793,396,1.967,400,1.587,439,2.31,521,3.515,633,2.191,634,1.332,637,2.191,664,1.981,694,1.68,731,1.981,775,3.251,776,2.23,777,3.068,785,1.564,966,1.981,969,2.079,1015,1.816,1019,3.026,1020,2.079,1188,3.059,1198,2.675,1228,2.945,1243,6.996,1244,6.262,1245,2.479,1246,6.19,1247,3.91,1248,4.798,1249,4.798,1250,4.798,1251,4.798,1252,4.798,1253,4.798,1254,4.798,1255,4.798,1256,4.798,1257,4.798,1258,5.117,1259,3.338,1260,3.338,1261,3.338,1262,6.533,1263,8.674,1264,8.674,1265,4.925,1266,6.662,1267,3.338,1268,4.925,1269,3.338,1270,4.925,1271,3.338,1272,4.925,1273,3.338,1274,4.925,1275,3.338,1276,5.684,1277,3.338,1278,3.338,1279,4.925,1280,3.338,1281,3.338,1282,3.068,1283,2.479,1284,3.338,1285,3.233,1286,3.338,1287,5.178,1288,3.338,1289,5.178,1290,3.338,1291,2.939,1292,2.939,1293,3.842,1294,2.939,1295,5.015,1296,4.691,1297,3.338,1298,3.338,1299,3.338,1300,3.338,1301,3.338,1302,3.338,1303,3.338,1304,3.338,1305,3.338,1306,3.338,1307,3.338,1308,3.338,1309,3.338,1310,3.338,1311,3.338,1312,2.675,1313,2.322,1314,3.338,1315,2.939,1316,2.675,1317,3.947,1318,2.675,1319,2.675,1320,4.691,1321,2.675,1322,2.675,1323,2.675,1324,2.939,1325,2.191,1326,1.816,1327,3.338,1328,2.191,1329,3.338,1330,3.338,1331,3.338,1332,1.981,1333,2.939,1334,2.939,1335,3.338,1336,5.853,1337,3.338,1338,1.981,1339,3.338,1340,1.894,1341,3.338,1342,3.338,1343,3.338]],["title/interfaces/IMetricReporter.html",[169,0.227,1344,3.301]],["body/interfaces/IMetricReporter.html",[0,0.226,3,0.1,4,0.162,5,0.083,6,0.219,8,0.077,9,4.078,10,1.337,11,0.671,12,0.487,16,0.01,17,0.539,18,0.641,19,1.753,21,0.737,23,0.215,25,1.05,26,1.126,27,2.028,28,0.908,29,1.222,31,2.784,34,0.747,42,3.342,51,2.384,55,0.436,56,0.864,58,0.628,59,0.922,60,1.034,62,0.621,68,1.83,69,1.221,70,1.221,71,1.927,72,0.869,77,0.299,78,0.797,86,1.448,87,1.023,89,0.651,93,2.496,116,2.484,125,0.234,126,0.198,132,1.899,133,0.926,135,0.932,136,0.219,137,0.856,138,0.59,140,0.83,147,0.939,169,0.294,171,0.461,172,0.436,173,1.379,176,1.29,191,0.987,201,2.527,202,0.006,203,0.004,205,0.275,211,3.396,213,2.225,216,0.645,219,1.383,227,1.105,236,1.735,237,2.163,245,0.898,286,0.827,300,1.821,301,1.455,311,2.302,312,2.163,314,2.403,315,2.483,316,3.138,317,2.225,318,1.29,319,2.681,320,0.823,324,2.34,325,0.539,326,1.254,331,2.844,340,1.879,344,1.566,346,2.056,349,2.154,350,1.494,357,1.29,358,1.097,365,1.821,366,1.157,367,1.478,368,2.742,369,2.491,370,1.951,371,1.541,373,2.653,375,2.223,376,1.852,377,2.427,378,2.678,380,1.566,381,2.386,382,3.004,386,2.229,393,3.658,396,1.534,397,3.324,399,1.541,400,1.287,403,1.092,419,1.435,420,0.956,421,1.591,422,1.337,432,0.987,438,1.092,465,1.092,479,0.987,492,0.956,521,2.85,522,1.566,523,3.494,528,1.278,537,0.8,538,1.899,539,0.872,540,2.34,542,1.701,544,2.297,545,2.451,551,1.366,556,3.771,557,1.225,560,1.225,563,1.133,567,3.126,568,2.26,571,4.44,574,1.494,634,0.898,649,3.629,650,2.215,660,2.591,671,1.494,683,1.337,700,1.403,717,3.091,720,2.292,721,2.263,722,1.403,728,2.263,729,1.566,730,1.566,731,1.337,732,1.278,733,1.403,734,1.403,735,1.403,736,1.337,738,1.278,739,2.844,741,1.566,750,2.263,751,3.261,753,1.403,756,3.109,769,1.403,817,1.566,853,1.566,884,3.176,897,3.827,906,1.566,955,1.672,1016,1.566,1029,2.215,1085,1.566,1118,4.799,1134,1.828,1144,1.478,1201,1.177,1214,1.133,1340,1.278,1344,5.515,1345,1.278,1346,3.633,1347,3.633,1348,3.633,1349,4.019,1350,2.252,1351,2.252,1352,2.484,1353,4.611,1354,2.252,1355,4.019,1356,2.252,1357,2.484,1358,4.019,1359,2.997,1360,2.252,1361,2.252,1362,4.019,1363,4.273,1364,4.273,1365,4.019,1366,3.261,1367,4.019,1368,3.176,1369,4.019,1370,4.198,1371,3.659,1372,4.019,1373,2.252,1374,2.252,1375,2.252,1376,1.478,1377,1.278,1378,1.672,1379,1.403,1380,2.71,1381,1.982,1382,3.176,1383,1.982,1384,2.156,1385,1.982,1386,1.982,1387,4.562,1388,1.982,1389,1.566,1390,1.566,1391,1.478,1392,1.337,1393,1.672,1394,1.982,1395,1.982,1396,1.982,1397,1.982,1398,4.198,1399,1.805,1400,1.672,1401,1.982,1402,1.982,1403,1.805,1404,1.982,1405,1.672,1406,1.982,1407,1.982,1408,1.982,1409,3.198,1410,1.982,1411,1.982,1412,1.982,1413,2.156,1414,1.566,1415,1.982,1416,1.982,1417,3.198,1418,3.198,1419,3.198,1420,3.198,1421,3.198,1422,1.982,1423,5.689,1424,1.982,1425,5.408,1426,5.408,1427,1.982,1428,1.982,1429,1.982,1430,1.982,1431,1.982,1432,1.982,1433,1.976,1434,1.982,1435,1.982,1436,1.982,1437,1.982,1438,3.198,1439,1.982,1440,1.982,1441,1.982,1442,1.982,1443,3.198,1444,1.982,1445,1.805,1446,1.566,1447,3.198,1448,1.982,1449,5.059,1450,5.059,1451,4.019,1452,4.019,1453,4.019,1454,4.019,1455,3.198,1456,1.982,1457,4.019,1458,5.408,1459,3.198,1460,1.982,1461,4.019,1462,1.982,1463,1.982,1464,4.019,1465,1.982,1466,1.982,1467,1.982,1468,4.019,1469,1.982,1470,1.982,1471,1.982,1472,4.019,1473,1.982,1474,1.982,1475,1.982,1476,4.019,1477,1.982,1478,1.982,1479,5.408,1480,1.982,1481,1.566,1482,1.805,1483,3.261,1484,1.982,1485,3.198,1486,3.198,1487,1.982,1488,1.672,1489,4.019,1490,1.982,1491,1.982,1492,1.982,1493,1.982,1494,1.672,1495,1.982,1496,1.982,1497,1.566,1498,1.566,1499,1.566,1500,1.566,1501,4.198,1502,1.982,1503,1.805,1504,1.982,1505,1.982,1506,1.982,1507,1.982,1508,1.982,1509,3.39,1510,1.982,1511,1.982,1512,1.672,1513,1.672,1514,1.672,1515,1.672,1516,1.982,1517,1.566,1518,1.982]],["title/interfaces/InfluxMetricReporterOptions.html",[169,0.227,1519,3.092]],["body/interfaces/InfluxMetricReporterOptions.html",[0,0.183,3,0.138,4,0.207,5,0.113,6,0.098,8,0.106,11,0.647,16,0.01,18,0.816,19,1.714,20,0.909,23,0.146,24,0.658,25,1.405,27,1.833,28,0.816,29,0.819,31,2.609,55,0.438,56,0.519,58,1.116,59,1.233,62,0.925,68,0.841,71,1.603,72,1.16,77,0.171,78,0.866,89,0.62,93,2.662,125,0.135,126,0.272,134,0.984,135,0.861,136,0.304,137,0.837,140,0.885,147,1.015,151,1.481,155,2.531,161,2.814,169,0.358,170,1.143,171,0.409,172,0.425,173,0.934,174,3.108,176,1.098,202,0.007,203,0.005,205,0.378,213,1.197,216,1.603,219,1.279,226,0.841,227,1.312,236,1.878,237,2.084,245,0.53,248,1.033,252,1.616,276,0.652,286,0.704,300,1.234,301,1.346,302,4.691,308,2.898,310,1.856,311,2.32,312,2.194,313,3.839,314,2.315,315,1.783,316,3.067,317,2.166,318,1.652,319,1.987,320,1.13,321,2.817,322,2.725,323,1.652,324,2.255,325,0.741,326,1.233,327,1.556,340,1.522,342,3.248,346,1.234,348,1.755,349,2.3,350,1.272,351,1.5,352,2.45,353,1.355,354,1.442,355,1.974,356,1.355,357,1.652,358,1.405,359,1.522,360,3.786,361,1.755,362,4.071,363,2.03,364,1.234,365,1.234,368,1.974,369,2.451,370,1.878,371,1.312,372,1.448,373,2.438,374,2.179,375,1.312,376,2.402,377,1.645,378,2.585,379,1.926,383,1.098,389,1.835,396,2.444,397,3.202,398,3.528,399,1.312,400,1.143,403,1.5,409,1.556,418,3.086,420,1.312,421,2.038,422,3.96,423,3.53,428,2.64,431,1.556,432,2.038,437,1.556,438,2.257,439,1.333,440,1.556,445,2.341,447,2.341,449,2.341,451,2.341,453,2.341,455,2.341,457,2.341,459,2.341,461,2.341,463,2.341,464,1.556,465,2.257,471,1.556,473,1.556,475,1.556,477,1.556,478,1.556,479,2.038,480,1.556,484,1.556,485,1.556,486,1.556,487,1.556,491,1.926,495,4.247,533,2.341,537,1.987,540,1.929,546,1.355,568,1.039,642,2.898,644,1.616,655,2.531,671,1.272,714,1.926,715,2.03,795,2.817,867,2.531,966,2.761,969,2.898,1053,3.454,1130,5.4,1131,3.454,1132,3.454,1137,2.296,1139,4.155,1215,2.151,1328,3.054,1352,2.531,1414,2.151,1519,4.875,1520,2.296,1521,5.281,1522,5.08,1523,3.692,1524,2.761,1525,2.151,1526,4.774,1527,3.728,1528,2.478,1529,2.478,1530,2.03,1531,3.236,1532,3.875,1533,3.236,1534,2.151,1535,2.478,1536,4.64,1537,2.151,1538,2.478,1539,3.728,1540,2.478,1541,2.151,1542,2.478,1543,2.478,1544,2.478,1545,2.478,1546,4.482,1547,2.478,1548,1.755,1549,3.728,1550,2.478,1551,2.478,1552,2.478,1553,2.478,1554,2.478,1555,2.478,1556,2.478,1557,3.786,1558,5.347,1559,2.478,1560,2.478,1561,4.986,1562,2.478,1563,2.478,1564,2.478,1565,2.478,1566,2.478,1567,2.478,1568,3.728,1569,3.728,1570,3.728,1571,3.728,1572,3.728,1573,3.728,1574,3.728,1575,3.728,1576,3.728,1577,3.728,1578,2.478,1579,2.478,1580,3.728,1581,3.728,1582,3.728,1583,3.728,1584,2.478,1585,2.478,1586,2.478,1587,2.478]],["title/classes/Influxdb1Sender.html",[0,0.174,1588,3.563]],["body/classes/Influxdb1Sender.html",[0,0.254,2,1.279,3,0.22,4,0.288,5,0.181,6,0.27,8,0.221,12,1.563,16,0.01,18,0.792,23,0.305,24,0.917,25,1.781,28,1.061,29,1.502,34,1.332,55,0.453,56,0.551,57,1.868,58,0.68,59,1.14,60,1.298,62,0.909,72,1.022,77,0.181,78,0.642,86,1.633,87,1.265,89,0.579,125,0.21,126,0.435,134,2.063,136,0.271,137,0.706,140,0.655,147,0.587,148,2.177,171,0.57,172,0.421,202,0.007,203,0.007,219,1.332,226,1.763,245,1.11,252,4.503,276,1.366,301,1.402,326,1.14,327,3.857,340,2.119,369,2.512,370,2.577,378,2.496,400,1.215,409,3.26,419,1.513,537,2.566,544,3.26,545,2.882,546,2.838,574,2.034,644,4.007,795,3.471,900,5.332,987,4.506,1352,3.524,1433,3.524,1521,3.08,1522,5.01,1523,4.288,1524,4.723,1532,5.257,1533,5.787,1534,5.332,1536,5.535,1537,3.44,1588,7.038,1589,4.354,1590,6.178,1591,4.354,1592,8.44,1593,8.44,1594,6.479,1595,4.946,1596,4.946,1597,6.479,1598,6.479,1599,4.946,1600,4.946,1601,5.192,1602,6.36,1603,5.703,1604,4.946,1605,4.506,1606,7.958,1607,4.946,1608,4.946,1609,4.354,1610,4.946,1611,6.479,1612,4.354,1613,4.354,1614,4.946,1615,7.225,1616,4.946,1617,4.946,1618,4.946,1619,3.964,1620,4.946,1621,4.946,1622,5.703,1623,4.946]],["title/classes/Influxdb2Sender.html",[0,0.174,1624,3.301]],["body/classes/Influxdb2Sender.html",[0,0.236,2,1.14,3,0.196,4,0.267,5,0.162,6,0.269,8,0.15,12,1.476,16,0.01,18,1.006,23,0.208,24,0.849,25,1.797,28,1.041,29,1.536,34,1.234,55,0.457,57,1.764,58,0.606,60,1.298,62,0.976,72,1.25,77,0.162,78,0.95,86,1.513,87,1.172,89,0.553,125,0.213,126,0.388,136,0.251,137,0.79,140,0.817,147,0.712,148,2.017,171,0.528,172,0.42,202,0.007,203,0.007,219,1.234,225,1.997,245,1.028,252,3.827,258,4.215,276,1.266,301,1.298,326,1.056,327,3.684,369,2.441,370,2.519,378,2.646,419,1.401,495,2.503,537,2.423,544,3.019,545,2.721,546,2.629,569,4.174,574,1.814,589,3.275,644,3.827,671,1.814,795,3.577,900,5.093,1046,5.687,1116,3.882,1352,3.265,1433,3.265,1521,2.747,1522,4.69,1524,4.546,1526,5.027,1532,4.922,1533,5.623,1534,5.093,1536,5.327,1537,3.067,1590,5.065,1591,3.882,1601,4.81,1605,4.174,1609,3.882,1612,3.882,1613,3.882,1622,5.283,1624,6.483,1625,3.882,1626,6.001,1627,8.436,1628,8.804,1629,8.085,1630,7.659,1631,7.902,1632,7.322,1633,6.001,1634,4.41,1635,4.41,1636,4.41,1637,7.322,1638,4.41,1639,6.001,1640,4.41,1641,6.446,1642,4.41,1643,6.001,1644,4.41,1645,4.41,1646,6.001,1647,5.283,1648,6.001,1649,6.001,1650,4.41,1651,4.41,1652,6.001,1653,7.322,1654,6.001,1655,4.41,1656,4.41,1657,4.41,1658,4.41,1659,4.41,1660,4.41,1661,4.41,1662,6.001,1663,6.001,1664,4.41,1665,4.41,1666,6.001,1667,4.41,1668,4.41,1669,4.41,1670,4.41,1671,4.41,1672,4.41,1673,4.41,1674,4.41,1675,4.41,1676,4.41]],["title/classes/Int64Wrapper.html",[0,0.174,1677,2.918]],["body/classes/Int64Wrapper.html",[0,0.319,2,1.492,3,0.257,4,0.257,5,0.212,6,0.269,8,0.197,16,0.01,18,0.874,23,0.272,24,1.012,25,1.627,28,1.086,34,1.47,53,5.056,55,0.427,56,0.99,58,1.215,59,1.016,60,1.283,62,0.963,72,1.18,78,0.749,86,1.802,87,1.396,89,0.631,136,0.299,137,0.699,140,0.584,147,0.921,168,4.243,171,0.629,172,0.416,202,0.008,203,0.008,245,1.225,276,1.217,295,4.286,419,1.669,1029,3.468,1262,5.309,1312,5.73,1366,4.057,1677,5.799,1678,4.286,1679,8.117,1680,7.766,1681,5.309,1682,8.117,1683,7.149,1684,7.149,1685,7.149,1686,5.772,1687,5.772,1688,7.145,1689,6.293,1690,7.149,1691,7.149,1692,7.145,1693,5.772,1694,6.293,1695,4.015,1696,5.081,1697,5.081,1698,5.772,1699,7.149,1700,5.772,1701,5.772,1702,5.772,1703,5.772]],["title/interfaces/InterprocessMessage.html",[169,0.227,1380,2.638]],["body/interfaces/InterprocessMessage.html",[3,0.255,4,0.316,5,0.21,6,0.181,8,0.195,11,0.468,16,0.01,19,1.801,22,1.873,23,0.27,24,1.006,55,0.475,68,2.385,69,2.72,70,1.924,72,1.23,77,0.21,93,1.924,125,0.242,126,0.504,135,0.658,136,0.339,138,0.93,169,0.44,170,0.981,172,0.423,202,0.008,203,0.008,205,0.7,208,1.924,300,2.284,301,1.539,305,6.01,315,1.641,319,2.749,320,2.092,326,1.362,365,2.284,366,1.823,373,2.577,386,2.052,397,2.284,400,2.19,525,3.22,538,3.718,539,3.134,540,2.205,614,3.451,634,2.284,660,4.933,720,2.838,731,4.222,732,4.036,733,4.43,734,4.43,735,4.43,736,4.222,738,4.593,1340,3.249,1378,4.251,1380,4.804,1384,4.222,1704,4.251,1705,4.251,1706,4.669,1707,4.251,1708,5.04]],["title/interfaces/InterprocessReportMessage.html",[169,0.227,660,2.523]],["body/interfaces/InterprocessReportMessage.html",[3,0.247,4,0.311,5,0.204,6,0.176,8,0.19,11,0.571,16,0.01,19,1.912,22,1.818,23,0.262,24,0.988,55,0.472,68,2.373,69,2.905,70,2.347,72,1.133,77,0.204,93,1.868,125,0.24,126,0.489,135,0.639,136,0.335,138,1.134,169,0.437,170,1.197,172,0.42,202,0.009,203,0.008,205,0.68,208,2.347,300,2.217,301,1.652,305,5.185,315,2.001,319,2.931,320,2.031,326,1.452,365,2.786,366,1.77,373,2.796,386,2.189,397,3.195,400,2.222,525,2.516,538,2.905,539,2.704,540,1.723,614,2.696,634,2.217,660,4.949,720,2.217,731,4.531,732,4.332,733,4.755,734,4.755,735,4.755,736,4.531,738,3.154,1050,5.596,1340,3.154,1378,4.127,1380,4.753,1384,4.531,1704,4.127,1705,4.127,1706,3.648,1707,5.185,1708,6.147]],["title/interfaces/InterprocessReportRequest.html",[169,0.227,1709,3.092]],["body/interfaces/InterprocessReportRequest.html",[3,0.289,4,0.342,5,0.238,6,0.205,8,0.222,16,0.01,23,0.306,24,1.086,29,1.143,30,3.708,55,0.404,64,4.783,68,2.09,69,2.839,70,2.839,72,1.237,77,0.238,125,0.224,136,0.321,169,0.393,170,1.401,172,0.324,202,0.008,203,0.008,205,0.794,227,1.62,325,1.556,326,1.438,537,3.001,539,2.973,540,2.619,548,2.244,1122,4.558,1380,5.014,1517,5.341,1709,5.876,1710,5.206,1711,6.154,1712,6.154,1713,6.154]],["title/interfaces/InterprocessReportResponse.html",[169,0.227,1714,3.092]],["body/interfaces/InterprocessReportResponse.html",[3,0.285,4,0.339,5,0.235,6,0.203,8,0.219,11,0.623,16,0.01,23,0.302,24,1.078,29,1.341,30,3.698,55,0.442,68,2.074,69,2.561,70,2.561,72,1.269,77,0.235,125,0.222,136,0.319,169,0.39,170,1.393,172,0.38,202,0.008,203,0.008,205,0.784,325,1.536,326,1.431,537,2.707,539,2.951,540,2.702,548,2.215,1122,4.523,1380,4.993,1714,5.975,1715,5.14,1716,5.24,1717,6.742,1718,6.108,1719,7.621]],["title/interfaces/LengthAttributeInterface.html",[169,0.227,1720,2.918]],["body/interfaces/LengthAttributeInterface.html",[0,0.249,1,2.923,3,0.213,4,0.282,5,0.175,6,0.151,8,0.258,11,0.581,12,1.371,16,0.01,17,1.146,18,0.869,23,0.226,24,0.897,25,1.27,26,2.598,28,0.869,29,0.842,31,2.668,52,2.407,55,0.374,56,0.962,58,0.872,62,0.568,72,1.071,77,0.232,89,0.624,125,0.207,126,0.421,134,1.523,135,0.905,136,0.358,137,0.807,138,1.03,140,0.484,143,3.211,147,0.96,151,2.018,169,0.447,170,1.086,171,0.558,172,0.418,202,0.007,203,0.007,205,0.585,208,3.057,212,2.325,224,2.19,226,1.302,245,0.82,276,1.337,286,1.443,312,2.256,359,1.565,365,1.909,400,1.557,419,1.767,612,2.501,613,2.715,614,2.321,634,1.909,643,2.166,1019,3.925,1228,2.407,1234,2.98,1235,3.948,1236,2.98,1237,3.14,1413,4.492,1720,5.418,1721,2.98,1722,2.98,1723,5.846,1724,5.476,1725,5.124,1726,5.278,1727,5.311,1728,5.311,1729,5.311,1730,4.944,1731,6.005,1732,3.553,1733,5.619,1734,3.553,1735,3.553,1736,5.619,1737,3.553,1738,3.553,1739,3.553,1740,3.553,1741,3.553,1742,6.129,1743,3.553,1744,3.553,1745,3.553]],["title/interfaces/LengthMethodInterface.html",[169,0.227,1727,2.918]],["body/interfaces/LengthMethodInterface.html",[0,0.249,1,2.922,3,0.213,4,0.282,5,0.175,6,0.2,8,0.258,11,0.581,12,1.371,16,0.01,17,1.145,18,0.869,23,0.225,25,1.27,26,2.598,28,0.869,29,0.841,31,2.668,34,1.303,52,2.406,55,0.333,56,0.954,58,0.871,60,0.735,62,0.567,72,1.07,77,0.232,89,0.633,125,0.207,126,0.421,134,1.522,135,0.905,136,0.358,137,0.807,138,1.029,140,0.483,143,3.21,147,0.959,151,2.262,169,0.447,170,1.086,171,0.558,172,0.418,202,0.007,203,0.007,205,0.585,208,3.057,212,2.072,224,2.189,226,1.301,245,0.819,276,1.336,286,1.442,312,2.256,359,1.564,365,1.907,400,1.175,419,1.767,612,2.499,613,2.713,614,2.319,634,1.907,643,2.165,1019,3.924,1228,2.406,1234,2.978,1235,3.946,1236,2.978,1237,3.138,1413,4.49,1720,5.31,1721,3.946,1722,2.978,1723,5.845,1724,5.475,1725,5.123,1726,4.705,1727,5.417,1728,5.31,1729,5.31,1730,4.942,1731,6.004,1732,3.55,1733,5.618,1734,3.55,1735,3.55,1736,5.618,1737,3.55,1738,3.55,1739,3.55,1740,3.55,1741,3.55,1742,6.128,1743,3.55,1744,3.55,1745,3.55,1746,4.781]],["title/interfaces/LogLine.html",[169,0.227,1747,3.092]],["body/interfaces/LogLine.html",[0,0.222,3,0.252,4,0.21,5,0.116,6,0.1,8,0.108,9,2.38,11,0.673,12,0.684,16,0.01,17,0.757,18,1.045,19,1.63,20,2.489,21,2.203,23,0.149,24,0.669,25,0.948,27,1.941,28,0.769,29,0.556,31,2.62,55,0.433,56,0.751,58,1.193,62,0.944,72,1.037,77,0.173,78,0.816,89,0.582,125,0.245,126,0.278,134,2.144,135,0.973,136,0.263,137,0.839,140,0.805,147,0.976,169,0.385,170,1.154,171,0.278,172,0.417,173,0.955,174,2.608,202,0.007,203,0.005,205,0.387,210,2.235,216,1.803,219,0.65,226,0.86,227,0.667,231,3.651,236,1.899,237,2.159,245,0.811,248,1.05,257,1.905,276,0.667,286,1.29,288,1.887,300,1.887,301,1.226,302,1.794,310,1.887,311,2.088,312,2.207,313,3.984,314,2.399,315,1.93,316,2.195,317,2.608,318,1.68,319,2.392,320,1.155,321,2.142,322,2.483,323,1.68,324,2.335,326,0.832,332,2.295,339,1.591,340,1.854,342,3.459,346,1.255,348,3.57,349,1.945,351,1.534,352,2.483,353,1.385,354,1.757,355,2.007,356,1.385,357,1.68,358,1.428,359,1.034,360,2.684,361,1.794,362,2.573,366,1.804,367,2.075,368,2.405,369,1.428,370,1.428,371,1.341,372,1.481,373,2.642,374,1.481,375,2.405,376,2.159,377,2.079,383,1.123,386,1.255,396,2.264,397,3.283,398,1.534,399,1.341,400,1.162,418,2.858,419,1.323,420,1.341,421,1.385,423,3.822,425,2.199,427,2.199,432,1.385,433,2.199,434,2.199,438,1.534,439,1.355,440,1.591,441,2.199,442,2.199,445,2.38,447,2.38,449,2.38,451,2.38,453,2.38,455,2.38,457,2.38,459,2.38,461,2.38,463,2.38,465,1.534,467,2.199,468,2.199,471,1.591,473,1.591,475,1.591,477,1.591,479,1.385,480,1.591,481,2.199,482,2.199,484,1.591,485,1.591,486,1.591,487,1.591,501,2.807,506,2.215,525,1.431,540,2.591,556,2.072,564,3.664,568,1.063,720,2.687,775,3.165,776,2.848,777,4.885,778,3.105,779,3.105,780,3.105,781,3.105,782,3.105,783,3.105,784,3.105,788,3.105,789,3.105,790,3.105,791,3.105,819,2.072,1139,4.195,1144,2.075,1155,2.684,1180,2.573,1192,3.845,1282,2.946,1340,1.794,1345,1.794,1368,2.199,1379,1.969,1384,3.364,1392,2.807,1481,3.29,1483,1.794,1497,2.199,1498,2.199,1499,2.199,1500,2.199,1747,5.916,1748,2.199,1749,2.348,1750,5.852,1751,2.534,1752,5.814,1753,4.375,1754,2.534,1755,2.348,1756,2.534,1757,2.534,1758,5.665,1759,2.534,1760,2.348,1761,2.534,1762,2.534,1763,2.534,1764,2.534,1765,4.195,1766,2.534,1767,5.398,1768,5.398,1769,5.398,1770,5.398,1771,2.534,1772,2.534,1773,2.534,1774,2.684,1775,2.807,1776,2.946,1777,2.946,1778,2.946,1779,3.105,1780,2.199,1781,4.542,1782,3.791,1783,3.791,1784,3.791,1785,3.791,1786,3.791,1787,3.791,1788,3.791,1789,3.791,1790,3.791,1791,3.791,1792,2.534,1793,2.199,1794,3.791,1795,3.791,1796,3.791,1797,3.791,1798,2.534,1799,2.199]],["title/interfaces/Logger.html",[169,0.227,313,2.082]],["body/interfaces/Logger.html",[3,0.383,4,0.316,5,0.21,6,0.181,8,0.195,16,0.01,23,0.27,24,1.006,55,0.438,77,0.21,125,0.167,126,0.504,134,2.809,136,0.298,138,1.433,169,0.364,202,0.008,203,0.008,205,0.7,227,1.5,313,3.898,342,3.744,491,4.43,504,4.44,540,2.735,637,5.569,928,3.869,1392,5.237,1760,6.755,1800,4.589,1801,4.036,1802,8.484,1803,8.484,1804,8.484,1805,7.072,1806,8.008,1807,8.693,1808,8.824,1809,5.701,1810,4.669,1811,7.113,1812,8.323]],["title/interfaces/LoggerReporterOptions.html",[169,0.227,1753,3.092]],["body/interfaces/LoggerReporterOptions.html",[0,0.223,3,0.253,4,0.211,5,0.116,6,0.1,8,0.108,9,1.598,11,0.673,12,0.687,16,0.01,17,0.761,18,1.046,19,1.632,20,2.423,21,2.207,23,0.15,24,0.672,25,0.951,27,1.944,28,0.771,29,0.559,31,2.623,55,0.429,56,0.752,58,1.194,62,0.931,72,0.892,77,0.174,78,0.818,87,0.927,89,0.583,125,0.245,126,0.279,134,1.809,135,0.974,136,0.264,137,0.84,140,0.806,147,0.977,169,0.375,170,1.213,171,0.279,172,0.417,173,0.959,174,2.613,202,0.007,203,0.005,205,0.388,210,2.24,216,1.807,219,0.653,226,0.864,227,1.001,231,3.655,236,1.904,237,2.162,245,0.813,248,1.053,257,1.595,276,0.67,286,1.294,288,1.893,300,1.893,301,1.364,302,1.802,310,1.893,311,2.092,312,2.21,313,4.005,314,2.402,315,1.934,316,2.2,317,2.613,318,1.686,319,2.397,320,1.16,321,2.149,322,2.762,323,1.686,324,2.339,326,1,332,1.541,339,1.598,340,2.062,342,3.524,346,1.259,348,3.578,349,1.952,351,1.541,352,2.49,353,1.391,354,1.762,355,2.014,356,1.391,357,1.686,358,1.433,359,1.039,360,2.693,361,1.802,362,2.582,366,1.809,367,2.085,368,2.411,369,1.433,370,1.433,371,1.347,372,1.487,373,2.644,374,1.487,375,2.411,376,2.162,377,2.082,383,1.128,386,1.259,396,2.268,397,3.286,398,1.541,399,1.347,400,1.166,418,2.863,419,1.327,420,1.347,421,1.391,423,3.829,425,2.209,427,2.209,432,1.391,433,2.209,434,2.209,438,1.541,439,1.36,440,1.598,441,2.209,442,2.209,445,2.388,447,2.388,449,2.388,451,2.388,453,2.388,455,2.388,457,2.388,459,2.388,461,2.388,463,2.388,465,1.541,467,2.209,468,2.209,471,1.598,473,1.598,475,1.598,477,1.598,479,1.391,480,1.598,481,2.209,482,2.209,484,1.598,485,1.598,486,1.598,487,1.598,501,1.885,506,1.487,525,1.438,540,2.502,556,2.079,564,3.671,568,1.067,720,2.692,775,3.172,776,2.854,777,4.891,778,3.115,779,3.115,780,3.115,781,3.115,782,3.115,783,3.115,784,3.115,788,3.115,789,3.115,790,3.115,791,3.115,819,2.079,1139,4.203,1144,2.085,1155,2.693,1180,2.582,1192,3.851,1282,2.956,1340,1.802,1345,1.802,1368,2.209,1379,1.978,1384,3.373,1392,2.817,1481,3.301,1483,1.802,1497,2.209,1498,2.209,1499,2.209,1500,2.209,1747,5.89,1748,2.209,1749,2.358,1750,5.856,1751,2.545,1752,5.856,1753,4.693,1754,2.545,1755,2.358,1756,2.545,1757,2.545,1758,5.674,1759,2.545,1760,2.358,1761,2.545,1762,2.545,1763,2.545,1764,2.545,1765,4.203,1766,2.545,1767,5.408,1768,5.408,1769,5.408,1770,5.408,1771,2.545,1772,2.545,1773,2.545,1774,2.693,1775,2.817,1776,2.956,1777,2.956,1778,2.956,1779,3.115,1780,2.209,1781,4.554,1782,3.804,1783,3.804,1784,3.804,1785,3.804,1786,3.804,1787,3.804,1788,3.804,1789,3.804,1790,3.804,1791,3.804,1792,2.545,1793,2.209,1794,3.804,1795,3.804,1796,3.804,1797,3.804,1798,2.545,1799,2.209]],["title/interfaces/LoggerReportingContext.html",[169,0.227,1750,3.092]],["body/interfaces/LoggerReportingContext.html",[0,0.223,3,0.253,4,0.211,5,0.117,6,0.101,8,0.109,9,1.6,11,0.673,12,0.688,16,0.01,17,0.762,18,1.046,19,1.633,20,2.443,21,2.208,23,0.15,24,0.672,25,0.952,27,1.944,28,0.771,29,0.56,31,2.623,55,0.429,56,0.753,58,1.194,62,0.915,72,0.893,77,0.174,78,0.819,89,0.583,125,0.245,126,0.28,134,1.811,135,0.974,136,0.264,137,0.84,140,0.806,147,0.977,169,0.386,170,1.214,171,0.28,172,0.417,173,0.96,174,2.614,202,0.007,203,0.005,205,0.389,210,2.241,216,1.808,219,0.654,226,0.865,227,0.671,231,3.656,236,1.905,237,2.163,245,0.814,248,1.054,257,1.911,276,0.671,286,1.295,288,1.895,300,1.895,301,1.231,302,1.805,310,1.895,311,2.093,312,2.211,313,3.944,314,2.403,315,1.935,316,2.443,317,2.614,318,1.688,319,2.398,320,1.162,321,2.151,322,2.492,323,1.688,324,2.34,326,0.836,332,1.543,339,1.6,340,1.86,342,3.463,346,1.26,348,4.166,349,1.954,351,1.543,352,2.492,353,1.393,354,1.763,355,2.016,356,1.393,357,1.688,358,1.434,359,1.04,360,2.696,361,1.805,362,2.584,366,1.811,367,2.087,368,2.413,369,1.434,370,1.434,371,1.349,372,1.489,373,2.645,374,1.489,375,2.413,376,2.163,377,2.083,383,1.13,386,1.508,396,2.269,397,3.287,398,1.543,399,1.349,400,1.167,418,2.865,419,1.328,420,1.349,421,1.393,423,3.831,425,2.212,427,2.212,432,1.393,433,2.212,434,2.212,438,1.543,439,1.361,440,1.6,441,2.212,442,2.212,445,2.39,447,2.39,449,2.39,451,2.39,453,2.39,455,2.39,457,2.39,459,2.39,461,2.39,463,2.39,465,1.543,467,2.212,468,2.212,471,1.6,473,1.6,475,1.6,477,1.6,479,1.393,480,1.6,481,2.212,482,2.212,484,1.6,485,1.6,486,1.6,487,1.6,501,1.887,506,1.489,525,2.151,540,2.503,556,2.081,564,3.673,568,1.069,720,2.694,775,3.174,776,2.856,777,4.892,778,3.118,779,3.118,780,3.118,781,3.118,782,3.118,783,3.118,784,3.118,788,3.118,789,3.118,790,3.118,791,3.118,819,2.081,1139,4.205,1144,2.087,1155,2.696,1180,2.584,1192,3.853,1282,2.959,1340,1.805,1345,1.805,1368,2.212,1379,1.981,1384,3.745,1392,2.82,1481,3.304,1483,1.805,1497,2.212,1498,2.212,1499,2.212,1500,2.212,1747,5.891,1748,2.212,1749,2.361,1750,5.891,1751,3.808,1752,5.82,1753,4.388,1754,2.549,1755,2.361,1756,2.549,1757,2.549,1758,5.677,1759,2.549,1760,2.361,1761,2.549,1762,2.549,1763,2.549,1764,2.549,1765,4.205,1766,2.549,1767,5.411,1768,5.411,1769,5.411,1770,5.411,1771,2.549,1772,2.549,1773,2.549,1774,2.696,1775,2.82,1776,2.959,1777,2.959,1778,2.959,1779,3.118,1780,2.212,1781,4.558,1782,3.808,1783,3.808,1784,3.808,1785,3.808,1786,3.808,1787,3.808,1788,3.808,1789,3.808,1790,3.808,1791,3.808,1792,2.549,1793,2.212,1794,3.808,1795,3.808,1796,3.808,1797,3.808,1798,2.549,1799,2.212]],["title/interfaces/MeasurementPoint.html",[169,0.227,1526,2.918]],["body/interfaces/MeasurementPoint.html",[0,0.18,3,0.135,4,0.204,5,0.111,6,0.096,8,0.104,11,0.645,16,0.01,18,0.851,19,1.797,20,0.893,23,0.143,24,0.649,25,1.395,27,1.822,28,0.809,29,0.808,31,2.601,55,0.451,56,0.738,58,1.112,59,1.225,62,0.904,68,0.827,71,1.585,72,1.197,77,0.168,78,0.859,89,0.617,93,2.651,125,0.134,126,0.267,134,1.461,135,0.856,136,0.303,137,0.835,140,0.883,147,1.013,151,1.461,155,2.497,161,2.784,169,0.356,170,1.057,171,0.487,172,0.424,173,0.917,174,3.215,176,1.079,202,0.007,203,0.005,205,0.371,213,1.176,216,1.585,219,1.137,226,1.249,227,0.968,236,1.862,237,2.072,245,0.52,248,1.368,252,2.399,276,0.641,286,0.692,300,1.212,301,1.197,302,4.865,308,1.892,310,1.831,311,2.307,312,2.183,313,3.695,314,2.302,315,1.767,316,3.055,317,2.142,318,1.63,319,1.965,320,1.11,321,2.791,322,2.424,323,1.63,324,2.241,325,0.728,326,1.165,327,1.528,340,0.993,342,2.954,346,1.217,348,1.724,349,2.275,350,1.249,351,1.474,352,2.424,353,1.331,354,1.423,355,1.947,356,1.331,357,1.63,358,1.386,359,1.501,360,3.757,361,1.724,362,4.049,363,1.994,364,1.212,365,1.212,368,1.947,369,2.442,370,1.862,371,1.289,372,1.423,373,2.575,374,2.15,375,1.289,376,2.361,377,1.627,378,2.571,379,1.892,383,1.079,389,1.803,396,2.429,397,3.19,398,3.827,399,1.289,400,1.128,403,1.474,409,1.528,418,3.067,420,1.289,421,2.011,422,3.929,423,3.499,428,2.605,431,1.528,432,2.011,437,1.528,438,2.227,439,1.315,440,1.528,445,2.309,447,2.309,449,2.309,451,2.309,453,2.309,455,2.309,457,2.309,459,2.309,461,2.309,463,2.309,464,1.528,465,2.227,471,1.528,473,1.528,475,1.528,477,1.528,478,1.528,479,2.011,480,1.528,484,1.528,485,1.528,486,1.528,487,1.528,491,1.892,495,4.323,533,3.102,537,1.63,540,1.911,546,1.331,568,1.021,642,2.859,644,1.588,655,3.01,671,1.888,714,1.892,715,1.994,795,2.791,867,3.354,966,2.724,969,2.859,1050,4.941,1053,2.256,1130,5.368,1131,3.408,1132,3.408,1137,2.256,1139,4.123,1215,2.113,1328,3.013,1352,2.497,1414,3.192,1519,4.604,1520,2.256,1521,5.239,1522,4.89,1523,3.929,1524,1.803,1525,3.192,1526,4.885,1527,4.941,1528,3.679,1529,3.679,1530,3.013,1531,3.848,1532,3.84,1533,3.192,1534,2.113,1535,2.434,1536,4.604,1537,2.113,1538,2.434,1539,3.679,1540,2.434,1541,2.113,1542,2.434,1543,2.434,1544,2.434,1545,2.434,1546,4.434,1547,2.434,1548,1.724,1549,3.679,1550,2.434,1551,2.434,1552,2.434,1553,2.434,1554,2.434,1555,2.434,1556,2.434,1557,3.757,1558,5.306,1559,2.434,1560,2.434,1561,4.941,1562,2.434,1563,2.434,1564,2.434,1565,2.434,1566,2.434,1567,2.434,1568,3.679,1569,3.679,1570,3.679,1571,3.679,1572,3.679,1573,3.679,1574,3.679,1575,3.679,1576,3.679,1577,3.679,1578,2.434,1579,2.434,1580,3.679,1581,3.679,1582,3.679,1583,3.679,1584,2.434,1585,2.434,1586,2.434,1587,2.434]],["title/interfaces/Metadata.html",[20,1.307,169,0.227]],["body/interfaces/Metadata.html",[2,1.473,3,0.253,4,0.315,5,0.209,6,0.224,8,0.194,16,0.01,18,1.051,20,2.689,32,4.585,39,3.382,58,1.111,60,0.876,62,0.841,72,1.229,77,0.327,78,0.739,80,4.381,89,0.65,91,3.382,93,2.943,99,3.382,110,3.382,125,0.166,126,0.501,129,5.278,135,0.929,136,0.36,137,0.828,138,1.152,140,0.717,147,0.841,169,0.433,171,0.624,172,0.403,173,1.72,191,3.641,202,0.008,203,0.008,205,0.697,226,2.262,257,2.383,273,3.549,366,2.458,392,3.963,419,1.656,1134,2.867,1357,3.099,1446,3.963,1813,4.932,1814,3.963,1815,5.266,1816,5.698,1817,5.016,1818,5.016,1819,5.016,1820,5.016,1821,5.016,1822,4.932,1823,4.566,1824,5.016,1825,5.016,1826,5.016,1827,4.566,1828,5.016,1829,5.016]],["title/interfaces/MetadataContainer.html",[129,2.769,169,0.227]],["body/interfaces/MetadataContainer.html",[2,1.736,3,0.232,4,0.299,5,0.192,6,0.256,8,0.267,16,0.01,18,1.093,20,2.692,23,0.246,32,4.442,34,1.38,38,4.669,39,4.646,43,4.669,48,4.669,55,0.436,58,1.159,60,1.204,62,0.929,72,1.252,77,0.326,78,0.678,80,4.703,86,2.089,87,1.449,89,0.662,91,3.984,93,3.005,99,3.984,110,3.984,125,0.152,126,0.46,129,5.25,135,0.9,136,0.353,137,0.81,138,1.09,140,0.679,147,0.796,169,0.424,171,0.689,172,0.39,173,2.027,191,3.692,202,0.007,203,0.007,205,0.639,226,2.255,257,1.756,366,2.362,392,4.669,419,1.828,1134,3.378,1357,3.652,1446,4.669,1813,5.632,1814,3.634,1815,3.879,1817,5.909,1818,5.909,1819,5.909,1820,5.909,1821,5.909,1822,4.669,1823,4.187,1824,4.599,1825,4.599,1826,4.599,1827,4.187,1828,4.599,1829,4.599,1830,5.224,1831,5.224,1832,5.224,1833,5.224]],["title/interfaces/Metered.html",[169,0.227,1834,2.918]],["body/interfaces/Metered.html",[3,0.238,4,0.304,5,0.197,6,0.264,8,0.183,11,0.693,16,0.01,22,2.455,23,0.253,34,1.403,55,0.395,56,1.013,60,1.255,77,0.197,89,0.66,120,2.204,121,1.801,125,0.199,126,0.472,135,0.863,136,0.349,138,1.108,169,0.433,170,1.398,171,0.768,172,0.428,202,0.007,203,0.007,205,0.655,210,2.424,211,3.575,212,2.232,215,2.293,216,1.536,217,4.691,219,1.625,230,2.6,233,2.823,239,4.131,248,1.19,257,1.801,288,2.722,314,2.39,326,0.943,439,1.536,562,4.485,643,3.578,717,3.433,720,2.138,776,3.777,1180,3.712,1192,4.922,1201,4.361,1212,4.928,1214,3.433,1557,3.872,1716,4.25,1834,5.633,1835,3.728,1836,5.868,1837,5.868,1838,5.868,1839,5.868,1840,5.36,1841,5.36,1842,5.36,1843,5.36,1844,5.221,1845,5.36,1846,5.067,1847,5.187,1848,4.295,1849,5.357,1850,3.98,1851,4.295,1852,4.295]],["title/interfaces/MeteredRates.html",[169,0.227,1847,2.918]],["body/interfaces/MeteredRates.html",[3,0.252,4,0.315,5,0.208,6,0.223,8,0.193,11,0.678,16,0.01,22,2.52,55,0.405,56,1.011,60,0.872,77,0.208,89,0.627,120,2.908,121,1.906,125,0.206,126,0.499,135,0.886,136,0.354,138,0.921,169,0.444,170,1.382,171,0.73,172,0.432,202,0.008,203,0.008,205,0.693,210,2.511,211,3.375,212,1.854,215,2.376,216,1.625,217,4.573,219,1.584,230,2.751,233,2.897,239,2.964,248,1.258,257,2.376,273,3.532,288,2.262,314,2.642,326,1.244,439,2.026,562,4.012,643,3.488,717,2.853,720,2.262,776,3.652,1180,3.085,1192,4.862,1201,4.027,1212,4.641,1214,2.853,1557,3.217,1716,3.532,1834,5.634,1835,3.944,1836,4.21,1837,4.21,1838,4.21,1839,4.21,1844,4.917,1846,5.721,1847,5.448,1848,4.544,1849,5.448,1850,4.21,1851,4.544,1852,4.544,1853,5.67]],["title/interfaces/Metric.html",[11,0.363,169,0.227]],["body/interfaces/Metric.html",[0,0.262,1,3.323,3,0.16,4,0.231,5,0.132,6,0.224,7,2.354,8,0.289,9,3.069,10,2.129,11,0.746,12,1.446,13,2.874,14,2.494,15,2.354,16,0.01,17,1.771,18,1.043,19,1.834,20,2.475,21,2.554,22,2.908,23,0.169,25,1.04,26,1.891,27,1.308,28,1.081,29,0.631,30,2.588,31,2.428,32,2.035,33,2.035,34,1.067,36,4.656,37,2.234,39,2.129,40,4.656,42,1.951,46,3.61,49,3.61,52,1.804,53,2.234,55,0.439,56,0.68,58,1.049,59,0.913,60,1.028,62,0.793,63,2.354,64,3.799,65,1.68,66,1.624,67,1.624,68,0.976,69,1.205,70,1.205,71,1.028,72,1.286,75,2.354,77,0.303,78,0.674,80,2.035,83,2.354,84,2.129,86,1.308,87,1.014,89,0.631,91,2.129,93,2.384,96,2.129,99,2.129,101,2.129,103,2.129,106,4.003,108,2.234,110,2.129,112,4.003,114,2.129,116,1.951,119,2.494,120,1.475,121,1.205,125,0.195,126,0.316,127,5.223,128,2.494,129,4.75,130,2.874,131,2.234,132,4.082,133,1.475,134,1.142,135,0.951,136,0.36,137,0.763,138,1.313,139,2.494,140,0.525,141,1.951,142,4.16,143,3.01,144,4.16,145,4.16,146,4.16,147,1.063,148,1.205,149,2.874,150,3.569,151,2.258,152,2.354,153,5.267,154,2.494,155,1.951,156,2.354,157,2.874,158,2.874,159,2.354,160,2.874,161,1.804,162,2.663,163,2.874,164,2.874,165,2.035,166,2.874,167,2.874,168,3.08,169,0.342,170,1.307,171,0.588,172,0.427,173,2.018,174,1.389,175,2.874,176,1.274,177,2.494,178,2.874,179,2.874,180,2.874,181,4.16,182,2.874,183,2.874,184,3.069,185,3.08,186,4.529,187,4.16,188,2.874,189,2.663,190,2.874,191,1.571,192,2.874,193,2.663,194,2.874,195,2.874,196,2.874,197,2.874,198,2.874,199,2.874,200,2.874,201,2.494,202,0.006,203,0.006,205,0.439,1854,3.586,1855,3.586,1856,3.586,1857,3.586]],["title/interfaces/MetricEntry.html",[169,0.227,1382,3.092]],["body/interfaces/MetricEntry.html",[3,0.265,4,0.324,5,0.218,6,0.188,8,0.203,11,0.596,16,0.01,23,0.281,24,1.031,55,0.431,56,0.976,58,1.204,59,1.283,66,3.3,77,0.218,125,0.173,126,0.524,135,0.685,136,0.249,169,0.42,171,0.642,172,0.363,202,0.008,203,0.008,205,0.728,212,2.384,215,2.45,248,1.821,286,1.66,301,1.895,312,2.089,386,2.177,398,3.536,523,2.998,559,4.136,560,3.966,564,3.966,565,4.54,566,4.785,567,4.465,612,3.81,650,3.536,720,3.274,1056,6.577,1134,3.668,1214,4.129,1382,5.855,1400,5.413,1482,5.842,1501,6.577,1503,6.577,1531,5.07,1601,5.842,1858,4.775,1859,7.29,1860,6.417,1861,7.29,1862,7.29,1863,7.29,1864,7.29,1865,7.29,1866,7.29,1867,5.07,1868,7.29,1869,7.29,1870,8.207,1871,7.29,1872,7.29,1873,7.29,1874,7.29,1875,7.29,1876,8.207]],["title/classes/MetricRegistration.html",[0,0.174,1877,3.301]],["body/classes/MetricRegistration.html",[0,0.223,1,1.67,2,0.492,3,0.085,4,0.141,5,0.07,6,0.15,8,0.274,11,0.734,12,0.685,16,0.01,17,1.134,18,1.098,21,2.493,23,0.283,24,0.448,25,1.596,26,2.388,27,2.083,28,1.081,29,0.833,55,0.379,56,0.788,57,1.224,59,0.833,60,0.625,62,1.029,72,1.276,77,0.307,78,1.058,86,0.479,87,0.372,89,0.65,93,2.562,105,2.217,121,2.589,125,0.21,126,0.167,133,2.588,135,0.947,136,0.252,137,0.866,138,0.769,140,0.799,147,1.046,154,1.323,161,0.957,170,0.542,171,0.671,172,0.435,173,0.955,176,2.737,184,0.957,202,0.003,203,0.003,208,1.063,212,1.035,225,3.263,226,1.882,227,0.401,230,0.923,232,1.035,233,0.715,236,2.369,237,2.348,242,2.457,245,0.696,276,0.857,286,1.433,288,0.759,312,1.931,314,2.552,315,2.498,323,1.124,324,2.485,326,0.833,329,1.323,330,1.08,331,1.185,332,0.923,333,0.923,334,1.413,339,0.957,354,2.388,364,1.262,366,1.507,376,2.229,377,2.12,396,2.02,400,1.393,409,4.081,418,2.55,419,1.525,504,0.957,533,3.024,545,0.759,633,1.249,634,0.759,664,1.129,685,4.191,694,0.957,775,1.592,819,0.833,1014,4.277,1015,1.035,1029,2.915,1054,0.891,1067,3.793,1085,2.825,1134,3.876,1227,3.016,1246,2.825,1289,2.536,1295,2.2,1313,1.323,1316,1.525,1317,2.536,1318,1.525,1319,1.525,1320,3.255,1321,1.525,1322,1.525,1323,1.525,1325,1.249,1326,1.035,1357,2.209,1359,1.249,1366,1.08,1483,1.795,1488,1.413,1494,1.413,1548,2.981,1619,1.525,1877,4.673,1878,2.948,1879,1.323,1880,2.785,1881,2.349,1882,2.349,1883,2.536,1884,5.29,1885,1.902,1886,3.164,1887,1.902,1888,4.422,1889,5.135,1890,3.722,1891,1.323,1892,1.525,1893,5.235,1894,3.901,1895,2.536,1896,1.675,1897,2.785,1898,1.675,1899,4.18,1900,6.711,1901,1.675,1902,1.675,1903,1.675,1904,1.675,1905,5.54,1906,1.675,1907,5.29,1908,1.675,1909,1.675,1910,1.675,1911,1.675,1912,1.675,1913,1.675,1914,1.675,1915,2.785,1916,2.785,1917,2.785,1918,2.785,1919,1.675,1920,2.785,1921,1.525,1922,1.675,1923,4.166,1924,2.785,1925,1.675,1926,4.166,1927,1.675,1928,1.675,1929,1.675,1930,1.525,1931,1.675,1932,1.675,1933,1.675,1934,2.785,1935,1.675,1936,1.675,1937,1.675,1938,1.675,1939,4.166,1940,1.675,1941,6.174,1942,6.11,1943,2.785,1944,1.675,1945,5.961,1946,2.785,1947,4.991,1948,4.991,1949,6.224,1950,2.785,1951,1.675,1952,2.785,1953,2.785,1954,1.675,1955,2.785,1956,2.785,1957,1.675,1958,2.785,1959,2.785,1960,1.675,1961,2.785,1962,4.991,1963,1.675,1964,1.675,1965,1.413,1966,1.413,1967,1.675,1968,2.785,1969,2.785,1970,1.675,1971,4.625,1972,2.785,1973,1.675,1974,2.785,1975,1.675,1976,1.675,1977,2.785,1978,1.675,1979,2.785,1980,1.675,1981,2.785,1982,1.675,1983,5.75,1984,1.675,1985,1.675,1986,5.29,1987,1.675,1988,1.675,1989,2.785,1990,2.785,1991,1.675,1992,2.785,1993,2.785,1994,1.675,1995,1.675,1996,1.675,1997,1.675,1998,4.625,1999,1.675,2000,1.675,2001,1.675,2002,1.675,2003,5.54,2004,4.991,2005,1.675,2006,1.675,2007,2.785,2008,1.675,2009,1.675,2010,2.785,2011,1.675,2012,1.675,2013,2.536,2014,1.525,2015,1.675,2016,3.575,2017,1.675,2018,1.675,2019,2.785,2020,1.675,2021,2.785,2022,1.525,2023,1.675,2024,1.675,2025,1.675,2026,2.785,2027,1.675,2028,1.675,2029,2.785,2030,2.785,2031,2.785,2032,2.785,2033,2.785,2034,2.785,2035,1.675,2036,2.785,2037,1.675,2038,1.675,2039,1.675,2040,1.675,2041,1.413,2042,1.675,2043,1.675,2044,1.675,2045,1.675,2046,1.675,2047,1.675,2048,1.675,2049,1.675,2050,1.675,2051,1.675,2052,1.675,2053,1.675,2054,1.675,2055,2.785,2056,1.675,2057,2.785,2058,1.675,2059,1.525,2060,1.675,2061,1.675]],["title/interfaces/MetricRegistryListener.html",[169,0.227,1888,2.918]],["body/interfaces/MetricRegistryListener.html",[3,0.273,4,0.33,5,0.225,6,0.252,8,0.253,11,0.752,16,0.01,18,1.077,23,0.29,34,1.527,55,0.39,60,1.143,72,1.246,77,0.225,86,1.872,87,1.451,89,0.561,125,0.216,126,0.541,135,0.854,136,0.311,137,0.811,169,0.424,172,0.37,202,0.008,203,0.008,205,0.751,226,2.021,315,2.377,364,3.309,377,2.348,634,2.451,649,4.335,926,5.516,1359,4.876,1400,5.516,1878,4.973,1888,5.574,1889,5.516,2059,5.953,2062,4.925,2063,6.539,2064,7.428,2065,7.428,2066,7.428,2067,6.539,2068,6.145,2069,6.539,2070,6.145]],["title/classes/MetricRegistryListenerRegistration.html",[0,0.174,1899,3.092]],["body/classes/MetricRegistryListenerRegistration.html",[0,0.223,1,1.674,2,0.493,3,0.085,4,0.141,5,0.07,6,0.129,8,0.274,11,0.733,12,0.686,16,0.01,17,1.136,18,1.097,21,2.495,23,0.284,25,1.597,26,2.39,27,2.084,28,1.08,29,0.834,34,0.652,55,0.364,56,0.789,57,1.226,59,0.834,60,0.488,62,1.029,72,1.276,77,0.307,78,1.059,86,0.481,87,0.373,89,0.65,93,2.465,105,1.906,121,2.591,125,0.21,126,0.168,133,2.591,135,0.947,136,0.252,137,0.866,138,0.77,140,0.8,147,1.046,154,1.327,161,0.96,170,0.543,171,0.671,172,0.435,173,0.957,176,2.738,184,0.96,202,0.003,203,0.003,208,1.066,212,0.624,225,3.265,226,1.835,227,0.669,230,0.925,232,1.038,233,1.192,236,2.37,237,2.349,242,2.369,245,0.697,276,0.858,286,1.434,288,0.761,312,1.932,314,2.554,315,2.505,323,1.126,324,2.486,326,0.834,329,1.327,330,1.082,331,1.188,332,0.925,333,0.925,334,1.416,339,0.96,354,2.39,364,1.265,366,1.509,376,2.23,377,2.244,396,2.022,400,1.395,409,4.083,418,2.553,419,1.527,504,0.96,533,3.028,545,0.761,633,1.252,634,0.761,664,1.132,685,4.194,694,0.96,775,1.595,819,0.836,1014,4.281,1015,1.038,1029,2.919,1054,0.893,1067,3.799,1085,2.83,1134,3.879,1227,3.022,1246,2.83,1289,2.541,1295,2.205,1313,1.327,1316,1.529,1317,2.541,1318,1.529,1319,1.529,1320,3.261,1321,1.529,1322,1.529,1323,1.529,1325,1.252,1326,1.038,1357,2.579,1359,1.252,1366,1.082,1483,1.799,1488,1.416,1494,1.416,1548,2.309,1619,1.529,1877,4.216,1878,2.534,1879,1.327,1880,1.679,1881,1.416,1882,1.416,1883,1.529,1884,4.173,1888,4.734,1889,5.446,1890,3.727,1891,1.327,1892,1.529,1893,5.241,1894,3.907,1895,3.261,1896,2.791,1897,4.998,1898,2.791,1899,4.548,1900,6.786,1901,1.679,1902,1.679,1903,1.679,1904,1.679,1905,5.546,1906,1.679,1907,5.297,1908,1.679,1909,1.679,1910,1.679,1911,1.679,1912,1.679,1913,1.679,1914,1.679,1915,2.791,1916,2.791,1917,2.791,1918,2.791,1919,1.679,1920,2.791,1921,1.529,1922,1.679,1923,4.173,1924,2.791,1925,1.679,1926,4.173,1927,1.679,1928,1.679,1929,1.679,1930,1.529,1931,1.679,1932,1.679,1933,1.679,1934,2.791,1935,1.679,1936,1.679,1937,1.679,1938,1.679,1939,4.173,1940,1.679,1941,6.178,1942,6.114,1943,2.791,1944,1.679,1945,5.965,1946,2.791,1947,4.998,1948,4.998,1949,6.229,1950,2.791,1951,1.679,1952,2.791,1953,2.791,1954,1.679,1955,2.791,1956,2.791,1957,1.679,1958,2.791,1959,2.791,1960,1.679,1961,2.791,1962,4.998,1963,1.679,1964,1.679,1965,1.416,1966,1.416,1967,1.679,1968,2.791,1969,2.791,1970,1.679,1971,4.632,1972,2.791,1973,1.679,1974,2.791,1975,1.679,1976,1.679,1977,2.791,1978,1.679,1979,2.791,1980,1.679,1981,2.791,1982,1.679,1983,5.756,1984,1.679,1985,1.679,1986,5.297,1987,1.679,1988,1.679,1989,2.791,1990,2.791,1991,1.679,1992,2.791,1993,2.791,1994,1.679,1995,1.679,1996,1.679,1997,1.679,1998,4.632,1999,1.679,2000,1.679,2001,1.679,2002,1.679,2003,5.546,2004,4.998,2005,1.679,2006,1.679,2007,2.791,2008,1.679,2009,1.679,2010,2.791,2011,1.679,2012,1.679,2013,2.541,2014,1.529,2015,1.679,2016,3.582,2017,1.679,2018,1.679,2019,2.791,2020,1.679,2021,2.791,2022,1.529,2023,1.679,2024,1.679,2025,1.679,2026,2.791,2027,1.679,2028,1.679,2029,2.791,2030,2.791,2031,2.791,2032,2.791,2033,2.791,2034,2.791,2035,1.679,2036,2.791,2037,1.679,2038,1.679,2039,1.679,2040,1.679,2041,1.416,2042,1.679,2043,1.679,2044,1.679,2045,1.679,2046,1.679,2047,1.679,2048,1.679,2049,1.679,2050,1.679,2051,1.679,2052,1.679,2053,1.679,2054,1.679,2055,2.791,2056,1.679,2057,2.791,2058,1.679,2059,1.529,2060,1.679,2061,1.679,2071,1.908,2072,1.908,2073,1.908]],["title/interfaces/MetricReporterOptions.html",[169,0.227,557,2.418]],["body/interfaces/MetricReporterOptions.html",[0,0.286,3,0.194,4,0.265,5,0.16,6,0.138,8,0.149,11,0.623,12,1.576,16,0.01,17,2.016,19,1.775,23,0.205,24,0.842,28,1.047,29,1.541,55,0.464,56,0.812,57,1.127,62,0.804,68,1.845,69,2.449,70,2.449,77,0.28,87,1.602,89,0.512,125,0.222,126,0.384,135,0.685,136,0.343,137,0.663,138,1.101,140,0.441,148,2.449,169,0.373,171,0.384,172,0.445,202,0.007,203,0.007,205,0.533,227,1.43,301,1.467,309,3.533,310,3.273,326,1.047,328,1.973,340,2.495,346,1.933,354,2.655,357,2.588,358,2.68,366,1.388,369,2.586,370,1.316,373,1.895,376,2.454,383,1.548,386,2.088,492,2.526,523,2.193,524,2.715,525,1.973,526,3.964,527,5.068,528,3.847,529,4.223,530,4.716,531,3.708,533,2.193,534,2.715,535,3.031,537,2.408,538,3.808,539,2.954,540,2.634,541,2.715,542,3.98,544,2.995,545,3.417,546,2.608,547,3.666,548,2.342,549,4.783,550,3.236,551,3.031,552,3.236,553,3.708,554,2.861,555,3.236,556,2.608,557,4.384,558,3.533,559,3.378,560,3.964,561,4.141,562,3.378,563,2.995,564,3.238,565,3.708,566,3.907,567,3.238,568,2.001,569,3.031,570,3.236,571,2.715,572,3.236,573,3.236,574,2.788,575,3.236,576,3.236,577,3.236,578,3.236,579,4.288]],["title/interfaces/MetricSet.html",[169,0.227,1890,2.918]],["body/interfaces/MetricSet.html",[3,0.282,4,0.337,5,0.233,6,0.256,8,0.216,11,0.743,16,0.01,23,0.299,34,1.557,60,1.165,77,0.307,89,0.634,105,3.546,121,2.132,125,0.22,126,0.558,135,0.871,136,0.317,169,0.387,170,1.387,171,0.738,172,0.377,176,2.253,202,0.008,203,0.008,205,0.776,208,2.545,226,2.06,230,3.673,233,2.847,533,3.81,634,2.531,683,4.494,685,3.451,1134,4.374,1878,5.041,1890,5.623,1941,5.084,1942,5.084,1965,6.225,1966,6.361,2074,5.084,2075,6.344,2076,7.572,2077,6.344]],["title/interfaces/MetricSetReportContext.html",[169,0.227,316,1.721]],["body/interfaces/MetricSetReportContext.html",[3,0.267,4,0.325,5,0.22,6,0.189,8,0.205,11,0.701,16,0.01,17,1.436,23,0.283,24,1.035,29,1.39,55,0.478,62,0.868,77,0.22,125,0.239,126,0.527,135,0.689,136,0.251,169,0.404,172,0.42,202,0.008,203,0.008,205,0.733,224,2.527,257,2.459,301,1.583,315,2.416,316,2.833,317,3.265,319,3.085,326,1.543,373,2.829,375,3.489,376,2.357,377,2.554,386,1.94,400,2.021,523,3.015,716,5.089,720,2.919,769,5.252,1340,3.401,1384,4.687,1483,4.667,1548,4.152,2078,4.45,2079,7.316,2080,5.863]],["title/classes/MonotoneCounter.html",[0,0.174,236,1.342]],["body/classes/MonotoneCounter.html",[0,0.26,1,3.711,2,1.075,3,0.185,4,0.256,5,0.152,6,0.245,8,0.292,11,0.673,12,1.545,16,0.01,17,0.996,18,1.102,19,1.431,20,1.223,21,2.336,23,0.196,24,0.815,25,1.325,26,2.051,27,2.006,28,1.122,29,1.014,30,3.03,31,2.534,32,3.27,33,3.27,34,1.185,35,4.008,36,4.342,37,4.12,38,4.008,39,3.926,40,4.342,41,4.008,42,3.598,43,4.008,44,3.783,45,4.008,46,4.008,47,3.783,48,4.008,49,4.008,50,3.783,51,3.783,52,3.328,53,4.12,55,0.471,56,0.954,57,1.939,58,1.218,59,1.4,60,1.388,62,0.921,63,2.729,64,4.12,65,1.947,66,1.882,67,1.882,68,1.131,69,1.397,70,1.397,71,1.191,72,1.286,75,2.729,77,0.309,78,0.748,80,2.359,83,2.729,84,2.468,86,2.203,87,1.714,89,0.642,91,2.468,93,2.674,96,2.468,99,2.468,101,2.468,103,2.468,105,1.947,106,2.729,108,2.59,110,2.468,112,2.729,114,2.468,116,2.262,125,0.193,126,0.366,136,0.241,137,0.647,170,1.133,171,0.366,172,0.33,173,1.255,184,2.092,185,2.468,202,0.006,203,0.006,210,2.882,224,2.681,228,3.885,236,2.449,239,3.457,245,0.988,276,1.216,295,4.279,359,1.36,396,1.937,580,3.087,585,5.823,586,5.823,587,3.087,589,4.279,590,6.65,592,4.279,593,3.332,594,3.332,595,3.332,596,3.332,597,3.332,598,3.332,599,3.332,603,5.073,604,4.619,605,3.66,607,5.073,611,3.66,612,2.173,613,2.359,614,2.017,615,3.332,616,3.332,617,3.332,618,3.332,619,3.332,620,3.332,621,3.332,622,3.332,623,3.332,624,3.332,625,3.332,626,3.332,627,3.332,628,3.332,629,3.332,630,3.332,631,3.332,632,3.332,633,2.729,634,1.659,635,4.619,636,5.073,637,3.783,2081,5.763,2082,4.158,2083,4.158,2084,4.158]],["title/interfaces/MovingAverage.html",[169,0.227,1157,3.301]],["body/interfaces/MovingAverage.html",[0,0.232,3,0.192,4,0.263,5,0.158,6,0.24,8,0.147,12,1.28,16,0.01,18,0.723,23,0.204,25,1.714,26,2.434,28,1.046,34,1.216,55,0.43,56,1.013,58,1.197,59,1.041,60,1.116,62,0.512,67,3.555,77,0.158,86,1.491,87,1.155,89,0.641,125,0.172,126,0.38,134,1.375,136,0.304,137,0.786,138,0.701,140,0.598,147,0.931,169,0.302,171,0.708,172,0.436,202,0.006,203,0.006,205,0.528,212,1.935,215,2.702,216,2.495,219,1.216,224,2.507,233,2.729,245,0.74,248,0.958,275,3.461,276,0.911,285,3.685,286,1.891,288,3.033,292,4.741,311,1.834,318,2.101,396,1.988,419,1.695,497,4.114,499,2.349,506,2.771,520,3.003,643,2.678,785,3.766,794,3.685,995,4.741,1020,4.735,1027,4.693,1029,3.273,1150,6.465,1151,5.646,1152,3.207,1153,3.801,1154,5.207,1155,4.915,1156,7.528,1157,6.167,1158,3.801,1159,3.801,1160,3.801,1161,3.801,1162,3.801,1163,3.801,1164,6.389,1165,5.83,1166,3.801,1167,6.693,1168,5.207,1169,3.801,1170,7.077,1171,3.801,1172,5.111,1175,5.207,1176,6.912,1177,6.293,1180,3.218,1185,4.429,1188,3.527,1191,3.801,1192,2.349,1194,5.94,1198,3.461,1199,3.801,1200,3.801,1201,3.092,1202,3.801,1203,3.801,1204,3.801,1205,3.003,1206,3.801,1207,3.801,1208,3.801,1209,3.801,1211,3.883,1212,3.883,1213,5.207,1214,2.976,1215,4.114,1216,5.94,1217,5.207,1218,5.207,1219,3.801,1220,3.801,1221,6.912,1222,3.801,1223,5.94,2085,4.318,2086,4.318,2087,4.318,2088,4.318]],["title/interfaces/OverallReportContext.html",[169,0.227,319,1.579]],["body/interfaces/OverallReportContext.html",[3,0.307,4,0.354,5,0.253,6,0.251,8,0.235,16,0.01,60,1.061,72,1.125,77,0.253,125,0.201,126,0.607,136,0.289,169,0.428,191,3.484,202,0.009,203,0.009,205,0.843,257,2.672,273,4.296,301,1.721,319,2.825,386,2.109,650,3.857,2078,5.121,2089,6.373,2090,6.897]],["title/classes/Percentiles.html",[0,0.174,2091,3.092]],["body/classes/Percentiles.html",[0,0.323,2,1.553,3,0.267,4,0.326,5,0.22,6,0.26,8,0.205,11,0.599,16,0.01,18,0.967,20,2.155,23,0.283,24,1.037,26,2.552,28,1.006,29,1.391,55,0.416,56,0.969,57,1.894,58,1.008,59,1.289,60,1.216,62,1.018,72,0.85,77,0.22,78,0.78,86,1.514,87,1.173,125,0.175,136,0.307,137,0.587,172,0.365,202,0.008,203,0.008,209,4.871,231,2.72,245,1.256,248,1.626,256,3.432,276,1.545,277,5.289,280,6.45,282,6.96,285,4.924,286,1.668,299,5.441,386,1.944,533,3.687,548,2.076,694,3.687,1185,4.81,1328,3.944,1390,5.096,2091,6.044,2092,4.815,2093,7.327,2094,7.906,2095,7.327,2096,5.871,2097,7.906,2098,5.871,2099,7.906,2100,7.906,2101,7.906,2102,6.008,2103,5.873,2104,7.327,2105,6.008,2106,6.008,2107,6.008,2108,6.008,2109,6.008,2110,6.008]],["title/interfaces/PrometheusClusterOptions.html",[169,0.227,989,3.092]],["body/interfaces/PrometheusClusterOptions.html",[3,0.289,4,0.342,5,0.238,6,0.205,8,0.222,11,0.69,16,0.01,23,0.306,24,1.086,29,1.143,55,0.404,56,0.942,68,2.09,69,2.581,70,2.581,77,0.238,125,0.224,135,0.747,136,0.321,169,0.393,170,1.477,172,0.324,173,2.318,202,0.008,203,0.008,205,0.794,214,4.596,301,1.828,325,1.556,326,1.143,339,3.864,358,2.639,366,2.068,542,3.829,548,2.244,560,4.596,989,5.876,990,7.437,997,6.76,1122,4.558,2111,5.206]],["title/interfaces/PrometheusFields.html",[169,0.227,2112,3.301]],["body/interfaces/PrometheusFields.html",[0,0.14,3,0.098,4,0.159,5,0.081,6,0.113,8,0.242,11,0.687,12,0.476,14,2.481,16,0.01,18,0.885,19,1.647,20,1.323,21,1.167,22,1.858,25,1.725,26,2.417,27,1.681,28,0.842,29,1.34,30,2.194,31,2.603,55,0.448,56,0.789,58,1.124,59,1.245,60,0.339,62,0.533,68,1.546,69,1.199,70,0.74,71,0.631,72,1.262,77,0.131,78,0.894,89,0.614,93,2.481,105,1.031,119,2.481,125,0.206,131,1.372,132,2.969,135,0.699,136,0.149,137,0.835,138,0.579,140,0.889,143,0.934,147,1.001,148,1.738,151,1.136,152,1.445,156,1.445,159,1.445,165,1.25,168,1.307,169,0.327,170,0.611,171,0.455,172,0.431,174,2.858,176,1.267,191,1.97,202,0.006,203,0.004,204,1.108,205,0.269,209,1.25,210,1.837,211,0.965,218,1.198,219,0.453,221,1.307,225,2.341,226,1.224,227,1.406,230,1.731,231,0.997,236,1.077,237,1.835,240,1.198,245,0.377,256,2.106,257,1.511,258,1.068,259,1.865,260,1.151,265,1.307,269,1.307,273,1.372,276,0.464,286,1.024,288,1.423,300,2.554,301,1.316,311,1.885,312,1.911,314,1.432,315,1.482,316,2.355,317,2.479,319,1.837,320,0.805,323,1.267,324,1.394,325,1.077,326,1.127,332,1.068,342,1.514,346,1.507,349,1.849,350,1.849,351,1.068,354,1.106,357,1.267,358,1.715,359,0.72,366,1.646,368,1.908,369,2.354,370,2.266,371,0.934,372,1.031,373,2.039,374,1.031,375,2.194,376,1.835,377,1.323,378,2.212,379,1.372,381,2.35,382,1.151,386,0.946,393,1.198,396,1.511,397,2.66,398,3.235,399,0.934,400,0.877,403,1.068,405,2.342,409,1.108,416,1.445,418,2.41,419,1.42,420,0.934,421,1.563,431,1.108,432,0.965,437,1.108,438,1.068,439,0.631,464,1.108,465,1.068,478,1.108,479,0.965,488,2.024,492,0.934,504,1.795,521,1.198,525,0.997,526,1.198,528,1.25,529,1.372,531,1.372,534,2.222,537,0.782,538,2.969,539,1.741,540,2.484,541,1.372,542,2.848,545,2.824,546,0.965,547,1.108,548,1.553,551,1.342,556,2.265,568,0.74,574,2.126,614,1.731,649,1.151,650,1.068,655,1.198,657,1.372,658,1.372,659,1.372,666,1.307,685,1.198,698,3.22,712,1.372,717,1.108,720,1.794,721,1.372,722,1.372,728,2.801,738,2.024,739,1.372,750,2.222,751,3.224,752,1.532,753,2.222,756,1.307,761,1.532,785,1.671,786,1.532,793,1.532,795,1.615,819,1.563,820,1.532,843,1.532,860,4.454,862,1.532,930,2.649,940,2.649,954,2.481,985,3.128,988,5.374,1054,1.031,1122,3.609,1134,1.108,1138,1.765,1188,1.151,1205,1.532,1228,1.108,1239,3.604,1266,1.765,1285,1.445,1287,2.859,1326,1.941,1338,1.307,1352,1.198,1366,1.25,1376,1.445,1390,2.481,1391,2.342,1392,2.117,1393,2.649,1405,1.635,1413,3.372,1433,1.198,1512,1.635,1513,1.635,1514,1.635,1515,1.635,1517,1.532,1530,1.445,1548,1.25,1707,1.635,1709,3.596,1712,1.765,1713,1.765,1714,3.951,1716,2.801,1717,2.859,1765,1.372,1780,1.532,1793,1.532,1799,1.532,1805,1.765,1810,2.342,1894,5.572,2091,3.596,2103,4.144,2112,4.755,2113,1.532,2114,2.202,2115,1.938,2116,1.938,2117,4.551,2118,1.635,2119,1.635,2120,1.307,2121,3.128,2122,1.765,2123,3.958,2124,6.014,2125,3.839,2126,2.649,2127,5.256,2128,5.637,2129,2.859,2130,1.938,2131,1.938,2132,2.859,2133,1.938,2134,1.938,2135,1.938,2136,3.14,2137,1.938,2138,1.938,2139,1.938,2140,4.551,2141,3.14,2142,3.14,2143,3.14,2144,1.938,2145,3.14,2146,3.14,2147,3.14,2148,3.14,2149,3.14,2150,3.14,2151,1.938,2152,5.353,2153,3.14,2154,3.14,2155,3.14,2156,3.14,2157,3.958,2158,1.938,2159,1.938,2160,1.938,2161,1.938,2162,1.938,2163,1.938,2164,1.938,2165,1.938,2166,1.938,2167,3.14,2168,1.938,2169,1.765,2170,1.938,2171,2.649,2172,2.649,2173,2.649,2174,1.938,2175,1.938,2176,1.938,2177,1.938,2178,3.14,2179,1.938,2180,1.938,2181,3.14,2182,1.938,2183,1.938,2184,3.14,2185,1.938,2186,3.14,2187,1.938,2188,1.938,2189,1.938,2190,3.14,2191,1.938,2192,1.938,2193,1.938,2194,1.938,2195,1.765,2196,1.938,2197,1.938,2198,1.938,2199,1.765,2200,1.938,2201,1.938,2202,1.938,2203,3.14,2204,1.938,2205,1.938,2206,1.765,2207,1.938,2208,1.938,2209,1.938,2210,1.938,2211,1.938,2212,1.938,2213,1.938,2214,1.938,2215,1.938,2216,1.938,2217,3.14,2218,1.938,2219,1.938,2220,1.938,2221,1.938,2222,1.765,2223,1.938,2224,1.938,2225,1.938,2226,1.938,2227,1.938,2228,1.765,2229,3.339,2230,5.87,2231,1.938,2232,1.938,2233,1.938,2234,1.938,2235,1.938,2236,1.938,2237,3.958,2238,1.938,2239,1.938,2240,1.938,2241,3.14,2242,1.938,2243,3.14,2244,1.938,2245,1.938,2246,1.938,2247,3.958,2248,3.958,2249,3.958,2250,3.958,2251,3.958,2252,1.938,2253,1.938,2254,1.938,2255,1.938,2256,4.144,2257,3.958,2258,1.938,2259,1.938,2260,1.938,2261,1.938,2262,1.938,2263,1.938,2264,1.938,2265,1.938,2266,4.551,2267,1.938,2268,1.938,2269,1.938,2270,1.938,2271,3.604,2272,1.938,2273,1.635,2274,1.938,2275,1.938,2276,1.938,2277,1.938,2278,1.938,2279,1.938,2280,1.938,2281,5.001,2282,1.938,2283,1.938,2284,1.938,2285,1.938,2286,1.938,2287,1.938,2288,1.938,2289,4.551,2290,1.938,2291,1.938,2292,3.14,2293,1.938,2294,1.938,2295,1.938,2296,3.14,2297,3.14,2298,1.938,2299,1.938,2300,1.938,2301,1.938,2302,1.938,2303,1.938,2304,1.938,2305,1.938,2306,1.938,2307,1.938,2308,1.938,2309,1.938,2310,1.532,2311,1.938,2312,1.938,2313,1.938,2314,1.938,2315,1.938,2316,1.938,2317,1.938,2318,1.938,2319,1.938]],["title/interfaces/PrometheusMetricResult.html",[169,0.227,2127,3.301]],["body/interfaces/PrometheusMetricResult.html",[0,0.139,3,0.097,4,0.157,5,0.08,6,0.069,8,0.241,11,0.689,12,0.472,14,2.463,16,0.01,18,0.9,19,1.644,20,1.314,21,1.158,22,1.849,23,0.103,24,0.501,25,1.723,26,2.412,27,1.675,28,0.84,29,1.337,30,2.182,31,2.599,55,0.455,56,0.765,58,1.129,59,1.242,62,0.53,68,1.538,69,1.19,70,0.733,71,0.625,72,1.259,77,0.13,78,0.891,89,0.613,93,2.474,105,1.022,119,2.463,125,0.205,131,1.359,132,2.955,135,0.696,136,0.148,137,0.834,138,0.575,140,0.888,143,0.926,147,1,148,1.728,151,1.127,152,1.432,156,1.432,159,1.432,165,1.238,168,1.295,169,0.326,170,0.607,171,0.453,172,0.43,174,2.979,176,1.258,191,1.551,202,0.006,203,0.004,204,1.098,205,0.267,209,1.238,210,1.826,211,0.956,218,1.187,219,0.449,221,1.295,225,2.328,226,1.216,227,1.401,230,2.168,231,0.988,236,1.069,237,1.828,240,1.926,245,0.374,256,2.093,257,1.502,258,1.058,259,1.851,260,1.14,265,1.295,269,1.295,276,0.46,286,1.017,288,1.412,300,2.815,301,1.38,311,1.877,312,1.904,314,1.423,315,1.473,316,2.345,317,2.47,319,1.826,320,0.797,323,1.258,324,1.385,325,1.07,326,1.169,332,1.058,342,1.502,346,1.606,349,1.838,350,1.838,351,1.058,354,1.098,357,1.258,358,1.707,359,0.714,366,1.637,368,1.896,369,2.349,370,2.26,371,0.926,372,1.022,373,2.031,374,1.022,375,2.182,376,1.828,377,1.314,378,2.203,379,1.359,381,2.335,382,1.14,386,0.939,393,1.187,396,1.502,397,2.651,398,3.223,399,0.926,400,0.87,403,1.058,405,2.324,409,1.098,416,1.432,418,2.399,419,1.414,420,0.926,421,1.551,431,1.098,432,0.956,437,1.098,438,1.058,439,0.625,464,1.098,465,1.058,478,1.098,479,0.956,488,2.009,492,0.926,504,1.781,521,1.187,525,0.988,526,1.187,528,1.238,529,1.359,531,1.359,534,2.205,537,0.775,538,2.955,539,1.73,540,2.479,541,1.359,542,2.836,545,2.937,546,1.551,547,1.098,548,1.544,551,1.331,556,2.253,568,0.733,574,2.115,614,2.168,649,1.14,650,1.058,655,1.926,657,1.359,658,1.359,659,1.359,666,1.295,685,1.187,698,3.203,712,1.359,717,1.098,720,1.412,721,1.359,722,1.359,728,2.783,738,2.009,739,1.359,750,2.205,751,3.436,752,1.517,753,2.205,756,1.295,761,1.517,785,1.658,786,1.517,793,1.517,795,1.603,819,1.551,820,1.517,843,1.517,860,4.436,862,1.517,930,2.629,940,2.629,954,2.463,985,3.108,988,5.368,1054,1.022,1122,3.594,1134,1.098,1138,1.748,1188,1.14,1205,1.517,1228,1.098,1239,3.581,1266,1.748,1285,1.432,1287,2.838,1326,1.926,1338,1.295,1352,1.187,1366,1.238,1376,1.432,1390,2.463,1391,2.324,1392,2.101,1393,2.629,1405,1.62,1413,3.355,1433,1.187,1512,1.62,1513,1.62,1514,1.62,1515,1.62,1517,1.517,1530,1.432,1548,1.238,1707,1.62,1709,3.576,1712,1.748,1713,1.748,1714,3.932,1716,2.783,1717,2.838,1765,1.359,1780,1.517,1793,1.517,1799,1.517,1805,1.748,1810,2.324,1894,5.559,2091,3.576,2103,4.121,2112,4.934,2113,1.517,2115,1.92,2116,1.92,2117,4.526,2118,1.62,2119,1.62,2120,1.295,2121,3.108,2122,1.748,2123,3.944,2124,6.166,2125,3.818,2126,2.629,2127,5.361,2128,6.212,2129,2.838,2130,1.92,2131,1.92,2132,2.838,2133,1.92,2134,1.92,2135,1.92,2136,3.117,2137,1.92,2138,1.92,2139,1.92,2140,4.526,2141,3.117,2142,3.117,2143,3.117,2144,1.92,2145,3.117,2146,3.117,2147,3.117,2148,3.117,2149,3.117,2150,3.117,2151,1.92,2152,5.33,2153,3.117,2154,3.117,2155,3.117,2156,3.117,2157,3.933,2158,1.92,2159,1.92,2160,1.92,2161,1.92,2162,1.92,2163,1.92,2164,1.92,2165,1.92,2166,1.92,2167,3.117,2168,1.92,2169,1.748,2170,1.92,2171,2.629,2172,2.629,2173,2.629,2174,1.92,2175,1.92,2176,1.92,2177,1.92,2178,3.117,2179,1.92,2180,1.92,2181,3.117,2182,1.92,2183,1.92,2184,3.117,2185,1.92,2186,3.117,2187,1.92,2188,1.92,2189,1.92,2190,3.117,2191,1.92,2192,1.92,2193,1.92,2194,1.92,2195,1.748,2196,1.92,2197,1.92,2198,1.92,2199,1.748,2200,1.92,2201,1.92,2202,1.92,2203,3.117,2204,1.92,2205,1.92,2206,1.748,2207,1.92,2208,1.92,2209,1.92,2210,1.92,2211,1.92,2212,1.92,2213,1.92,2214,1.92,2215,1.92,2216,1.92,2217,3.117,2218,1.92,2219,1.92,2220,1.92,2221,1.92,2222,1.748,2223,1.92,2224,1.92,2225,1.92,2226,1.92,2227,1.92,2228,1.748,2229,3.318,2230,5.849,2231,1.92,2232,1.92,2233,1.92,2234,1.92,2235,1.92,2236,1.92,2237,3.933,2238,1.92,2239,1.92,2240,1.92,2241,3.117,2242,1.92,2243,3.117,2244,1.92,2245,1.92,2246,1.92,2247,3.933,2248,3.933,2249,3.933,2250,3.933,2251,3.933,2252,1.92,2253,1.92,2254,1.92,2255,1.92,2256,4.121,2257,3.933,2258,1.92,2259,1.92,2260,1.92,2261,1.92,2262,1.92,2263,1.92,2264,1.92,2265,1.92,2266,4.526,2267,1.92,2268,1.92,2269,1.92,2270,1.92,2271,3.581,2272,1.92,2273,1.62,2274,1.92,2275,1.92,2276,1.92,2277,1.92,2278,1.92,2279,1.92,2280,1.92,2281,4.977,2282,1.92,2283,1.92,2284,1.92,2285,1.92,2286,1.92,2287,1.92,2288,1.92,2289,4.526,2290,1.92,2291,1.92,2292,3.117,2293,1.92,2294,1.92,2295,1.92,2296,3.117,2297,3.117,2298,1.92,2299,1.92,2300,1.92,2301,1.92,2302,1.92,2303,1.92,2304,1.92,2305,1.92,2306,1.92,2307,1.92,2308,1.92,2309,1.92,2310,1.517,2311,1.92,2312,1.92,2313,1.92,2314,1.92,2315,1.92,2316,1.92,2317,1.92,2318,1.92,2319,1.92]],["title/interfaces/PrometheusReporterOptions.html",[169,0.227,2121,3.092]],["body/interfaces/PrometheusReporterOptions.html",[3,0.263,4,0.323,5,0.217,6,0.187,8,0.202,11,0.593,16,0.01,23,0.279,24,1.027,29,1.381,55,0.47,77,0.217,87,1.732,125,0.229,135,0.68,136,0.304,169,0.419,170,1.243,172,0.419,202,0.008,203,0.008,205,0.723,226,1.975,227,1.53,301,1.57,313,4.056,325,1.416,326,1.04,340,2.373,342,3.473,344,5.047,345,5.815,358,2.471,521,3.947,545,3.57,546,3.746,547,3.651,548,2.712,557,4.27,568,2.438,712,4.519,795,3.285,987,5.047,988,4.519,989,5.947,1860,6.387,2121,6.083,2126,5.388,2171,6.078,2172,6.078,2173,6.078,2271,5.815,2273,5.388,2320,4.739,2321,7.256,2322,6.387,2323,7.256]],["title/interfaces/PushgatewayReporterOptions.html",[169,0.227,2324,3.563]],["body/interfaces/PushgatewayReporterOptions.html",[0,0.229,3,0.189,4,0.26,5,0.155,6,0.134,8,0.145,11,0.346,16,0.01,19,1.264,23,0.2,24,0.826,27,1.684,28,0.817,29,1.329,30,3.055,31,2.778,34,0.871,55,0.456,56,0.803,57,1.096,62,0.981,72,1.249,77,0.214,78,0.867,87,1.665,89,0.441,125,0.21,135,0.898,136,0.301,137,0.653,140,0.764,147,0.693,151,1.349,169,0.368,170,1.234,172,0.437,176,2.373,202,0.007,203,0.006,205,0.518,213,1.641,216,1.673,219,0.871,226,1.589,236,1.763,237,1.915,245,0.726,276,0.894,286,0.965,301,0.917,311,2.232,312,1.915,313,3.747,314,2.127,315,1.673,316,3.023,317,2.261,318,2.074,319,2.074,320,1.548,321,2.644,322,2.927,323,2.074,324,2.071,325,1.015,326,1.329,340,1.386,341,4.982,342,3.458,346,2.22,349,2.748,350,1.743,351,2.056,352,2.558,353,1.856,354,1.81,355,2.478,356,1.856,357,2.074,358,1.763,359,1.386,362,2.305,364,3.114,368,2.478,369,2.357,370,2.174,371,1.798,373,1.859,376,1.214,377,1.246,378,2.017,380,2.947,381,2.215,382,2.215,383,1.505,397,3.251,399,1.798,400,1.041,419,0.99,420,1.798,431,2.132,437,2.132,464,2.132,478,2.132,540,1.81,547,2.132,548,2.017,556,1.856,579,3.052,698,3.637,713,2.639,756,2.515,819,1.856,941,3.147,987,4.062,988,5.076,1054,1.985,1122,3.466,1313,2.947,1352,3.917,1370,3.396,1725,2.515,1765,2.639,1921,5.355,2123,3.466,2129,4.68,2132,3.396,2228,3.396,2324,6.709,2325,3.396,2326,6.993,2327,7.174,2328,6.629,2329,5.84,2330,5.84,2331,5.84,2332,6.278,2333,5.84,2334,3.833,2335,5.141,2336,5.84,2337,4.238,2338,4.238,2339,3.73,2340,5.84,2341,7.999,2342,3.73,2343,4.238,2344,3.73,2345,4.238,2346,4.238,2347,6.872,2348,4.238,2349,5.84,2350,3.73,2351,5.84,2352,3.396,2353,4.238,2354,4.238,2355,5.84,2356,4.238,2357,4.238,2358,4.238,2359,4.238,2360,4.238,2361,4.238,2362,4.238,2363,3.73,2364,4.238,2365,4.238,2366,4.238,2367,4.238]],["title/interfaces/ReportMessageReceiver.html",[169,0.227,549,2.638]],["body/interfaces/ReportMessageReceiver.html",[3,0.282,4,0.337,5,0.233,6,0.239,8,0.259,16,0.01,18,0.776,23,0.299,30,3.214,34,1.557,55,0.426,60,0.977,72,1.186,77,0.233,86,1.6,87,1.24,89,0.573,125,0.221,126,0.559,136,0.317,137,0.741,138,1.031,169,0.429,171,0.667,172,0.316,202,0.008,203,0.008,205,0.776,311,2.599,364,2.533,419,1.769,540,2.778,542,4.072,549,4.977,551,2.388,751,4.299,959,6.456,1004,6.669,1806,6.669,2169,6.071,2347,6.669,2352,6.071,2368,6.071,2369,5.089,2370,7.576,2371,6.669,2372,7.576,2373,6.35,2374,6.35,2375,6.35,2376,7.576]],["title/interfaces/ReportingResult.html",[169,0.227,320,1.624]],["body/interfaces/ReportingResult.html",[3,0.292,4,0.344,5,0.241,6,0.207,8,0.224,11,0.723,16,0.01,22,2.146,23,0.309,24,1.093,29,1.359,55,0.446,77,0.241,93,2.849,125,0.225,126,0.578,136,0.275,169,0.42,172,0.385,202,0.009,203,0.008,205,0.802,219,1.588,220,4.202,257,2.596,300,3.554,320,3.097,386,2.248,634,2.618,1483,4.81,2377,5.26,2378,5.26,2379,7.725]],["title/interfaces/Reservoir.html",[169,0.227,1014,2.638]],["body/interfaces/Reservoir.html",[0,0.274,3,0.247,4,0.311,5,0.204,6,0.253,8,0.19,12,1.511,16,0.01,18,0.68,23,0.262,25,1.605,28,0.934,34,1.436,55,0.401,56,1.013,58,1.199,60,1.174,62,0.659,77,0.204,78,0.991,86,1.401,87,1.085,89,0.646,125,0.203,126,0.489,136,0.335,137,0.746,147,0.659,169,0.357,171,0.672,172,0.431,202,0.008,203,0.008,205,0.68,208,2.347,219,1.143,233,2.626,245,1.308,248,1.936,400,1.366,419,1.631,439,2.532,643,2.516,775,2.797,924,4.857,1011,6.012,1012,3.866,1013,3.648,1014,5.342,1015,4.489,1016,5.31,1017,5.596,1018,6.119,1019,3.865,1020,4.349,1021,4.455,1023,5.669,1027,5.31,1029,3.704,1030,4.455,1031,4.455,1032,4.455,1033,3.648,1034,3.024,1035,4.455,1036,4.583,2380,5.558,2381,5.558,2382,5.558]],["title/interfaces/Sampling.html",[169,0.227,1188,2.324]],["body/interfaces/Sampling.html",[2,1.888,3,0.266,4,0.325,5,0.219,6,0.231,8,0.204,11,0.716,16,0.01,23,0.282,34,1.501,60,0.919,77,0.219,78,0.775,89,0.637,120,3.003,121,2.007,125,0.213,126,0.526,133,2.456,134,1.902,135,0.945,136,0.367,137,0.714,138,1.281,140,0.604,141,3.249,143,2.534,147,0.974,148,2.007,150,3.005,151,1.902,169,0.438,171,0.694,172,0.364,202,0.008,203,0.008,205,0.73,208,2.007,238,3.249,248,1.823,439,2.577,1034,3.249,1054,3.419,1188,4.642,1247,4.475,1338,4.875,2120,5.297,2310,4.154,2383,4.154,2384,5.973,2385,4.154,2386,5.851,2387,6.427,2388,5.258,2389,5.258,2390,5.258]],["title/interfaces/ScheduledMetricReporterOptions.html",[169,0.227,322,1.947]],["body/interfaces/ScheduledMetricReporterOptions.html",[0,0.295,3,0.24,4,0.305,5,0.198,6,0.17,8,0.184,9,3.447,10,3.2,11,0.615,16,0.01,23,0.254,24,0.969,25,1.373,28,0.921,29,1.325,55,0.459,56,0.931,62,0.813,71,1.545,72,0.969,77,0.198,87,1.632,89,0.518,125,0.231,126,0.475,135,0.911,136,0.342,137,0.67,138,1.357,140,0.545,147,0.813,169,0.35,170,1.357,172,0.423,176,1.915,202,0.008,203,0.008,205,0.659,215,2.662,216,2.52,219,1.109,227,1.445,245,0.924,301,1.167,318,2.433,321,3.927,322,3.661,324,2.124,326,0.949,340,2.591,346,2.101,349,3.096,350,2.218,352,3.47,355,3.783,369,2.469,370,2.068,383,1.915,384,5.49,386,2.252,390,4.004,392,3.751,393,2.933,419,1.758,556,3.001,557,4.309,571,3.359,716,4.764,717,2.713,1165,6.441,1172,4.853,1345,3.06,1379,3.359,1398,5.49,1403,4.322,1525,3.751,1749,4.004,2199,4.322,2322,4.747,2391,4.004,2392,5.392,2393,6.627,2394,5.392,2395,5.392,2396,5.392,2397,6.03,2398,5.392,2399,5.392]],["title/interfaces/Sender.html",[169,0.227,1522,2.638]],["body/interfaces/Sender.html",[0,0.181,3,0.136,4,0.206,5,0.113,6,0.196,8,0.105,11,0.646,16,0.01,18,0.855,19,1.711,20,0.902,23,0.145,25,1.4,27,1.828,28,0.813,29,0.814,31,2.606,34,0.951,55,0.434,56,0.515,58,1.114,59,1.23,60,0.856,62,0.906,68,1.258,71,1.595,72,1.158,77,0.17,78,0.863,86,0.773,87,0.599,89,0.633,93,2.657,125,0.135,126,0.27,134,0.977,135,0.859,136,0.304,137,0.836,140,0.884,147,1.014,151,1.472,155,2.516,161,2.8,169,0.371,170,1.062,171,0.407,172,0.424,173,0.926,174,3.103,176,1.09,202,0.007,203,0.005,205,0.375,213,1.188,216,1.595,219,1.144,226,0.835,227,0.975,236,1.871,237,2.079,245,0.526,248,1.026,252,1.604,276,0.647,286,0.698,300,1.224,301,1.204,302,4.684,308,1.911,310,1.845,311,2.314,312,2.189,313,3.703,314,2.309,315,1.776,316,3.062,317,2.155,318,1.643,319,1.977,320,1.121,321,2.805,322,2.438,323,1.643,324,2.249,325,0.735,326,1.17,327,2.327,340,1.003,342,2.965,346,1.227,348,1.741,349,2.289,350,1.262,351,1.488,352,2.438,353,1.344,354,1.434,355,1.962,356,1.344,357,1.643,358,1.396,359,1.513,360,3.773,361,1.741,362,4.061,363,2.014,364,1.224,365,1.224,368,1.962,369,2.511,370,1.871,371,1.302,372,1.437,373,2.432,374,2.166,375,1.302,376,2.365,377,1.637,378,2.579,379,1.911,383,1.09,389,1.821,396,2.509,397,3.197,398,3.519,399,1.302,400,1.136,403,1.488,409,1.544,418,3.078,420,1.302,421,2.026,422,3.946,423,3.516,428,2.624,431,1.544,432,2.026,437,1.544,438,2.243,439,1.325,440,1.544,445,2.327,447,2.327,449,2.327,451,2.327,453,2.327,455,2.327,457,2.327,459,2.327,461,2.327,463,2.327,464,1.544,465,2.243,471,1.544,473,1.544,475,1.544,477,1.544,478,1.544,479,2.026,480,1.544,484,1.544,485,1.544,486,1.544,487,1.544,491,2.88,495,4.236,533,2.327,537,2.362,540,1.921,546,2.026,568,1.031,642,2.88,644,3.239,655,2.516,671,1.262,714,1.911,715,2.014,795,3.164,867,2.516,966,2.745,969,2.88,1053,2.278,1130,5.386,1131,3.434,1132,3.434,1137,2.278,1139,4.141,1215,3.217,1328,3.035,1352,3.028,1414,2.134,1519,4.624,1520,2.278,1521,5.247,1522,5,1523,3.304,1524,1.821,1525,2.134,1526,5.014,1527,3.706,1528,2.459,1529,2.459,1530,2.014,1531,3.217,1532,4.353,1533,3.871,1534,4.31,1535,3.706,1536,5.045,1537,3.217,1538,2.459,1539,3.706,1540,2.459,1541,2.134,1542,2.459,1543,2.459,1544,2.459,1545,2.459,1546,4.461,1547,2.459,1548,1.741,1549,3.706,1550,2.459,1551,2.459,1552,2.459,1553,2.459,1554,2.459,1555,2.459,1556,2.459,1557,3.773,1558,5.329,1559,2.459,1560,2.459,1561,4.966,1562,2.459,1563,2.459,1564,2.459,1565,2.459,1566,2.459,1567,2.459,1568,3.706,1569,3.706,1570,3.706,1571,3.706,1572,3.706,1573,3.706,1574,3.706,1575,3.706,1576,3.706,1577,3.706,1578,2.459,1579,2.459,1580,3.706,1581,3.706,1582,3.706,1583,3.706,1584,2.459,1585,2.459,1586,2.459,1587,2.459,2400,3.068,2401,3.068,2402,3.068]],["title/interfaces/SerializableBucketCounting.html",[169,0.227,260,2.324]],["body/interfaces/SerializableBucketCounting.html",[0,0.248,3,0.212,4,0.281,5,0.175,6,0.151,8,0.163,11,0.717,16,0.01,22,2.471,23,0.225,24,0.894,26,1.96,27,1.593,28,0.583,55,0.332,56,0.987,58,0.869,59,0.838,65,3.323,67,2.157,71,1.365,77,0.26,78,0.981,89,0.641,120,2.918,121,2.125,125,0.184,126,0.419,133,1.96,134,1.517,135,0.984,136,0.369,137,0.806,138,1.277,140,0.795,141,2.592,143,2.682,147,0.959,148,1.601,150,3.181,151,2.259,169,0.433,170,1.413,171,0.624,172,0.403,202,0.007,203,0.007,204,4.417,205,0.583,206,2.828,207,3.314,208,1.601,209,4.462,210,3.085,211,3.31,212,2.068,213,1.845,214,2.592,215,1.601,216,1.365,217,4.484,218,4.61,219,1.553,220,4.11,221,2.828,222,2.704,224,2.184,225,4.021,226,1.72,227,1.594,228,4.396,230,3.441,231,3.659,232,2.592,233,1.792,234,3.314,235,3.314,236,1.439,237,1.811,238,2.592,239,2.491,240,2.592,241,3.314,242,1.792,243,3.314,244,3.128,245,0.817,246,3.314,247,3.314,248,1.058,249,4.397,250,3.314,251,3.314,252,2.491,253,3.314,254,3.314,255,3.314,256,2.232,257,1.601,258,3.441,259,4.376,260,4.627,261,2.968,262,4.397,263,4.397,264,3.314,265,2.828,266,4.149,267,3.314,268,3.314,269,2.828,270,3.314,271,3.314,272,3.314]],["title/interfaces/SerializableMetered.html",[169,0.227,1849,2.918]],["body/interfaces/SerializableMetered.html",[3,0.245,4,0.309,5,0.202,6,0.174,8,0.188,11,0.672,16,0.01,22,2.611,23,0.26,24,0.983,55,0.442,56,1.012,77,0.202,89,0.622,120,2.266,121,2.334,125,0.202,126,0.485,135,0.875,136,0.352,138,0.895,169,0.436,170,1.41,171,0.724,172,0.43,202,0.008,203,0.008,205,0.674,210,2.985,211,3.498,212,1.802,215,2.683,216,1.99,217,4.885,219,1.692,230,3.369,233,2.612,239,2.88,248,1.541,257,1.852,288,2.198,314,2.542,326,0.97,439,1.579,562,3.941,643,3.726,717,2.773,720,2.77,776,3.804,1180,2.998,1192,4.878,1201,3.975,1212,4.991,1214,2.773,1557,3.127,1716,3.432,1834,5.599,1835,3.833,1836,4.092,1837,4.092,1838,4.092,1839,4.092,1844,5.289,1846,6.111,1847,5.515,1848,5.566,1849,5.515,1850,5.928,1851,5.566,1852,5.566]],["title/interfaces/SerializableMetric.html",[22,1.454,169,0.227]],["body/interfaces/SerializableMetric.html",[0,0.263,1,3.327,3,0.16,4,0.232,5,0.132,6,0.114,7,2.364,8,0.291,9,3.076,10,2.137,11,0.746,12,1.449,13,2.886,14,2.505,15,2.364,16,0.01,17,1.774,18,1.037,19,1.887,20,2.556,21,2.708,22,2.914,23,0.17,24,0.737,25,1.043,26,1.895,27,1.312,28,1.083,29,0.634,30,2.594,31,2.431,32,2.043,33,2.043,36,3.417,37,2.243,39,2.137,40,3.417,42,1.959,52,1.812,53,2.243,55,0.448,56,0.681,58,1.05,59,0.916,62,0.794,63,2.364,64,3.808,65,1.687,66,1.63,67,1.63,68,0.98,69,1.21,70,1.21,71,1.032,72,1.286,75,2.364,77,0.306,78,0.676,80,2.043,83,2.364,84,2.137,89,0.619,91,2.137,93,2.388,96,2.137,99,2.137,101,2.137,103,2.137,106,3.417,108,2.243,110,2.137,112,3.417,114,2.137,116,1.959,119,2.505,120,1.481,121,1.21,125,0.195,126,0.317,127,5.131,128,2.505,129,4.756,130,2.886,131,2.243,132,4.086,133,1.481,134,1.146,135,0.952,136,0.361,137,0.764,138,1.314,139,2.505,140,0.526,141,1.959,142,4.172,143,3.014,144,4.172,145,4.172,146,4.172,147,1.063,148,1.21,149,2.886,150,3.575,151,2.262,152,2.364,153,5.276,154,2.505,155,1.959,156,2.364,157,2.886,158,2.886,159,2.364,160,2.886,161,1.812,162,2.674,163,2.886,164,2.886,165,2.043,166,2.886,167,2.886,168,2.137,169,0.342,170,1.308,171,0.458,172,0.427,173,1.572,174,2.016,175,4.172,176,1.849,177,3.621,178,2.886,179,2.886,180,2.886,181,4.172,182,2.886,183,2.886,184,3.076,185,3.09,186,4.539,187,4.172,188,2.886,189,2.674,190,2.886,191,1.578,192,2.886,193,2.674,194,2.886,195,2.886,196,2.886,197,2.886,198,2.886,199,2.886,200,2.886,201,2.505,202,0.006,203,0.006,205,0.44]],["title/interfaces/SerializableSampling.html",[169,0.227,2120,2.638]],["body/interfaces/SerializableSampling.html",[2,1.548,3,0.266,4,0.325,5,0.22,6,0.189,8,0.204,11,0.71,16,0.01,23,0.282,24,1.035,55,0.315,77,0.22,78,0.777,89,0.621,120,3.381,121,2.457,125,0.213,126,0.527,133,2.463,134,1.906,135,0.945,136,0.367,137,0.715,138,1.282,140,0.605,141,3.258,143,2.541,147,0.975,148,2.012,150,3.013,151,1.906,169,0.431,171,0.695,172,0.364,202,0.008,203,0.008,205,0.732,208,2.457,238,3.978,248,1.623,439,2.578,1034,3.258,1054,2.805,1188,4.643,1247,4.784,1338,3.554,2120,5.32,2310,4.165,2383,4.165,2385,5.086,2386,5.86,2387,6.437,2388,5.271,2389,5.271,2390,5.271]],["title/interfaces/SerializableSummarizing.html",[169,0.227,2403,3.092]],["body/interfaces/SerializableSummarizing.html",[2,1.675,3,0.288,4,0.341,5,0.238,6,0.205,8,0.221,11,0.529,16,0.01,23,0.305,24,1.085,55,0.403,56,0.854,72,1.236,77,0.238,89,0.49,120,3.153,121,2.576,125,0.223,126,0.57,135,0.745,136,0.353,168,4.55,169,0.44,171,0.57,172,0.382,202,0.008,203,0.008,205,0.792,248,1.702,785,4.091,1054,3.034,1293,5.654,1366,4.35,1677,5.36,1695,5.679,2403,5.87,2404,4.81,2405,5.703,2406,5.192]],["title/interfaces/SerializedSnapshot.html",[169,0.227,1247,2.523]],["body/interfaces/SerializedSnapshot.html",[0,0.219,3,0.176,4,0.248,5,0.145,6,0.125,8,0.135,12,1.205,16,0.01,23,0.33,24,0.788,26,1.227,28,1.057,55,0.339,56,1.025,57,1.024,58,1.229,59,1.41,62,0.47,77,0.145,89,0.674,120,2.291,121,1.872,125,0.115,126,0.348,135,0.641,136,0.32,137,0.63,140,0.773,147,1.035,169,0.377,171,0.773,172,0.447,202,0.006,203,0.006,205,0.484,208,1.872,212,1.295,213,2.959,219,0.814,231,3.871,238,3.03,245,0.678,248,1.898,256,2.609,284,2.94,285,2.466,286,1.592,288,1.579,289,2.247,400,1.929,419,1.301,439,2.518,504,1.992,509,3.656,559,2.247,776,2.522,785,3.451,1015,2.154,1019,2.609,1033,2.599,1034,4.746,1036,5.261,1155,3.967,1185,2.599,1201,2.069,1247,4.181,1248,4.136,1249,4.136,1250,4.136,1251,4.136,1252,4.136,1253,4.136,1254,4.136,1255,4.136,1256,4.136,1257,4.136,1258,4.136,1276,4.136,1282,3.469,1283,4.136,1285,4.836,1326,2.154,1605,2.754,1725,2.35,1774,3.656,1775,3.306,1776,3.469,1777,3.469,1778,3.469,1779,3.656,1810,2.599,2096,2.94,2098,2.94,2385,4.863,2407,2.754,2408,3.173,2409,5.164,2410,3.173,2411,3.173,2412,3.173,2413,3.173,2414,3.173,2415,3.173,2416,3.173,2417,3.173,2418,3.173,2419,3.173,2420,3.173,2421,3.173,2422,3.173,2423,3.173,2424,3.173,2425,3.173,2426,3.173,2427,4.464,2428,3.173,2429,3.173,2430,3.173,2431,2.94,2432,2.94,2433,3.173,2434,3.173,2435,2.94,2436,2.94,2437,3.173,2438,2.94,2439,2.94,2440,2.94,2441,3.173,2442,2.94,2443,3.173,2444,3.173,2445,4.464,2446,3.173,2447,3.173,2448,5.164,2449,4.464,2450,4.464,2451,3.173]],["title/classes/SimpleGauge.html",[0,0.174,1230,2.918]],["body/classes/SimpleGauge.html",[0,0.253,1,3.698,2,1.024,3,0.176,4,0.248,5,0.145,6,0.233,8,0.29,10,3.306,11,0.688,12,1.394,16,0.01,17,1.543,18,1.101,19,1.394,20,1.164,21,2.287,22,2.107,23,0.187,24,0.788,25,1.531,26,1.997,27,1.624,28,1.12,29,0.98,30,2.966,31,2.226,32,3.16,33,3.16,34,1.145,35,3.874,36,4.229,37,4.013,38,3.874,39,3.824,40,4.229,41,3.874,42,3.505,43,3.874,44,3.656,45,3.874,46,3.874,47,3.656,48,3.874,49,3.874,50,3.656,51,3.656,52,3.518,53,4.013,55,0.47,56,0.959,57,1.905,58,1.226,59,1.345,60,1.381,62,0.906,63,2.599,64,4.013,65,1.854,66,1.792,67,1.792,68,1.077,69,1.331,70,1.331,71,1.135,72,1.282,75,2.599,77,0.311,78,0.723,80,2.247,83,2.599,84,2.35,86,2.19,87,1.716,89,0.65,91,2.35,93,2.775,96,2.35,99,2.35,101,2.35,103,2.35,105,1.854,106,2.599,108,2.466,110,2.35,112,2.599,114,2.35,116,2.154,125,0.162,126,0.348,135,0.455,136,0.293,137,0.63,140,0.4,147,0.764,169,0.285,170,1.309,171,0.567,172,0.381,173,1.682,184,1.992,185,2.35,202,0.006,203,0.006,212,1.822,224,2.712,245,0.954,276,1.175,312,2.366,359,1.295,366,1.261,386,1.477,400,1.368,587,2.94,589,4.136,590,6.622,593,3.173,594,3.173,595,3.173,596,3.173,597,3.173,598,3.173,599,3.173,612,2.911,613,3.16,614,2.702,615,3.173,616,3.173,617,3.173,618,3.173,619,3.173,620,3.173,621,3.173,622,3.173,623,3.173,624,3.173,625,3.173,626,3.173,627,3.173,628,3.173,629,3.173,630,3.173,631,3.173,632,3.173,634,1.579,897,3.469,1013,3.656,1019,2.609,1225,2.94,1226,3.485,1227,2.94,1228,3.707,1230,5.419,1231,4.903,1232,5.672,1233,5.672,1234,2.466,1235,3.469,1236,2.466,1237,2.599,2452,5.57,2453,3.959,2454,3.959,2455,3.959,2456,3.959]],["title/classes/SimpleSnapshot.html",[0,0.174,1034,2.418]],["body/classes/SimpleSnapshot.html",[0,0.197,2,0.883,3,0.152,4,0.223,5,0.125,6,0.267,8,0.117,12,1.283,16,0.01,18,0.613,23,0.328,24,0.709,26,1.059,28,1.105,34,1.03,55,0.366,56,1.024,57,1.534,58,1.242,59,1.356,60,1.293,62,0.594,77,0.125,86,1.262,87,0.978,89,0.679,120,1.405,121,1.148,125,0.099,126,0.301,135,0.576,136,0.304,137,0.58,140,0.735,147,1.015,169,0.372,171,0.776,172,0.441,202,0.005,203,0.005,208,1.993,212,1.638,213,3.173,219,1.03,231,3.924,238,1.858,245,0.858,248,1.889,256,2.346,276,0.72,284,3.72,285,3.12,286,1.487,288,1.998,289,2.843,400,1.99,419,1.385,439,2.483,504,2.52,509,3.366,559,1.938,776,2.268,785,3.258,1015,1.858,1019,3.258,1033,3.288,1034,4.697,1036,5.057,1155,4.125,1185,2.242,1201,2.618,1228,2.52,1247,3.947,1248,5.165,1249,5.165,1250,5.165,1251,5.165,1252,5.165,1253,5.165,1254,5.165,1255,5.165,1256,5.165,1257,5.165,1258,5.165,1276,4.404,1282,3.694,1283,4.404,1285,4.931,1326,2.725,1605,2.376,1725,2.973,1774,3.947,1775,3.52,1776,3.694,1777,3.694,1778,3.694,1779,3.893,1810,3.288,2096,3.72,2098,3.72,2385,4.838,2407,2.376,2408,4.015,2409,4.754,2410,2.738,2411,2.738,2412,2.738,2413,4.015,2414,2.738,2415,4.015,2416,2.738,2417,4.015,2418,2.738,2419,4.015,2420,2.738,2421,4.015,2422,2.738,2423,4.015,2424,2.738,2425,2.738,2426,2.738,2427,4.015,2428,2.738,2429,2.738,2430,4.015,2431,3.72,2432,3.72,2433,4.015,2434,4.015,2435,3.72,2436,3.72,2437,4.015,2438,3.72,2439,3.72,2440,3.72,2441,4.015,2442,3.72,2443,4.015,2444,2.738,2445,4.015,2446,2.738,2447,2.738,2448,4.754,2449,4.015,2450,4.015,2451,2.738,2457,5.009,2458,3.416,2459,3.416,2460,3.416,2461,3.416,2462,3.416,2463,3.416,2464,3.416,2465,3.416,2466,3.416,2467,3.416,2468,3.416,2469,3.416,2470,3.416]],["title/interfaces/SizeAttributeInterface.html",[169,0.227,1729,2.918]],["body/interfaces/SizeAttributeInterface.html",[0,0.249,1,2.922,3,0.213,4,0.282,5,0.175,6,0.151,8,0.258,11,0.581,12,1.371,16,0.01,17,1.518,18,0.869,23,0.225,24,0.896,25,1.27,26,2.598,28,0.869,29,0.841,31,2.668,52,2.406,55,0.374,56,0.962,58,0.871,62,0.567,72,1.07,77,0.261,89,0.624,125,0.207,126,0.421,134,1.522,135,0.905,136,0.358,137,0.807,138,1.029,140,0.483,143,3.21,147,0.959,151,2.017,169,0.447,170,1.086,171,0.558,172,0.418,202,0.007,203,0.007,205,0.585,208,3.057,212,2.324,224,2.189,226,1.301,245,0.819,276,1.336,286,1.442,312,2.256,359,1.564,365,1.907,400,1.175,419,1.767,612,2.499,613,2.713,614,2.319,634,1.907,643,2.165,1019,4.07,1228,2.406,1234,2.978,1235,3.946,1236,2.978,1237,3.138,1413,4.49,1720,5.31,1721,2.978,1722,2.978,1723,5.845,1724,5.475,1725,4.898,1726,5.277,1727,5.31,1728,5.31,1729,5.417,1730,4.942,1731,6.004,1732,3.55,1733,5.618,1734,3.55,1735,3.55,1736,5.618,1737,3.55,1738,3.55,1739,3.55,1740,3.55,1741,3.55,1742,6.128,1743,3.55,1744,3.55,1745,3.55]],["title/interfaces/SizeMethodInterface.html",[169,0.227,1728,2.918]],["body/interfaces/SizeMethodInterface.html",[0,0.249,1,2.922,3,0.213,4,0.282,5,0.175,6,0.2,8,0.258,11,0.581,12,1.371,16,0.01,17,1.145,18,0.869,23,0.225,25,1.27,26,2.598,28,0.869,29,0.841,31,2.668,34,1.303,52,2.406,55,0.333,56,0.954,58,0.871,60,0.735,62,0.567,72,1.07,77,0.232,89,0.633,125,0.207,126,0.421,134,1.522,135,0.905,136,0.358,137,0.807,138,1.029,140,0.483,143,3.21,147,0.959,151,2.262,169,0.447,170,1.086,171,0.558,172,0.418,202,0.007,203,0.007,205,0.585,208,3.057,212,2.072,224,2.189,226,1.301,245,0.819,276,1.336,286,1.442,312,2.256,359,1.564,365,1.907,400,1.175,419,1.767,612,2.499,613,2.713,614,2.319,634,1.907,643,2.165,1019,4.07,1228,2.406,1234,2.978,1235,3.946,1236,2.978,1237,3.138,1413,4.49,1720,5.31,1721,3.946,1722,2.978,1723,5.845,1724,5.475,1725,4.898,1726,4.705,1727,5.31,1728,5.417,1729,5.31,1730,4.942,1731,6.004,1732,3.55,1733,5.618,1734,3.55,1735,3.55,1736,5.618,1737,3.55,1738,3.55,1739,3.55,1740,3.55,1741,3.55,1742,6.128,1743,3.55,1744,3.55,1745,3.55,2471,4.781]],["title/classes/SlidingWindowReservoir.html",[0,0.174,1891,3.092]],["body/classes/SlidingWindowReservoir.html",[0,0.262,2,1.337,3,0.23,4,0.297,5,0.19,6,0.269,8,0.176,12,1.597,16,0.01,18,0.815,23,0.368,24,0.944,25,1.739,28,1.061,34,1.371,55,0.442,56,1.018,57,1.724,58,1.209,59,0.91,60,1.293,62,0.791,77,0.19,78,0.958,86,1.681,87,1.302,89,0.636,125,0.194,126,0.455,136,0.326,137,0.722,147,0.613,169,0.341,171,0.65,172,0.425,202,0.007,203,0.007,208,1.738,219,1.063,224,1.786,233,1.944,245,1.336,248,1.988,276,1.091,400,1.916,419,1.557,439,2.505,643,2.341,775,2.602,819,2.265,924,4.638,1011,5.926,1012,3.596,1013,3.394,1014,5.317,1015,4.574,1016,5.748,1017,5.345,1018,6.624,1019,3.78,1020,4.154,1021,5.345,1023,5.994,1027,5.134,1029,3.581,1030,4.144,1031,5.345,1032,4.144,1033,3.394,1034,2.813,1035,4.144,1036,4.377,1399,4.144,1711,4.144,1891,4.638,2063,4.552,2472,6.669,2473,6.669,2474,6.669,2475,5.171,2476,5.171,2477,5.171,2478,5.171,2479,5.171]],["title/interfaces/Snapshot.html",[169,0.227,439,1.274]],["body/interfaces/Snapshot.html",[0,0.205,3,0.161,4,0.233,5,0.133,6,0.266,8,0.124,12,1.133,16,0.01,18,0.444,23,0.317,26,1.623,28,1.044,34,1.076,55,0.323,56,1.026,57,0.938,58,1.237,59,1.378,60,1.287,62,0.43,77,0.133,86,0.915,87,0.709,89,0.682,120,1.492,121,1.22,125,0.106,126,0.319,135,0.602,136,0.311,137,0.6,140,0.751,147,1.023,169,0.364,171,0.788,172,0.444,202,0.006,203,0.006,205,0.444,208,2.063,212,1.187,213,2.875,219,0.746,231,3.952,238,1.974,245,0.622,248,1.896,256,2.452,284,2.695,285,2.26,286,1.53,288,1.448,289,2.059,400,1.824,419,1.434,439,2.492,504,1.826,509,3.484,559,2.97,776,2.37,785,3.338,1015,2.848,1019,3.338,1033,2.382,1034,4.693,1036,5.142,1155,4.213,1185,2.382,1201,1.897,1228,2.634,1247,3.814,1248,5.292,1249,5.292,1250,5.292,1251,5.292,1252,5.292,1253,5.292,1254,5.292,1255,5.292,1256,5.292,1257,5.292,1258,5.292,1276,3.887,1282,3.824,1283,4.559,1285,4.873,1326,1.974,1605,3.641,1725,2.154,1774,3.814,1775,3.644,1776,3.824,1777,3.824,1778,3.824,1779,4.03,1810,2.382,2096,2.695,2098,2.695,2385,4.271,2407,2.524,2408,2.908,2409,4.921,2410,2.908,2411,2.908,2412,2.908,2413,2.908,2414,2.908,2415,2.908,2416,2.908,2417,2.908,2418,2.908,2419,2.908,2420,2.908,2421,2.908,2422,2.908,2423,2.908,2424,2.908,2425,2.908,2426,2.908,2427,4.195,2428,2.908,2429,2.908,2430,2.908,2431,2.695,2432,2.695,2433,2.908,2434,2.908,2435,2.695,2436,2.695,2437,2.908,2438,2.695,2439,2.695,2440,2.695,2441,2.908,2442,2.695,2443,2.908,2444,2.908,2445,4.195,2446,2.908,2447,2.908,2448,4.921,2449,4.195,2450,4.195,2451,2.908,2480,3.629,2481,3.629,2482,3.629,2483,3.629,2484,3.629,2485,3.629,2486,3.629,2487,3.629,2488,3.629,2489,3.629,2490,3.629,2491,3.629,2492,3.629]],["title/classes/SpaceHistory.html",[0,0.174,2493,3.563]],["body/classes/SpaceHistory.html",[0,0.272,1,2.627,2,1.008,3,0.173,4,0.245,5,0.143,6,0.24,8,0.133,11,0.701,12,1.192,16,0.01,17,1.755,18,0.976,19,0.843,21,2.271,23,0.184,24,0.779,25,1.768,28,1.076,29,1.464,44,2.558,47,2.558,50,2.558,55,0.461,56,0.434,58,1.18,60,1.127,62,0.758,72,1.207,77,0.302,78,1.134,86,0.982,87,0.761,89,0.525,125,0.186,126,0.343,135,0.448,136,0.291,137,0.78,140,0.702,147,0.869,170,0.944,171,0.485,172,0.441,173,1.663,184,1.961,186,2.894,189,2.894,193,2.894,202,0.006,203,0.006,208,1.851,227,1.347,240,2.12,245,1.095,248,1.418,276,1.347,324,1.208,325,0.934,326,1.51,353,1.708,355,1.654,359,1.275,364,1.555,383,1.385,390,2.894,391,2.711,393,2.12,419,0.91,558,2.313,671,1.603,732,2.212,917,4.415,1015,2.997,1019,4.078,1230,5.894,1357,2.12,1809,5.12,1844,5.288,1882,2.894,1890,4.193,1945,6.094,1965,2.894,1966,2.894,2013,4.415,2334,2.558,2393,4.849,2493,6.595,2494,3.124,2495,4.849,2496,6.389,2497,6.389,2498,6.389,2499,3.898,2500,5.509,2501,7.816,2502,3.898,2503,6.389,2504,3.898,2505,3.898,2506,4.849,2507,3.898,2508,3.898,2509,3.898,2510,3.898,2511,3.898,2512,3.898,2513,3.898,2514,3.898,2515,3.898,2516,3.898,2517,3.898,2518,3.898,2519,3.898,2520,3.898,2521,3.898,2522,3.898,2523,3.898,2524,5.565,2525,2.12,2526,7.051,2527,3.898,2528,3.898,2529,3.898,2530,6.943,2531,3.898,2532,3.898,2533,3.898,2534,3.898,2535,3.898,2536,3.898,2537,3.898,2538,3.898,2539,3.898,2540,3.898,2541,3.898,2542,3.898,2543,3.898,2544,5.509,2545,3.898,2546,3.898,2547,3.898,2548,3.898,2549,3.898,2550,3.898,2551,3.898,2552,3.898,2553,3.898,2554,3.898,2555,3.898,2556,3.898,2557,3.898,2558,3.898,2559,3.898,2560,3.898,2561,3.898,2562,3.898,2563,3.898,2564,3.898,2565,3.898,2566,3.898,2567,3.898,2568,3.898,2569,3.898,2570,3.898,2571,3.898,2572,3.898,2573,3.898,2574,3.898,2575,3.898,2576,3.898,2577,3.898,2578,3.898,2579,3.898,2580,3.898,2581,3.898,2582,3.898,2583,3.898,2584,3.898,2585,3.898,2586,3.898,2587,3.898,2588,3.898,2589,3.898,2590,3.898,2591,3.431,2592,3.898,2593,3.898,2594,3.898,2595,6.389,2596,3.898,2597,3.898,2598,3.898,2599,3.898,2600,3.898,2601,3.898,2602,3.898,2603,3.898,2604,6.389,2605,3.898,2606,3.898,2607,3.898,2608,3.898,2609,3.898,2610,3.898,2611,3.898,2612,3.898,2613,3.898,2614,3.898,2615,3.898,2616,3.898,2617,3.898,2618,3.898,2619,3.898,2620,3.898,2621,3.898,2622,3.898,2623,3.898,2624,3.898,2625,3.898,2626,3.898,2627,3.898,2628,3.898,2629,3.898,2630,3.898,2631,3.898,2632,3.898]],["title/classes/StdClock.html",[0,0.174,323,1.579]],["body/classes/StdClock.html",[0,0.317,2,1.475,3,0.254,4,0.36,5,0.209,6,0.18,8,0.195,9,4.068,16,0.01,23,0.269,28,0.989,34,1.459,56,0.945,57,1.835,59,1.249,60,0.878,77,0.209,89,0.641,125,0.166,126,0.502,136,0.364,137,0.694,138,0.927,140,0.781,147,0.916,169,0.363,170,1.324,171,0.625,172,0.354,202,0.008,203,0.008,215,3.084,219,1.589,224,1.971,226,1.932,227,1.204,233,2.146,242,3.04,323,2.872,354,2.749,383,2.522,490,3.746,491,3.554,492,2.421,493,4.574,495,4.588,496,4.574,497,3.969,498,4.937,499,4.611,500,4.238,501,4.213,502,6.003,503,4.238,504,2.871,505,4.238,506,2.673,507,5.271,508,3.746,509,3.238,510,5.689,511,4.574,512,4.574,513,5.271,514,5.689,515,4.574,516,4.574,517,6.193,518,5.689,519,5.689,520,4.937,521,3.862,522,4.937,590,4.238,2633,5.707]],["title/classes/StopWatch.html",[0,0.174,2634,3.301]],["body/classes/StopWatch.html",[0,0.283,1,2.402,2,0.86,3,0.148,4,0.219,5,0.122,6,0.235,8,0.235,11,0.401,12,1.264,16,0.01,17,1.177,18,0.881,23,0.157,24,0.695,25,1.708,28,1.082,29,1.462,34,1.01,52,1.674,55,0.44,56,0.955,59,0.585,60,1.108,62,0.693,67,2.645,71,2.191,72,1.082,77,0.214,78,0.893,86,0.839,87,0.65,89,0.644,93,2.42,125,0.24,126,0.293,134,1.564,135,0.963,136,0.27,137,0.763,138,1.048,140,0.696,147,1.035,150,2.472,151,1.564,170,0.842,171,0.742,172,0.442,173,1.483,184,1.674,185,1.975,202,0.005,203,0.005,204,2.472,209,1.888,210,2.075,211,2.152,215,2.504,216,1.674,218,2.673,221,1.975,222,1.888,225,3.535,227,1.232,237,2.415,239,1.739,245,1.001,248,0.738,258,2.834,259,3.372,260,2.568,276,1.232,286,1.119,288,1.96,299,2.471,311,1.811,314,2.372,324,2.808,350,3.064,354,2.72,359,1.088,366,1.564,369,1.483,370,1.005,378,1.149,393,3.509,413,2.314,417,2.667,418,1.412,439,2.064,492,2.478,499,2.673,506,2.736,508,5.495,509,1.888,562,2.788,612,1.739,613,1.888,614,1.614,633,2.184,634,1.327,694,2.472,720,2.33,776,2.224,785,2.301,819,2.152,966,1.975,1014,4.084,1029,3.338,1155,3.315,1172,3.467,1180,2.673,1188,3.053,1192,4.053,1201,3.597,1211,4.727,1214,1.674,1234,2.072,1235,3.06,1236,2.072,1247,3.66,1291,2.929,1292,2.929,1293,3.225,1294,2.929,1312,3.938,1324,2.929,1328,2.184,1334,2.929,1338,1.975,1379,2.072,1391,3.225,1446,2.314,1557,3.66,1590,2.471,1677,3.834,1688,2.929,1834,3.834,1836,2.471,1837,2.471,1838,2.471,1839,2.471,1846,3.648,1847,3.834,1849,3.225,1850,2.471,1892,2.667,1930,2.667,2014,2.667,2022,2.667,2120,2.916,2352,3.938,2363,2.929,2397,2.929,2403,3.417,2406,2.667,2634,6.169,2635,2.667,2636,4.681,2637,7.45,2638,3.327,2639,4.913,2640,3.327,2641,3.327,2642,3.327,2643,3.327,2644,7.202,2645,3.327,2646,3.327,2647,4.913,2648,3.327,2649,7.45,2650,3.327,2651,3.327,2652,3.327,2653,3.327,2654,3.327,2655,3.327,2656,3.327,2657,3.327,2658,4.913,2659,3.327,2660,3.327,2661,3.327,2662,3.327,2663,3.327,2664,3.327,2665,3.327,2666,6.451,2667,3.327,2668,3.327,2669,3.327,2670,3.327,2671,3.327,2672,3.327,2673,3.327,2674,2.929,2675,3.327,2676,3.327,2677,3.938,2678,4.913,2679,3.327,2680,4.913,2681,6.451,2682,5.841,2683,3.327,2684,3.327,2685,3.327,2686,3.327,2687,3.327,2688,4.913,2689,3.327,2690,4.913,2691,3.327]],["title/interfaces/Summarizing.html",[169,0.227,1293,2.918]],["body/interfaces/Summarizing.html",[2,1.978,3,0.287,4,0.34,5,0.237,6,0.242,8,0.22,11,0.625,16,0.01,23,0.304,34,1.573,55,0.339,56,0.719,60,0.993,72,1.154,77,0.237,89,0.578,120,2.654,121,2.169,125,0.223,126,0.568,135,0.742,136,0.353,168,3.831,169,0.446,171,0.673,172,0.381,202,0.008,203,0.008,205,0.789,248,1.871,785,4.031,1054,3.583,1293,5.649,1366,3.663,1677,5.533,1695,5.321,2403,5.671,2404,4.793,2405,6.734,2406,6.756,2692,6.454]],["title/interfaces/Taggable.html",[132,2.324,169,0.227]],["body/interfaces/Taggable.html",[2,1.713,3,0.228,4,0.295,5,0.188,6,0.269,8,0.175,16,0.01,17,1.587,18,1.087,19,1.96,23,0.241,33,4.408,34,1.362,35,4.608,41,4.608,42,4.226,44,4.348,45,4.608,50,4.348,51,4.348,55,0.433,58,1.068,60,1.29,72,1.285,77,0.33,78,0.664,84,3.932,86,2.077,87,1.61,89,0.66,96,3.932,101,3.932,103,3.932,105,3.638,114,3.932,116,3.604,125,0.149,126,0.45,132,4.588,135,0.893,136,0.351,137,0.84,138,1.076,140,0.67,147,0.786,169,0.421,171,0.684,172,0.418,173,2.345,191,2.242,202,0.007,203,0.007,205,0.626,226,2.114,257,1.72,376,1.898,419,2.024,671,3.534,1029,3.214,1357,4.226,1389,3.56,1509,3.8,1815,3.8,1822,4.608,2334,4.348,2693,3.56,2694,5.118,2695,5.832,2696,5.118,2697,5.118,2698,5.118,2699,5.118,2700,5.118,2701,5.118,2702,4.505,2703,4.505,2704,4.102,2705,4.505,2706,4.505]],["title/interfaces/Tags.html",[19,0.962,169,0.227]],["body/interfaces/Tags.html",[2,1.45,3,0.249,4,0.312,5,0.206,6,0.222,8,0.191,16,0.01,17,1.343,18,1.032,19,1.962,33,4.559,42,3.05,58,0.966,60,0.863,72,1.275,77,0.329,78,0.728,84,3.328,89,0.66,96,3.328,101,3.328,103,3.328,105,3.288,114,3.328,116,3.05,125,0.163,126,0.493,132,4.597,135,0.924,136,0.358,137,0.854,138,1.14,140,0.71,147,0.833,169,0.432,171,0.618,172,0.427,173,2.12,191,3.076,202,0.008,203,0.008,205,0.686,226,2.186,257,2.359,273,3.492,376,1.607,419,1.932,671,3.402,1029,2.72,1357,3.819,1389,3.9,1509,4.163,1815,5.213,1822,4.883,2334,3.68,2693,3.9,2695,4.936,2702,4.936,2703,4.936,2704,4.494,2705,4.936,2706,4.936,2707,5.607]],["title/classes/TagsOnlyMetricRegistry.html",[0,0.174,1387,3.301]],["body/classes/TagsOnlyMetricRegistry.html",[0,0.23,2,0.606,3,0.104,4,0.167,5,0.086,6,0.169,8,0.08,9,4.107,10,1.391,11,0.671,12,0.507,16,0.01,17,0.562,18,0.287,19,1.813,21,0.767,23,0.221,24,0.531,25,1.316,26,1.163,27,2.043,28,0.956,29,1.238,31,2.794,34,0.771,42,3.403,55,0.432,56,0.872,58,0.645,59,0.943,60,0.722,62,0.696,68,1.702,69,1.261,70,1.261,71,1.536,72,0.885,77,0.303,78,0.761,86,0.591,87,0.458,89,0.647,93,2.523,116,2.041,125,0.236,126,0.206,132,1.961,133,0.964,135,0.939,136,0.224,137,0.859,138,0.609,140,0.835,147,0.946,169,0.3,171,0.472,172,0.437,173,1.133,176,1.333,191,1.027,201,2.609,202,0.006,203,0.004,211,3.163,213,2.271,216,0.672,219,1.286,227,1.131,236,1.771,237,2.185,245,1.005,276,0.494,286,0.854,300,1.871,301,1.421,311,2.182,312,2.185,314,2.428,315,2.453,316,3.16,317,2.271,318,1.333,319,2.709,320,0.857,324,2.364,325,0.562,326,1.201,331,2.337,340,1.918,344,1.63,346,1.991,349,2.205,350,1.543,357,1.333,358,1.133,365,1.497,366,1.194,368,2.275,369,2.447,370,1.983,371,1.592,373,2.668,375,2.275,376,1.882,377,2.454,378,2.702,380,1.63,381,1.961,382,1.961,386,2.202,393,2.916,396,1.261,397,3.343,399,1.592,400,1.317,403,1.137,419,1.369,420,0.995,421,1.644,422,1.391,432,1.027,438,1.137,465,1.137,479,1.027,492,0.995,521,2.552,522,1.63,523,2.697,528,1.33,537,0.833,538,1.961,539,0.908,540,2.364,542,1.757,544,1.888,545,2.496,551,1.411,556,3.788,557,1.275,560,1.275,563,1.179,567,3.19,568,2.294,571,4.091,574,1.543,634,0.935,649,3.433,650,2.275,660,2.662,671,1.543,683,1.391,700,1.46,717,2.697,720,2.139,721,2.337,722,1.46,728,2.337,729,1.63,730,1.63,731,1.391,732,1.33,733,1.46,734,1.46,735,1.46,736,1.391,738,1.33,739,2.921,741,1.63,750,2.337,751,3.328,753,1.46,756,2.784,769,1.46,817,1.63,853,1.63,884,2.609,897,3.339,906,1.63,955,1.741,1016,1.63,1029,1.82,1085,1.63,1118,4.878,1134,1.888,1144,1.539,1201,1.225,1214,1.179,1340,1.33,1344,5.476,1345,1.33,1349,3.303,1352,2.041,1353,4.129,1355,3.303,1357,2.041,1358,3.303,1359,2.463,1362,3.303,1363,3.729,1364,3.729,1365,3.303,1366,3.042,1367,3.303,1368,2.609,1369,3.303,1370,3.759,1371,3.007,1372,3.303,1376,1.539,1377,1.33,1378,1.741,1379,1.46,1380,2.784,1381,2.064,1382,3.262,1383,2.064,1384,2.227,1385,3.303,1386,3.303,1387,5.068,1388,3.303,1389,1.63,1390,1.63,1391,1.539,1392,1.391,1393,1.741,1394,2.064,1395,2.064,1396,2.064,1397,2.064,1398,4.297,1399,1.879,1400,1.741,1401,2.064,1402,2.064,1403,1.879,1404,2.064,1405,1.741,1406,2.064,1407,2.064,1408,2.064,1409,3.303,1410,2.064,1411,2.064,1412,2.064,1413,2.227,1414,1.63,1415,2.064,1416,2.064,1417,3.303,1418,3.303,1419,3.303,1420,3.303,1421,3.303,1422,2.064,1423,5.782,1424,2.064,1425,5.507,1426,5.507,1427,2.064,1428,2.064,1429,2.064,1430,2.064,1431,2.064,1432,2.064,1433,2.041,1434,2.064,1435,2.064,1436,2.064,1437,2.064,1438,3.303,1439,2.064,1440,2.064,1441,2.064,1442,2.064,1443,3.303,1444,2.064,1445,1.879,1446,1.63,1447,3.303,1448,2.064,1449,5.162,1450,5.162,1451,4.129,1452,4.129,1453,4.129,1454,4.129,1455,3.303,1456,2.064,1457,4.129,1458,5.507,1459,3.303,1460,2.064,1461,4.129,1462,2.064,1463,2.064,1464,4.129,1465,2.064,1466,2.064,1467,2.064,1468,4.129,1469,2.064,1470,2.064,1471,2.064,1472,4.129,1473,2.064,1474,2.064,1475,2.064,1476,4.129,1477,2.064,1478,2.064,1479,5.507,1480,2.064,1481,1.63,1482,1.879,1483,3.328,1484,2.064,1485,3.303,1486,3.303,1487,2.064,1488,1.741,1489,4.129,1490,2.064,1491,2.064,1492,2.064,1493,2.064,1494,1.741,1495,2.064,1496,2.064,1497,1.63,1498,1.63,1499,1.63,1500,1.63,1501,4.297,1502,2.064,1503,1.879,1504,2.064,1505,2.064,1506,2.064,1507,2.064,1508,2.064,1509,3.483,1510,2.064,1511,2.064,1512,1.741,1513,1.741,1514,1.741,1515,1.741,1516,2.064,1517,1.63,1518,2.064,2708,3.752,2709,2.344]],["title/interfaces/Time.html",[169,0.227,215,1.494]],["body/interfaces/Time.html",[0,0.318,3,0.256,4,0.345,5,0.211,6,0.182,8,0.197,9,4.082,16,0.01,23,0.272,24,1.011,28,0.873,55,0.375,56,0.984,57,1.49,59,1.257,77,0.211,89,0.613,125,0.168,126,0.507,136,0.364,137,0.698,138,0.936,140,0.785,147,0.921,169,0.365,170,1.224,171,0.628,172,0.356,202,0.008,203,0.008,205,0.705,215,3.078,219,1.468,224,1.991,226,1.568,227,1.215,233,2.686,242,3.051,323,2.757,354,2.698,383,2.047,490,3.783,491,3.589,492,2.445,493,4.619,495,4.732,496,4.619,497,4.008,498,5.8,499,4.735,500,4.279,501,4.239,502,6.024,503,4.279,504,2.9,505,4.279,506,2.699,507,5.303,508,3.783,509,3.27,510,5.724,511,4.619,512,4.619,513,5.303,514,5.724,515,4.619,516,4.619,517,5.724,518,4.619,519,4.619,520,4.008,521,3.135,522,4.008]],["title/classes/TimeUnit.html",[0,0.174,1172,2.638]],["body/classes/TimeUnit.html",[0,0.267,2,1.379,3,0.237,4,0.303,5,0.196,6,0.258,8,0.182,16,0.01,18,0.832,23,0.252,24,0.963,25,1.581,28,1.048,34,1.399,55,0.415,56,1.002,58,1.121,60,1.214,62,0.807,77,0.196,78,1.099,86,1.715,87,1.329,89,0.596,125,0.155,126,0.47,136,0.362,137,0.732,140,0.856,147,0.807,171,0.599,172,0.393,202,0.007,203,0.007,212,2.225,215,2.882,216,2.568,233,2.559,242,3.302,245,1.166,276,1.125,286,1.549,318,2.417,396,2.287,419,1.589,499,4.803,506,3.695,513,5.052,1069,4.732,1172,5.264,1211,5.179,1214,3.97,1694,5.989,2710,6.052,2711,3.962,2712,6.323,2713,8.333,2714,6.804,2715,7.89,2716,6.804,2717,6.804,2718,6.804,2719,5.335,2720,6.804,2721,6.679,2722,7.89,2723,6.804,2724,5.335,2725,7.491,2726,5.335,2727,4.697,2728,4.697,2729,4.697,2730,4.697,2731,4.697,2732,4.697,2733,4.697]],["title/coverage.html",[2734,4.836]],["body/coverage.html",[0,0.356,1,1.443,5,0.129,6,0.293,7,5.195,11,0.287,16,0.01,17,0.841,19,0.759,20,1.032,22,1.148,27,0.885,55,0.184,59,0.899,78,0.455,127,2.304,128,2.441,129,2.186,131,2.186,132,1.834,138,1.38,139,2.441,169,0.467,174,1.359,202,0.006,203,0.006,204,1.766,206,4.607,215,1.179,225,1.589,228,1.909,236,1.06,237,1.006,259,1.834,260,1.834,261,2.186,297,2.606,298,4.914,301,1.105,307,2.186,310,1.4,311,1.088,312,1.006,313,1.644,314,1.117,315,1.006,316,1.359,318,1.247,319,1.247,320,1.282,321,1.589,322,1.537,323,1.247,324,1.088,343,2.606,346,1.865,347,2.606,354,1.088,358,1.06,377,1.032,439,1.006,488,1.992,490,4.343,506,1.644,509,1.992,523,4.046,524,4.38,540,1.088,549,2.083,553,3.182,556,1.537,557,1.909,579,1.834,580,3.794,639,2.186,640,4.121,657,2.186,658,2.186,659,2.186,660,1.992,679,2.186,680,2.441,893,2.441,894,3.794,902,2.606,985,2.441,986,3.794,988,2.186,989,2.441,1011,2.441,1012,4.19,1014,2.083,1034,1.909,1043,2.813,1044,4.095,1045,2.813,1069,2.441,1150,2.606,1151,3.794,1152,3.794,1157,2.606,1172,2.083,1177,2.813,1188,1.834,1211,2.304,1214,1.766,1225,3.794,1230,2.304,1238,2.813,1243,2.813,1244,4.473,1245,4.473,1246,2.441,1247,1.992,1293,2.304,1296,2.813,1325,6.07,1338,2.083,1344,2.606,1345,4.491,1376,2.304,1377,1.992,1380,2.083,1382,2.441,1387,2.606,1391,5.459,1519,2.441,1520,4.914,1521,2.186,1522,2.083,1526,2.304,1588,2.813,1589,3.089,1624,2.606,1625,3.089,1677,2.304,1678,3.794,1695,2.441,1704,3.794,1705,3.794,1709,2.441,1710,2.813,1714,2.441,1715,2.813,1720,2.304,1721,4.38,1722,4.38,1727,2.304,1728,2.304,1729,2.304,1731,2.441,1747,2.441,1748,4.602,1750,2.441,1752,2.441,1753,2.441,1774,3.991,1775,2.083,1800,2.813,1813,4.602,1814,4.602,1834,2.304,1835,4.19,1847,2.304,1849,2.304,1858,2.813,1877,2.606,1878,4.38,1879,4.19,1888,2.304,1890,2.304,1891,2.441,1899,2.441,2062,2.813,2074,2.813,2078,3.794,2089,2.813,2091,2.441,2092,2.813,2111,2.813,2112,2.606,2113,4.19,2118,2.606,2119,2.606,2120,2.083,2121,2.441,2127,2.606,2320,2.813,2324,2.813,2325,4.095,2326,2.813,2368,2.813,2369,2.813,2377,2.813,2378,2.813,2383,4.602,2391,3.794,2403,2.441,2404,3.794,2407,4.19,2439,2.606,2440,2.606,2493,2.813,2494,4.095,2526,2.813,2634,2.606,2635,4.095,2693,4.602,2710,5.764,2711,5.764,2712,2.813,2721,2.813,2734,2.813,2735,1.909,2736,3.089,2737,3.089,2738,5.109,2739,7.434,2740,7.876,2741,3.51,2742,5.109,2743,4.498,2744,5.303,2745,3.51,2746,7.763,2747,7.575,2748,6.669,2749,5.109,2750,7.381,2751,4.498,2752,3.089,2753,3.089,2754,3.51,2755,3.089,2756,3.51,2757,3.089,2758,3.51,2759,3.51,2760,3.51,2761,3.51,2762,3.51,2763,3.089,2764,3.51,2765,3.51,2766,3.089,2767,3.51,2768,3.51,2769,3.51,2770,3.51,2771,3.089,2772,3.51,2773,3.089,2774,3.51,2775,3.089,2776,3.089,2777,6.461,2778,3.089,2779,3.51,2780,3.51,2781,4.498,2782,3.51,2783,3.51,2784,3.51,2785,3.51,2786,6.617,2787,3.51,2788,3.51,2789,3.089,2790,3.089,2791,3.51,2792,3.089,2793,3.51,2794,3.51,2795,3.51,2796,3.089,2797,3.51,2798,3.51,2799,4.095,2800,3.089,2801,3.51,2802,2.813,2803,3.089,2804,3.51,2805,3.51,2806,3.089,2807,3.51,2808,3.089,2809,3.089]],["title/miscellaneous/enumerations.html",[2810,2.213,2811,4.699]],["body/miscellaneous/enumerations.html",[6,0.223,16,0.009,19,1.527,20,2.075,23,0.333,202,0.009,203,0.009,242,2.653,640,4.394,647,4.394,670,4.631,673,4.907,674,4.907,676,5.603,677,5.239,678,5.239,2810,4.187,2811,6.211,2812,6.211]],["title/miscellaneous/functions.html",[15,3.503,2810,2.213]],["body/miscellaneous/functions.html",[6,0.264,7,3.542,8,0.234,11,0.738,15,3.542,16,0.01,18,1.1,19,1.859,20,2.528,21,1.765,22,2.777,23,0.254,32,3.062,33,3.062,55,0.43,56,0.601,72,1.066,77,0.321,86,2.262,87,1.752,89,0.678,128,4.767,131,4.269,133,3.097,134,2.398,139,4.767,150,4.324,151,2.736,152,3.542,153,4.007,156,3.542,159,3.542,162,4.007,165,3.062,171,0.475,202,0.008,203,0.008,204,3.448,206,3.203,215,2.916,218,2.936,225,3.103,226,2.339,242,2.577,259,2.821,260,4.141,261,4.269,265,3.203,266,3.542,269,3.203,439,1.964,488,3.889,490,3.542,495,3.889,499,3.728,500,4.007,501,4.068,502,5.592,503,4.007,504,2.715,505,4.007,506,2.528,507,5.089,508,3.542,509,3.889,657,4.269,658,4.269,659,4.269,1188,2.821,1338,4.068,1376,4.498,1377,3.889,1389,3.753,1813,3.753,1814,5.238,1822,5.511,1823,4.325,1827,4.325,2118,5.089,2119,5.089,2120,4.47,2310,3.753,2383,3.753,2386,4.325,2693,3.753,2704,4.325,2773,6.033,2778,6.033,2810,3.203,2813,5.396,2814,7.531,2815,8.358,2816,6.853,2817,6.853,2818,6.853,2819,5.396]],["title/index.html",[23,0.176,304,2.447,2820,2.988]],["body/index.html",[8,0.245,11,0.666,16,0.01,66,2.639,68,1.586,78,0.757,121,1.959,135,0.827,169,0.298,202,0.008,203,0.008,208,2.417,215,1.959,256,2.73,289,3.308,301,1.261,306,4.48,307,4.48,325,2.131,326,1.472,328,3.532,333,2.828,346,2.332,533,2.933,548,2.014,551,2.192,644,3.047,650,4.134,704,4.082,705,3.826,794,3.631,906,4.055,927,4.672,928,3.171,1020,3.631,1051,5.426,1054,3.369,1061,6.252,1180,3.171,1315,5.132,1333,5.132,1433,3.171,1523,3.46,1524,3.46,1532,4.48,1603,5.132,1641,5.132,1681,4.329,1689,5.132,1801,3.308,1809,4.672,1881,4.329,2123,4.63,2332,4.329,2334,3.826,2432,4.329,2525,4.552,2735,3.171,2821,6.332,2822,5.132,2823,5.132,2824,5.83,2825,5.83,2826,5.83,2827,6.705,2828,5.132,2829,3.46,2830,3.46,2831,5.83,2832,5.83,2833,5.83,2834,5.132,2835,4.672,2836,5.83,2837,5.83,2838,4.269,2839,4.082,2840,5.83,2841,5.341,2842,5.83,2843,5.83,2844,6.867,2845,5.83,2846,6.867,2847,6.867,2848,5.83,2849,5.83,2850,5.83,2851,5.132,2852,5.83,2853,7.801,2854,7.801,2855,5.83,2856,4.48,2857,7.193,2858,5.83,2859,5.83,2860,5.83,2861,5.83,2862,5.83,2863,7.801,2864,5.83,2865,5.132,2866,5.83,2867,5.83,2868,5.132,2869,5.83,2870,5.132,2871,7.193,2872,5.83,2873,8.521,2874,5.83,2875,5.83,2876,5.83,2877,5.83,2878,8.145,2879,5.83,2880,5.83,2881,8.145,2882,5.83,2883,5.83,2884,7.193,2885,7.801,2886,7.801,2887,5.83,2888,5.83,2889,5.83,2890,5.132,2891,5.83]],["title/license.html",[304,2.447,2820,2.988,2838,2.213]],["body/license.html",[16,0.008,80,3.727,176,2.746,202,0.008,203,0.008,311,2.036,564,3.573,565,5.116,700,4.091,705,4.312,719,4.878,1061,5.264,1118,4.878,1313,4.569,1718,6.195,2431,4.878,2735,3.573,2838,3.899,2839,3.727,2892,8.213,2893,6.569,2894,7.729,2895,6.569,2896,6.569,2897,6.569,2898,6.569,2899,6.569,2900,6.569,2901,8.961,2902,6.569,2903,6.569,2904,7.729,2905,6.569,2906,6.569,2907,6.569,2908,6.569,2909,6.569,2910,6.569,2911,6.569,2912,6.569,2913,7.729,2914,6.569,2915,6.569,2916,6.569,2917,6.569,2918,6.569,2919,5.264,2920,7.729,2921,7.729,2922,6.569,2923,6.569,2924,6.569,2925,6.569,2926,5.782,2927,6.569,2928,6.569,2929,6.569,2930,6.569,2931,6.569,2932,6.569,2933,6.569,2934,6.569,2935,6.569,2936,6.569,2937,6.569,2938,6.569,2939,6.569,2940,6.569,2941,6.569,2942,6.569,2943,6.569,2944,6.569,2945,6.569,2946,6.569,2947,6.569]],["title/modules.html",[2827,4.836]],["body/modules.html",[16,0.009,202,0.009,203,0.009,2827,5.747]],["title/overview.html",[2948,5.311]],["body/overview.html",[2,1.846,16,0.009,202,0.009,203,0.009,205,0.873,2948,6.286,2949,7.141,2950,6.286]],["title/properties.html",[24,0.755,2890,3.282]],["body/properties.html",[16,0.009,24,1.011,121,2.402,202,0.009,203,0.009,2951,7.148]],["title/miscellaneous/typealiases.html",[2810,2.213,2952,5.337]],["body/miscellaneous/typealiases.html",[6,0.277,8,0.213,11,0.697,16,0.01,18,0.916,19,1.348,20,2.362,21,2.038,23,0.353,27,1.888,55,0.46,58,0.857,72,0.882,138,1.422,169,0.383,202,0.008,203,0.008,212,2.038,227,1.314,237,2.147,303,4.334,304,4.09,312,2.147,314,1.984,317,2.901,324,1.932,355,3.408,373,1.984,419,1.455,492,2.644,523,3.135,640,3.881,647,5.19,655,3.39,663,4.627,664,3.699,665,3.881,666,4.767,667,5.562,668,5.562,669,4.334,670,5.272,671,2.563,672,5.587,819,2.73,1044,4.994,1048,6.004,1052,6.004,1056,4.994,1057,5.486,1058,4.994,1059,5.486,1345,4.251,1525,4.334,1721,3.881,1722,4.666,1730,5.21,1765,3.881,1878,3.881,1879,5.21,1893,6.004,2113,4.334,2122,6.004,2123,3.699,2124,6.004,2125,4.627,2126,4.627,2391,4.627,2810,3.699,2812,7.335,2953,6.232,2954,7.491,2955,6.594,2956,7.491,2957,6.232,2958,6.232,2959,6.232]],["title/unit-test.html",[216,1.371,2856,2.98]],["body/unit-test.html",[5,0.149,7,2.663,15,2.663,16,0.01,17,0.972,59,1.519,78,0.527,202,0.006,203,0.006,206,2.408,216,1.163,288,2.26,289,2.302,301,1.226,346,1.076,377,1.193,490,2.663,523,3.556,524,2.527,540,1.258,580,3.013,640,2.527,894,3.013,986,3.013,1012,2.822,1151,3.013,1152,3.013,1225,3.013,1238,3.252,1244,3.013,1245,3.013,1325,6.073,1345,3.705,1678,3.013,1704,3.013,1705,3.013,1710,3.252,1715,3.252,1721,2.527,1722,2.527,1748,2.822,1774,4.219,1775,4.412,1776,4.402,1777,3.529,1778,2.527,1800,3.252,1813,2.822,1814,2.822,1835,2.822,1858,3.252,1878,4.066,1879,2.822,2062,3.252,2074,3.252,2078,4.207,2089,3.252,2092,3.252,2111,3.252,2113,2.822,2229,3.013,2320,3.252,2325,3.252,2368,3.252,2369,3.252,2377,3.252,2378,3.252,2383,2.822,2391,3.013,2404,3.013,2407,2.822,2435,4.207,2438,4.207,2442,5.247,2494,3.252,2635,3.252,2693,2.822,2710,3.013,2711,3.013,2734,3.252,2737,3.572,2739,5.747,2740,7.948,2743,4.988,2744,3.572,2748,6.78,2750,5.747,2751,4.988,2752,3.572,2753,3.572,2755,4.988,2757,3.572,2763,3.572,2766,3.572,2771,3.572,2775,3.572,2776,3.572,2777,4.988,2781,3.572,2789,4.988,2790,3.572,2792,3.572,2799,3.252,2803,4.988,2808,3.572,2809,3.572,2856,2.527,2865,6.221,2868,4.988,2950,4.988,2960,4.057,2961,9.138,2962,9.138,2963,4.057,2964,4.057,2965,4.057,2966,5.666,2967,4.057,2968,4.057,2969,4.057,2970,4.057,2971,4.057,2972,4.057,2973,5.666,2974,5.666,2975,4.057,2976,5.666,2977,9.039,2978,7.067,2979,5.666,2980,4.057,2981,4.057,2982,4.057,2983,7.067,2984,5.666,2985,5.666,2986,5.666,2987,7.702,2988,4.057,2989,4.057,2990,4.057,2991,7.067,2992,4.057,2993,6.529,2994,4.057,2995,4.057,2996,4.057,2997,4.057,2998,4.057,2999,5.666,3000,4.057,3001,4.057,3002,4.057,3003,4.057,3004,4.057,3005,4.057,3006,4.057,3007,5.666,3008,5.666,3009,5.666,3010,5.666,3011,4.057,3012,4.057,3013,4.057,3014,4.057,3015,5.666,3016,5.666,3017,4.057,3018,5.666,3019,4.057,3020,6.529,3021,4.057,3022,5.666,3023,4.057,3024,4.057,3025,4.057,3026,4.057,3027,4.057,3028,5.666,3029,4.057,3030,5.666,3031,4.057,3032,4.057,3033,4.057,3034,4.057,3035,4.057,3036,4.057,3037,4.057,3038,4.057,3039,4.057,3040,4.057,3041,4.057,3042,4.057,3043,4.057,3044,5.666,3045,4.057,3046,4.057,3047,4.057,3048,4.057,3049,4.057,3050,4.057,3051,4.057,3052,4.057,3053,4.057,3054,4.057,3055,4.057,3056,4.057,3057,5.666,3058,4.057,3059,4.057,3060,5.666,3061,4.057,3062,4.057,3063,5.666,3064,4.057,3065,4.057,3066,4.057]],["title/miscellaneous/variables.html",[2810,2.213,3067,4.699]],["body/miscellaneous/variables.html",[6,0.275,16,0.01,23,0.286,55,0.388,57,2.329,58,1.239,65,2.843,78,1.13,87,1.186,202,0.008,203,0.008,237,1.74,242,3.275,298,4.508,306,3.781,307,4.946,311,2.286,318,2.821,327,3.054,328,3.338,337,4.865,346,1.956,376,1.74,499,4.681,506,3.72,523,3.054,524,4.593,551,2.773,553,5.145,554,4.84,938,4.508,986,4.508,1069,5.524,1211,5.213,1214,3.996,1244,4.508,1245,5.475,1262,5.475,1295,4.222,1296,5.909,1678,4.508,1695,5.524,1696,5.344,1697,5.344,2371,5.344,2525,3.302,2710,4.508,2711,6.525,2712,6.365,2721,6.365,2727,5.344,2728,5.344,2729,5.344,2730,5.344,2731,5.344,2732,5.344,2733,5.344,2799,4.865,2802,6.365,2810,4.376,2955,5.344,3067,5.344,3068,8.708,3069,6.071,3070,6.071,3071,6.071,3072,6.071,3073,6.071,3074,6.071,3075,6.071]],["title/additional-documentation/inspector-metrics.html",[325,0.769,326,0.565,3076,2,3077,2]],["body/additional-documentation/inspector-metrics.html",[0,0.216,1,2.628,11,0.712,12,1.192,16,0.01,18,0.849,19,1.383,21,1.802,25,0.781,27,1.846,28,0.849,56,0.971,57,1.008,58,1.075,59,1.124,62,0.463,65,1.827,66,3.144,67,1.766,71,1.579,72,0.904,77,0.202,78,1.125,125,0.245,134,2.035,138,1.038,140,0.919,147,0.463,169,0.199,170,0.668,171,0.485,174,1.51,176,1.385,184,1.962,202,0.006,203,0.006,208,1.852,210,2.701,211,2.414,212,2.487,213,1.51,214,3.476,215,2.556,218,2.998,224,1.904,227,1.545,236,1.929,237,1.99,242,1.467,244,2.56,248,1.626,252,2.038,256,1.827,286,1.929,301,1.503,302,3.127,306,2.429,307,2.429,311,2.271,312,2.288,314,2.035,315,2.535,318,1.957,324,2.423,325,2.029,326,1.526,333,1.892,342,2.338,346,2.073,350,1.604,351,2.673,356,1.709,359,1.276,364,2.198,365,2.198,369,1.178,377,2.448,378,1.904,383,1.385,391,2.713,393,2.122,400,0.958,408,3.126,439,2.445,495,3.127,498,3.833,499,3.778,506,1.827,508,4.195,521,2.122,525,1.766,537,1.385,556,2.414,568,1.852,587,2.896,604,3.126,635,3.126,637,3.617,649,2.038,666,2.315,669,2.713,683,2.315,694,1.962,704,2.213,717,1.962,732,2.213,776,3.539,794,3.432,795,2.495,897,3.432,928,2.998,938,4.092,1023,4.092,1051,2.713,1134,1.962,1192,2.998,1205,3.833,1228,1.962,1230,2.56,1246,4.445,1262,2.896,1295,2.713,1326,2.122,1332,3.271,1357,2.122,1359,2.56,1363,2.713,1364,2.713,1371,3.126,1445,3.126,1523,2.315,1524,2.315,1531,2.713,1557,2.213,1692,5.626,1718,3.126,1724,2.713,1752,4.445,1755,4.745,1801,3.941,1867,2.713,1882,4.092,1883,3.126,1888,3.617,1889,4.745,1895,3.126,1899,3.833,2067,3.433,2069,3.433,2123,2.315,2256,3.126,2332,2.896,2350,3.433,2524,3.126,2525,2.122,2591,3.433,2634,4.092,2677,6.095,2735,2.122,2820,3.126,2821,3.433,2822,3.433,2823,3.433,2828,3.433,2829,2.315,2830,2.315,2834,3.433,2838,2.315,2839,2.213,2841,4.092,2844,3.433,2846,3.433,2856,2.429,2870,3.433,3078,2.429,3079,2.429,3080,2.429,3081,2.429,3082,3.432,3083,3.9,3084,5.511,3085,3.9,3086,3.9,3087,3.433,3088,3.9,3089,3.9,3090,3.9,3091,3.9,3092,3.9,3093,3.9,3094,3.9,3095,3.9,3096,5.511,3097,3.9,3098,5.511,3099,3.9,3100,3.9,3101,3.9,3102,3.9,3103,3.9,3104,3.9,3105,5.511,3106,3.126,3107,2.56,3108,3.126,3109,3.433,3110,3.433,3111,3.9,3112,3.9,3113,3.9,3114,3.9,3115,3.9,3116,3.9,3117,3.9,3118,3.9,3119,3.9,3120,3.9,3121,3.9,3122,3.9,3123,3.9,3124,3.9,3125,3.9,3126,3.433,3127,3.9,3128,3.126,3129,3.9,3130,3.9,3131,3.126,3132,3.9,3133,3.9,3134,3.9,3135,3.9,3136,3.9,3137,5.511,3138,3.9,3139,5.511,3140,3.9,3141,3.9,3142,5.511,3143,3.9,3144,3.9,3145,3.9,3146,3.9,3147,3.9,3148,3.9,3149,3.9,3150,3.9,3151,4.851,3152,5.511,3153,3.9,3154,3.9,3155,3.9,3156,3.9,3157,5.511,3158,3.9,3159,5.511,3160,3.9,3161,3.9,3162,3.9,3163,3.9,3164,3.9,3165,3.9,3166,3.9,3167,3.9,3168,3.9,3169,3.9,3170,3.9,3171,5.511,3172,3.9,3173,5.511,3174,3.9,3175,5.511,3176,3.9,3177,3.9,3178,3.9,3179,3.9,3180,3.9,3181,3.9,3182,3.9,3183,3.9,3184,3.9,3185,3.9,3186,6.391,3187,3.9,3188,5.511,3189,5.511,3190,3.9,3191,3.9,3192,3.9,3193,3.9,3194,3.9,3195,3.9,3196,3.9,3197,3.9,3198,3.9,3199,3.9,3200,3.9,3201,3.9,3202,3.9,3203,4.851,3204,3.9,3205,3.433,3206,6.945,3207,3.9,3208,3.9,3209,3.9,3210,3.9]],["title/additional-documentation/inspector-carbon.html",[306,2,325,0.769,3076,2,3077,2]],["body/additional-documentation/inspector-carbon.html",[16,0.01,17,1.947,18,0.708,19,1.55,30,2.457,57,1.497,62,0.991,68,2.211,69,1.946,70,2.407,71,1.66,78,1.119,121,1.946,125,0.254,140,0.86,202,0.008,203,0.008,211,2.537,227,1.221,306,5.535,307,4.844,308,5.061,311,2.519,315,2.393,325,2.129,326,1.555,327,2.914,328,2.622,330,3.286,333,2.809,341,5.061,346,2.357,347,6.653,358,1.749,365,2.31,377,2.107,378,2.001,383,2.057,386,1.536,525,3.243,537,2.057,539,2.242,544,2.914,548,2.001,551,2.178,568,1.946,579,4.065,651,3.607,671,2.382,867,3.15,928,3.897,1054,2.712,1332,4.252,1363,4.028,1364,4.028,1377,3.286,1681,4.3,1706,3.801,1801,3.286,2525,3.15,2735,3.15,2829,3.437,2830,3.437,2838,3.437,2839,3.286,2856,3.607,3078,3.607,3079,3.607,3080,3.607,3081,3.607,3082,3.607,3107,3.801,3128,4.641,3131,4.641,3211,4.028,3212,4.641,3213,5.791,3214,8.126,3215,5.791,3216,7.164,3217,5.791,3218,5.791,3219,5.098,3220,5.098,3221,5.098,3222,5.098,3223,4.3,3224,4.3,3225,4.3,3226,4.3,3227,4.3,3228,5.41,3229,4.028,3230,4.028]],["title/additional-documentation/inspector-csv.html",[325,0.769,704,1.822,3076,2,3077,2]],["body/additional-documentation/inspector-csv.html",[5,0.29,8,0.174,11,0.694,16,0.01,17,1.443,18,0.898,19,1.814,20,2.228,21,2.401,27,0.885,30,1.49,55,0.386,57,2.295,58,1.225,62,0.871,66,2.997,68,1.998,69,1.18,70,1.718,71,1.465,77,0.187,78,1.079,125,0.214,133,2.102,136,0.147,138,1.142,140,0.859,148,1.18,174,1.36,202,0.006,203,0.006,216,1.006,224,1.213,227,1.696,237,1.006,242,2.645,248,0.779,286,0.799,301,0.76,309,2.084,312,1.006,314,1.118,315,2.103,318,1.247,323,1.247,324,2.454,325,1.926,326,1.45,328,1.59,330,1.992,332,1.703,333,1.703,340,1.672,346,2.24,352,1.538,353,1.538,354,1.584,355,1.49,356,3.319,357,1.247,358,1.06,370,2.344,373,2.52,377,2.159,386,2.133,428,2.9,492,2.169,525,2.314,539,2.333,544,1.767,546,1.538,548,1.766,551,1.922,558,2.084,559,1.992,560,2.78,561,2.442,562,1.992,563,1.767,564,1.91,565,2.187,566,2.305,567,1.91,568,2.364,574,2.722,579,3.15,612,1.835,637,3.355,650,1.703,651,2.187,652,2.305,655,4.122,662,3.795,664,2.084,665,4.572,670,2.305,671,2.478,672,4.604,673,4.892,674,2.442,676,3.555,679,4.836,681,5.348,682,2.607,683,2.084,684,3.795,685,1.91,686,2.607,687,2.607,688,4.475,689,2.607,690,5.972,691,3.795,692,2.607,693,4.344,694,3.032,695,2.607,696,2.607,697,2.607,698,2.187,699,2.607,700,3.183,701,3.795,702,2.607,703,2.607,704,4.823,705,3.355,708,4.475,709,2.607,710,2.607,711,2.607,712,2.187,713,2.187,736,3.033,747,2.305,757,3.355,799,2.607,824,2.607,867,2.78,893,4.892,900,2.442,905,4.096,908,2.814,910,5.305,916,2.814,918,2.814,928,1.91,943,2.814,944,2.814,945,2.814,946,4.096,947,2.814,948,2.814,949,4.096,950,2.814,951,2.814,953,2.814,954,2.442,1058,4.096,1165,3.795,1172,3.033,1212,2.305,1325,3.355,1332,3.033,1377,1.992,1530,2.305,1557,2.9,1706,2.305,1774,2.9,1801,2.9,1867,5.106,2041,3.795,2080,4.096,2334,3.355,2339,5.305,2525,2.78,2636,4.096,2677,4.096,2735,1.91,2736,3.091,2829,2.084,2830,2.084,2838,2.084,2839,1.992,2919,2.814,3078,2.187,3079,2.187,3080,2.187,3081,2.187,3082,2.187,3107,3.355,3108,4.096,3205,3.091,3211,2.442,3223,2.607,3224,2.607,3225,2.607,3226,2.607,3227,2.607,3228,4.604,3229,2.442,3230,2.442,3231,4.499,3232,5.111,3233,5.111,3234,5.111,3235,5.111,3236,5.111,3237,5.111,3238,5.111,3239,5.111,3240,5.111,3241,5.111,3242,5.111,3243,5.111,3244,5.111,3245,5.111,3246,4.499,3247,6.619,3248,5.111,3249,5.111,3250,4.499,3251,5.111,3252,5.111,3253,5.111,3254,5.111,3255,3.511,3256,3.511,3257,3.511,3258,3.511,3259,3.511,3260,3.511,3261,3.511,3262,3.511,3263,3.511,3264,3.511,3265,3.511,3266,3.511,3267,3.511,3268,3.511,3269,3.511,3270,3.511,3271,3.511,3272,3.511,3273,3.511,3274,3.511,3275,3.511,3276,3.511,3277,3.511,3278,3.511,3279,3.511,3280,3.511,3281,3.511,3282,3.511,3283,3.511,3284,3.511,3285,3.511,3286,3.511,3287,3.511,3288,3.511,3289,3.511,3290,3.511,3291,3.511,3292,3.511,3293,3.511,3294,3.511,3295,3.511,3296,3.511,3297,3.511,3298,3.511,3299,3.511,3300,3.511,3301,3.511,3302,3.511,3303,3.511,3304,3.511,3305,3.511,3306,3.511,3307,3.511,3308,3.511,3309,3.511,3310,3.511,3311,3.511,3312,3.511,3313,3.511,3314,3.511,3315,3.511,3316,3.511,3317,3.511,3318,3.511,3319,3.511,3320,3.511,3321,3.511,3322,3.511,3323,3.511,3324,3.511,3325,3.511,3326,3.511,3327,3.511,3328,3.511,3329,3.511,3330,3.511,3331,3.511,3332,3.511,3333,3.511,3334,3.511,3335,3.511,3336,3.511,3337,3.511,3338,3.511,3339,3.511,3340,3.511,3341,3.511,3342,3.511,3343,3.511,3344,3.511,3345,3.511,3346,3.511,3347,3.511,3348,3.511,3349,3.511,3350,3.091,3351,3.511,3352,3.511,3353,3.511,3354,3.511,3355,3.511,3356,3.511,3357,3.511,3358,3.511,3359,3.511,3360,3.511,3361,3.511,3362,3.511,3363,3.511,3364,3.511,3365,3.511,3366,3.511,3367,3.511,3368,3.511,3369,3.511,3370,3.511,3371,3.511,3372,3.511,3373,3.511,3374,3.511,3375,3.511,3376,3.511,3377,3.511,3378,3.511,3379,3.511,3380,3.511,3381,3.511,3382,3.511,3383,3.511,3384,3.511,3385,3.511,3386,3.511,3387,3.511,3388,3.511,3389,3.511,3390,3.511,3391,3.511,3392,3.511,3393,3.511,3394,3.511,3395,3.511,3396,3.511,3397,3.511,3398,3.511,3399,3.511,3400,3.511,3401,3.511,3402,3.511,3403,3.511,3404,3.511,3405,3.511,3406,3.511,3407,3.511,3408,3.511,3409,3.511,3410,3.511,3411,3.511,3412,3.511,3413,3.511,3414,3.511,3415,3.511,3416,3.511,3417,3.511,3418,3.511,3419,3.511,3420,3.511,3421,3.511,3422,3.511,3423,3.511,3424,3.511,3425,3.511,3426,3.511,3427,3.511,3428,3.511,3429,3.511,3430,3.511,3431,3.511,3432,3.511,3433,3.511,3434,3.511,3435,3.511,3436,3.511,3437,3.511,3438,3.511,3439,3.511,3440,3.511,3441,3.511,3442,3.511,3443,3.511,3444,3.511,3445,3.511,3446,3.511,3447,3.511,3448,3.511,3449,3.511,3450,3.511,3451,3.511,3452,3.511,3453,3.511,3454,3.511,3455,3.511,3456,3.511,3457,3.511,3458,3.511,3459,3.511,3460,3.511,3461,3.511,3462,3.511,3463,3.511,3464,3.511,3465,3.511,3466,3.511,3467,3.511,3468,3.511,3469,3.511,3470,3.511,3471,3.511,3472,3.511,3473,3.511,3474,3.511,3475,3.511,3476,3.511,3477,3.511,3478,3.511,3479,3.511,3480,3.511,3481,3.511,3482,3.511,3483,3.511,3484,3.511,3485,3.511,3486,3.511,3487,3.511,3488,3.511,3489,3.511,3490,3.511,3491,3.511,3492,3.511,3493,3.511,3494,3.511,3495,3.511,3496,3.511,3497,3.511,3498,3.511,3499,3.511,3500,3.511,3501,3.511,3502,3.511,3503,3.511,3504,3.511,3505,3.511,3506,3.511,3507,3.511,3508,3.511,3509,3.511,3510,3.511,3511,3.511,3512,3.511,3513,3.511,3514,3.511,3515,3.511,3516,3.511,3517,3.511,3518,3.511,3519,3.511,3520,3.511,3521,3.511,3522,3.511,3523,3.511,3524,3.511,3525,3.511,3526,3.511,3527,3.511,3528,3.511,3529,3.511]],["title/additional-documentation/inspector-elasticsearch.html",[325,0.769,1051,2.233,3076,2,3077,2]],["body/additional-documentation/inspector-elasticsearch.html",[11,0.687,16,0.01,17,1.717,18,0.877,19,1.648,21,2.097,23,0.229,27,1.616,30,2.065,55,0.377,57,1.258,59,1.128,62,0.904,68,2.073,69,1.636,70,2.154,71,1.837,72,0.907,78,1.092,121,1.636,125,0.257,140,0.909,147,0.85,155,2.648,161,2.449,202,0.007,203,0.007,210,1.729,227,1.027,248,1.423,286,1.108,289,3.638,301,1.053,303,4.459,315,2.462,317,2.776,325,2.099,326,1.523,327,3.607,328,2.204,330,2.762,333,3.11,341,3.993,342,2.065,346,2.335,358,1.47,373,2.282,376,2.054,377,2.391,378,2.215,383,2.277,386,1.7,398,3.478,409,2.449,419,1.497,539,1.885,544,2.449,548,1.681,551,1.83,568,1.636,579,3.747,651,3.031,671,2.002,685,2.648,720,1.942,819,2.132,867,2.648,907,5.138,928,3.487,929,5.745,1045,7.111,1046,6.629,1047,6.707,1048,6.345,1049,4.285,1051,6.149,1052,5.138,1054,3.003,1055,6.707,1063,5.643,1069,4.459,1070,4.285,1071,4.285,1072,5.643,1073,4.285,1074,4.285,1075,4.285,1076,4.285,1077,4.285,1110,4.285,1112,4.285,1332,3.805,1377,2.762,1433,2.648,1681,4.76,1706,3.195,1801,3.638,2525,2.648,2735,2.648,2829,2.889,2830,2.889,2835,3.901,2838,2.889,2839,2.762,3078,3.031,3079,3.031,3080,3.031,3081,3.031,3082,3.031,3107,4.208,3211,3.385,3212,3.901,3223,3.614,3224,3.614,3225,3.614,3226,3.614,3227,3.614,3228,4.986,3229,3.385,3230,3.385,3530,6.411,3531,6.411,3532,4.867,3533,4.867,3534,4.867,3535,6.411,3536,4.867,3537,4.867,3538,4.867,3539,6.411,3540,6.411,3541,6.411,3542,6.411,3543,4.867,3544,4.867,3545,4.867,3546,6.411,3547,4.867,3548,6.411,3549,4.867,3550,4.867,3551,4.867]],["title/additional-documentation/inspector-influx.html",[325,0.769,1523,1.906,3076,2,3077,2]],["body/additional-documentation/inspector-influx.html",[16,0.01,17,1.767,30,2.192,57,1.336,59,1.42,62,0.613,68,2.122,69,1.736,70,2.24,71,2.114,78,1.126,125,0.251,140,0.897,202,0.007,203,0.007,211,2.92,214,3.626,227,1.09,256,3.122,258,2.507,286,1.517,289,2.932,301,1.597,311,2.417,315,2.409,324,2.502,325,2.093,326,1.499,327,3.354,328,2.339,330,2.932,333,2.507,341,3.218,342,2.192,346,2.283,352,2.264,353,2.92,356,2.92,357,1.835,358,1.56,376,1.481,377,1.96,378,2.693,383,1.835,386,1.768,498,4.636,537,1.835,539,2.001,544,2.6,548,1.785,551,1.943,563,3.713,568,1.736,579,3.857,651,3.218,671,2.125,867,2.811,928,3.626,1046,5.479,1054,2.42,1326,2.811,1332,3.956,1363,3.594,1364,3.594,1377,2.932,1433,2.811,1521,5.443,1522,4.789,1523,5.056,1524,3.067,1532,5.147,1541,5.132,1590,3.837,1602,4.548,1624,3.837,1647,4.548,1706,3.391,1801,2.932,1867,5.132,2195,4.141,2229,4.949,2328,4.141,2335,6.495,2436,3.837,2525,2.811,2735,2.811,2829,3.067,2830,3.956,2838,3.067,2839,2.932,2847,4.548,2856,4.152,3078,3.218,3079,3.218,3080,3.218,3081,3.218,3082,4.596,3106,5.342,3107,4.375,3108,5.914,3109,5.868,3110,5.868,3128,4.141,3131,4.141,3211,3.594,3212,4.141,3219,4.548,3220,4.548,3221,4.548,3222,4.548,3223,3.837,3224,3.837,3225,3.837,3226,3.837,3227,3.837,3228,5.132,3229,3.594,3230,3.594,3552,5.167,3553,6.665,3554,5.167,3555,5.167,3556,5.167,3557,6.665,3558,5.167,3559,6.665,3560,5.167,3561,5.167,3562,5.167,3563,6.665,3564,6.665,3565,5.167,3566,5.167,3567,5.167,3568,5.167,3569,5.167,3570,5.167,3571,5.167,3572,5.167,3573,5.167,3574,5.167,3575,5.167,3576,5.167,3577,5.167,3578,5.167,3579,5.167,3580,5.167,3581,5.167,3582,5.167,3583,5.167,3584,5.167,3585,5.167,3586,6.665,3587,5.167]],["title/additional-documentation/inspector-prometheus.html",[325,0.769,2123,1.906,3076,2,3077,2]],["body/additional-documentation/inspector-prometheus.html",[11,0.528,12,1.067,16,0.01,17,1.834,19,1.399,30,2.744,55,0.259,57,1.275,59,1.138,62,0.585,65,3.029,66,2.233,68,2.22,69,1.657,70,1.657,71,1.853,77,0.181,78,1.133,125,0.251,140,0.888,147,0.767,148,1.657,151,2.059,202,0.007,203,0.007,214,3.925,219,1.329,227,1.615,240,3.518,301,1.657,308,5.179,315,2.068,324,2.005,325,2.091,326,1.596,328,2.233,333,2.392,339,3.254,340,1.613,341,4.494,346,2.316,377,2.252,378,2.234,386,1.715,525,2.233,539,1.91,548,2.492,551,2.99,563,2.481,574,2.66,671,2.967,714,4.028,795,2.233,928,2.683,941,4.802,988,5.438,1013,3.237,1122,3.838,1332,3.838,1377,3.67,1433,2.683,1541,3.43,1711,3.953,1716,4.028,1801,3.67,1867,3.43,1881,4.802,2041,4.802,2123,5.182,2125,3.662,2171,3.662,2172,3.662,2173,3.662,2206,3.953,2273,3.662,2326,6.138,2327,4.341,2328,5.782,2332,5.358,2342,4.341,2344,4.341,2525,3.925,2636,3.953,2674,4.341,2735,2.683,2829,2.927,2830,2.927,2835,3.953,2839,2.799,2856,3.072,2919,3.953,2926,5.693,3078,3.072,3079,3.072,3080,3.072,3081,3.072,3082,3.072,3106,3.953,3107,4.245,3126,4.341,3203,4.341,3211,3.43,3228,5.675,3229,4.498,3230,4.498,3231,4.341,3246,4.341,3250,5.693,3350,4.341,3588,4.932,3589,4.932,3590,6.467,3591,6.467,3592,4.932,3593,4.932,3594,4.932,3595,4.932,3596,6.467,3597,6.467,3598,6.467,3599,6.467,3600,6.467,3601,6.467,3602,6.467,3603,6.467,3604,6.467,3605,6.467,3606,6.467,3607,6.467,3608,6.467,3609,6.467,3610,4.932,3611,4.932,3612,4.932,3613,4.932,3614,4.932,3615,4.932,3616,4.932,3617,4.932,3618,4.932,3619,4.932,3620,4.932,3621,4.932,3622,4.932,3623,4.932,3624,4.932,3625,4.932,3626,6.467,3627,4.932,3628,4.932,3629,6.467,3630,4.932,3631,4.932,3632,4.932,3633,4.932,3634,4.932,3635,4.932,3636,4.932,3637,4.932,3638,4.932,3639,4.932,3640,4.932,3641,4.932,3642,4.932,3643,4.932,3644,4.932,3645,4.932,3646,4.932,3647,4.932,3648,4.932,3649,4.932,3650,4.932,3651,4.932,3652,4.932,3653,6.467,3654,4.932,3655,4.932,3656,4.932,3657,4.932]],["title/additional-documentation/inspector-vm.html",[325,0.769,2841,2.384,3076,2,3077,2]],["body/additional-documentation/inspector-vm.html",[11,0.708,16,0.01,18,1.02,62,0.742,66,2.834,68,1.703,78,1.083,125,0.219,140,0.863,202,0.008,203,0.008,227,1.32,240,3.405,311,1.94,315,2.152,325,1.999,326,1.322,333,3.036,346,1.66,377,2.209,926,4.648,1332,4.458,1548,4.736,1801,3.552,1844,4.354,2080,5.017,2222,5.017,2495,5.51,2506,5.51,2524,6.02,2525,4.086,2526,6.02,2735,3.405,2796,6.612,2800,6.612,2802,6.45,2806,6.612,2829,3.715,2830,3.715,2839,3.552,2841,6.197,2851,5.51,3078,3.899,3079,3.899,3080,3.899,3081,3.899,3082,3.899,3087,5.51,3151,5.51,3658,6.259,3659,8.047,3660,6.259,3661,6.259,3662,6.259,3663,6.259,3664,6.259,3665,6.259,3666,7.511,3667,6.259,3668,6.259,3669,6.259,3670,6.259,3671,6.259,3672,6.259,3673,6.259,3674,8.345,3675,6.259,3676,6.259,3677,6.259,3678,6.259,3679,6.259,3680,6.259,3681,6.259,3682,6.259,3683,6.259,3684,6.259]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["0",{"_index":59,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["0.0.0",{"_index":2951,"title":{},"body":{"properties.html":{}}}],["0.0.0.0",{"_index":3600,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["0.005",{"_index":279,"title":{},"body":{"classes/Buckets.html":{}}}],["0.01",{"_index":280,"title":{},"body":{"classes/Buckets.html":{},"classes/Percentiles.html":{}}}],["0.025",{"_index":281,"title":{},"body":{"classes/Buckets.html":{}}}],["0.05",{"_index":282,"title":{},"body":{"classes/Buckets.html":{},"classes/Percentiles.html":{}}}],["0.1",{"_index":283,"title":{},"body":{"classes/Buckets.html":{}}}],["0.25",{"_index":284,"title":{},"body":{"classes/Buckets.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5",{"_index":285,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.75",{"_index":2096,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.9",{"_index":2097,"title":{},"body":{"classes/Percentiles.html":{}}}],["0.95",{"_index":2098,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.98",{"_index":2099,"title":{},"body":{"classes/Percentiles.html":{}}}],["0.99",{"_index":2100,"title":{},"body":{"classes/Percentiles.html":{}}}],["0.999",{"_index":2101,"title":{},"body":{"classes/Percentiles.html":{}}}],["0/0",{"_index":2977,"title":{},"body":{"unit-test.html":{}}}],["0/1",{"_index":2781,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["0/11",{"_index":3032,"title":{},"body":{"unit-test.html":{}}}],["0/19",{"_index":2971,"title":{},"body":{"unit-test.html":{}}}],["0/2",{"_index":3022,"title":{},"body":{"unit-test.html":{}}}],["0/20",{"_index":3031,"title":{},"body":{"unit-test.html":{}}}],["0/22",{"_index":3012,"title":{},"body":{"unit-test.html":{}}}],["0/25",{"_index":2970,"title":{},"body":{"unit-test.html":{}}}],["0/4",{"_index":3035,"title":{},"body":{"unit-test.html":{}}}],["0/41",{"_index":3040,"title":{},"body":{"unit-test.html":{}}}],["0/44",{"_index":3039,"title":{},"body":{"unit-test.html":{}}}],["0/5",{"_index":3044,"title":{},"body":{"unit-test.html":{}}}],["0/6",{"_index":3021,"title":{},"body":{"unit-test.html":{}}}],["0/7",{"_index":2975,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":286,"title":{},"body":{"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["1.0",{"_index":1185,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["1.0.0",{"_index":3593,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["1.3",{"_index":1942,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["1.5",{"_index":2040,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["1/1",{"_index":2740,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/2",{"_index":2786,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2752,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/4",{"_index":3008,"title":{},"body":{"unit-test.html":{}}}],["10",{"_index":289,"title":{},"body":{"classes/Buckets.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{},"unit-test.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["100",{"_index":1325,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["100.0",{"_index":1311,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["1000",{"_index":353,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{}}}],["10000",{"_index":253,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["1000000",{"_index":513,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["100000000",{"_index":3187,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["1000000000",{"_index":3159,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["1000192",{"_index":3629,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["100ms",{"_index":3188,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["102",{"_index":3161,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["10_000",{"_index":3578,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["11",{"_index":2865,"title":{},"body":{"index.html":{},"unit-test.html":{}}}],["11/11",{"_index":2743,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["11/12",{"_index":3028,"title":{},"body":{"unit-test.html":{}}}],["11/16",{"_index":2981,"title":{},"body":{"unit-test.html":{}}}],["12",{"_index":2432,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["12/13",{"_index":2988,"title":{},"body":{"unit-test.html":{}}}],["12/14",{"_index":3065,"title":{},"body":{"unit-test.html":{}}}],["12/30",{"_index":3013,"title":{},"body":{"unit-test.html":{}}}],["12345",{"_index":3145,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["127.0.0.1",{"_index":3242,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["127.0.0.2",{"_index":3244,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["127.0.0.3",{"_index":3246,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["127.0.0.4",{"_index":3126,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["13",{"_index":2866,"title":{},"body":{"index.html":{}}}],["13/13",{"_index":2976,"title":{},"body":{"unit-test.html":{}}}],["13/15",{"_index":3025,"title":{},"body":{"unit-test.html":{}}}],["13/19",{"_index":2776,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["13/20",{"_index":3046,"title":{},"body":{"unit-test.html":{}}}],["13/31",{"_index":2760,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":2867,"title":{},"body":{"index.html":{}}}],["14/14",{"_index":2742,"title":{},"body":{"coverage.html":{}}}],["14/16",{"_index":2996,"title":{},"body":{"unit-test.html":{}}}],["14/32",{"_index":2756,"title":{},"body":{"coverage.html":{}}}],["148/150",{"_index":2968,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":1180,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["15/15",{"_index":2762,"title":{},"body":{"coverage.html":{}}}],["15/33",{"_index":2754,"title":{},"body":{"coverage.html":{}}}],["153/157",{"_index":2964,"title":{},"body":{"unit-test.html":{}}}],["154/167",{"_index":3056,"title":{},"body":{"unit-test.html":{}}}],["158/171",{"_index":3053,"title":{},"body":{"unit-test.html":{}}}],["159/174",{"_index":2994,"title":{},"body":{"unit-test.html":{}}}],["15s",{"_index":3613,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["16",{"_index":2868,"title":{},"body":{"index.html":{},"unit-test.html":{}}}],["16/16",{"_index":2779,"title":{},"body":{"coverage.html":{}}}],["16/34",{"_index":2785,"title":{},"body":{"coverage.html":{}}}],["16/44",{"_index":3006,"title":{},"body":{"unit-test.html":{}}}],["163/178",{"_index":2989,"title":{},"body":{"unit-test.html":{}}}],["17",{"_index":2869,"title":{},"body":{"index.html":{}}}],["17/17",{"_index":3026,"title":{},"body":{"unit-test.html":{}}}],["17/34",{"_index":2758,"title":{},"body":{"coverage.html":{}}}],["18/19",{"_index":3057,"title":{},"body":{"unit-test.html":{}}}],["18/20",{"_index":2982,"title":{},"body":{"unit-test.html":{}}}],["18/23",{"_index":2998,"title":{},"body":{"unit-test.html":{}}}],["18/47",{"_index":3003,"title":{},"body":{"unit-test.html":{}}}],["19/27",{"_index":3001,"title":{},"body":{"unit-test.html":{}}}],["1999872",{"_index":3632,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["2",{"_index":2153,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["2.5",{"_index":287,"title":{},"body":{"classes/Buckets.html":{}}}],["2.6.0",{"_index":3531,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["2/19",{"_index":3004,"title":{},"body":{"unit-test.html":{}}}],["2/2",{"_index":2750,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["2/3",{"_index":3029,"title":{},"body":{"unit-test.html":{}}}],["2/4",{"_index":3009,"title":{},"body":{"unit-test.html":{}}}],["2/5",{"_index":3051,"title":{},"body":{"unit-test.html":{}}}],["2/6",{"_index":3048,"title":{},"body":{"unit-test.html":{}}}],["20",{"_index":2433,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["20/22",{"_index":3018,"title":{},"body":{"unit-test.html":{}}}],["20/35",{"_index":2798,"title":{},"body":{"coverage.html":{}}}],["2000128",{"_index":3634,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["201810201900_metrics.csv",{"_index":3437,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.005\",14",{"_index":3312,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.01\",14",{"_index":3313,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.025\",14",{"_index":3314,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.05\",14",{"_index":3315,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.1\",14",{"_index":3316,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.25\",14",{"_index":3317,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.5\",14",{"_index":3318,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_1\",14",{"_index":3319,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_10\",14",{"_index":3322,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_2.5\",14",{"_index":3320,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_5\",14",{"_index":3321,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_inf\",40",{"_index":3323,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"count\",40",{"_index":3324,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"m15_rate\",38",{"_index":3325,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"m1_rate\",38",{"_index":3326,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"m5_rate\",38",{"_index":3327,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"max\",2000128",{"_index":3328,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"mean\",700012.8",{"_index":3329,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"mean_rate\",26.455026455026456",{"_index":3330,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"min\",0",{"_index":3331,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p50\",999936",{"_index":3332,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p75\",1000192",{"_index":3333,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p95\",2000115.2",{"_index":3334,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p98\",2000128",{"_index":3335,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p99\",2000128",{"_index":3336,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p999\",2000128",{"_index":3337,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"stddev\",563876.4091414141",{"_index":3338,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"sum\",28000512csv",{"_index":3339,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.005\",0",{"_index":3256,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.01\",0",{"_index":3257,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.025\",0",{"_index":3258,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.05\",0",{"_index":3259,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.1\",0",{"_index":3260,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.25\",0",{"_index":3261,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.5\",0",{"_index":3262,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_1\",0",{"_index":3263,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_10\",0",{"_index":3266,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_2.5\",0",{"_index":3264,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_5\",0",{"_index":3265,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_inf\",10",{"_index":3267,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"count\",10",{"_index":3268,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"m15_rate\",9",{"_index":3269,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"m1_rate\",9",{"_index":3270,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"m5_rate\",9",{"_index":3271,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"max\",2999808",{"_index":3272,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"mean\",1399961.6",{"_index":3273,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"mean_rate\",6.622515994912551",{"_index":3274,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"min\",999936",{"_index":3275,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p50\",999936",{"_index":3276,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p75\",2000128",{"_index":3277,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p95\",2999808",{"_index":3278,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p98\",2999808",{"_index":3279,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p99\",2999808",{"_index":3280,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p999\",2999808",{"_index":3281,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"stddev\",699209.9735144262",{"_index":3282,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"sum\",13999616",{"_index":3283,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5",{"_index":3284,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5",{"_index":3285,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5",{"_index":3286,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5",{"_index":3287,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5",{"_index":3288,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5",{"_index":3289,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5",{"_index":3290,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_1\",5",{"_index":3291,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_10\",5",{"_index":3294,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5",{"_index":3292,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_5\",5",{"_index":3293,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_inf\",20",{"_index":3295,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"count\",20",{"_index":3296,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"m15_rate\",19",{"_index":3297,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"m1_rate\",19",{"_index":3298,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"m5_rate\",19",{"_index":3299,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"max\",2000128",{"_index":3300,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"mean\",850022.4",{"_index":3301,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"mean_rate\",13.227513227513228",{"_index":3302,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"min\",0",{"_index":3303,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p50\",999936",{"_index":3304,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p75\",1000192",{"_index":3305,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p95\",2000128",{"_index":3306,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p98\",2000128",{"_index":3307,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p99\",2000128",{"_index":3308,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p999\",2000128",{"_index":3309,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"stddev\",587171.928872124",{"_index":3310,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"sum\",17000448",{"_index":3311,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.005\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3408,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.01\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3409,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.025\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3410,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.05\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3411,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3412,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.25\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3413,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3414,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3415,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_10\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3418,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_2.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3416,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3417,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3419,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"count\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3420,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3421,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3422,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3423,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"max\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3424,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"mean\",800006.4,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3425,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"mean_rate\",26.19515279863145,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3426,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3427,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3428,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p75\",1000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3429,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p95\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3430,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p98\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3431,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p99\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3432,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p999\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3433,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"stddev\",516413.0421795807,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3434,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"sum\",32000256,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"example",{"_index":3435,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.005\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3352,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.01\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3353,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.025\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3354,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.05\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3355,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3356,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.25\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3357,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3358,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3359,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_10\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3362,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_2.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3360,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3361,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3363,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3364,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3365,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3366,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3367,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"max\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3368,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"mean\",1000012.8,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3369,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"mean_rate\",6.565989008975633,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3370,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3371,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p50\",1000064,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3372,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p75\",1000192,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3373,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p95\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3374,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p98\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3375,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p99\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3376,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p999\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3377,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"stddev\",471374.3671220714,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3378,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"sum\",10000128,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3379,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3380,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3381,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3382,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3383,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3384,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3385,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3386,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3387,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_10\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3390,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3388,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3389,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3391,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3392,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3393,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3394,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3395,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"max\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3396,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"mean\",900006.4,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3397,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"mean_rate\",13.106160994487947,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3398,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3399,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3400,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p75\",1000192,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3401,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p95\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3402,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p98\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3403,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p99\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3404,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p999\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3405,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"stddev\",852194.9951649873,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3406,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"sum\",18000128,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3407,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.005\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3495,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.01\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3496,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.025\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3497,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.05\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3498,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3499,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.25\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3500,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3501,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3502,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_10\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3505,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_2.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3503,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3504,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3506,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"count\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3507,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3508,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3509,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3510,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3511,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"mean\",899987.2,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3512,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"mean_rate\",26.2639516212128,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3513,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"min\",0,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3514,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3515,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p75\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3516,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p95\",2950067.1999999955,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3517,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3518,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3519,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3520,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"stddev\",545386.4756426474,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3521,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"sum\",35999488,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"multi",{"_index":3522,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.005\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3439,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.01\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3440,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.025\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3441,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.05\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3442,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.1\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3443,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.25\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3444,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.5\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3445,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_1\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3446,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_10\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3449,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_2.5\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3447,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_5\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3448,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",\"metric\",\"127.0.0.1",{"_index":3450,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",\"metric\",\"127.0.0.1",{"_index":3451,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",\"metric\",\"127.0.0.1",{"_index":3452,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",\"metric\",\"127.0.0.1",{"_index":3453,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",\"metric\",\"127.0.0.1",{"_index":3454,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3455,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"mean\",999987.2,\"timer\",\"metric\",\"127.0.0.1",{"_index":3456,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"mean_rate\",6.578947368421053,\"timer\",\"metric\",\"127.0.0.1",{"_index":3457,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",\"metric\",\"127.0.0.1",{"_index":3458,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.1",{"_index":3459,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p75\",1250112,\"timer\",\"metric\",\"127.0.0.1",{"_index":3460,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p95\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3461,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3462,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3463,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3464,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"stddev\",942809.0458299838,\"timer\",\"metric\",\"127.0.0.1",{"_index":3465,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"sum\",9999872,\"timer\",\"metric\",\"127.0.0.1",{"_index":3466,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.005\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3467,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.01\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3468,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.025\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3469,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.05\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3470,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.1\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3471,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.25\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3472,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.5\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3473,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_1\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3474,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_10\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3477,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_2.5\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3475,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_5\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3476,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3478,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3479,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3480,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3481,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3482,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"max\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3483,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"mean\",1049996.8,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3484,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"mean_rate\",13.1319758106064,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3485,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3486,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3487,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p75\",1749952,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3488,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p95\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3489,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p98\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3490,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p99\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3491,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p999\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3492,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"stddev\",604805.6067375874,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3493,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"sum\",20999936,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3494,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["2019",{"_index":2893,"title":{},"body":{"license.html":{}}}],["21/28",{"_index":2995,"title":{},"body":{"unit-test.html":{}}}],["21/39",{"_index":2765,"title":{},"body":{"coverage.html":{}}}],["22",{"_index":2434,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["23/23",{"_index":2973,"title":{},"body":{"unit-test.html":{}}}],["23/38",{"_index":2801,"title":{},"body":{"coverage.html":{}}}],["23/41",{"_index":2761,"title":{},"body":{"coverage.html":{}}}],["24.25",{"_index":2441,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["24/43",{"_index":2807,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":2435,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["25);201810201900_metrics.csv",{"_index":3254,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["26",{"_index":3033,"title":{},"body":{"unit-test.html":{}}}],["26/44",{"_index":2788,"title":{},"body":{"coverage.html":{}}}],["27/29",{"_index":3015,"title":{},"body":{"unit-test.html":{}}}],["27/42",{"_index":2804,"title":{},"body":{"coverage.html":{}}}],["283998208reporting",{"_index":3640,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["29",{"_index":3036,"title":{},"body":{"unit-test.html":{}}}],["2x",{"_index":3570,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["3",{"_index":1326,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["3/19",{"_index":2974,"title":{},"body":{"unit-test.html":{}}}],["3/3",{"_index":2739,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/4",{"_index":2791,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":3005,"title":{},"body":{"unit-test.html":{}}}],["30",{"_index":2436,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"additional-documentation/inspector-influx.html":{}}}],["30.000",{"_index":1213,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["30/67",{"_index":3014,"title":{},"body":{"unit-test.html":{}}}],["30/69",{"_index":3011,"title":{},"body":{"unit-test.html":{}}}],["3000",{"_index":3581,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["30s",{"_index":3615,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["31",{"_index":3042,"title":{},"body":{"unit-test.html":{}}}],["31/49",{"_index":2768,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":2437,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["32bit",{"_index":1690,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["33",{"_index":2751,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["34/34",{"_index":2782,"title":{},"body":{"coverage.html":{}}}],["35/35",{"_index":2783,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":2442,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["36/36",{"_index":2794,"title":{},"body":{"coverage.html":{}}}],["362",{"_index":3638,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["37/43",{"_index":2984,"title":{},"body":{"unit-test.html":{}}}],["38",{"_index":3002,"title":{},"body":{"unit-test.html":{}}}],["38/38",{"_index":2780,"title":{},"body":{"coverage.html":{}}}],["39/41",{"_index":3027,"title":{},"body":{"unit-test.html":{}}}],["3rd",{"_index":2842,"title":{},"body":{"index.html":{}}}],["4",{"_index":2154,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["4.390",{"_index":3164,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["4/11",{"_index":3020,"title":{},"body":{"unit-test.html":{}}}],["4/13",{"_index":3043,"title":{},"body":{"unit-test.html":{}}}],["4/4",{"_index":2748,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["4/5",{"_index":2772,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":3017,"title":{},"body":{"unit-test.html":{}}}],["4/8",{"_index":3047,"title":{},"body":{"unit-test.html":{}}}],["40",{"_index":2438,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["40/40",{"_index":2738,"title":{},"body":{"coverage.html":{}}}],["40/45",{"_index":2967,"title":{},"body":{"unit-test.html":{}}}],["4000000",{"_index":3636,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["41",{"_index":2759,"title":{},"body":{"coverage.html":{}}}],["41/43",{"_index":3023,"title":{},"body":{"unit-test.html":{}}}],["42/49",{"_index":3055,"title":{},"body":{"unit-test.html":{}}}],["43",{"_index":2755,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["43/46",{"_index":2979,"title":{},"body":{"unit-test.html":{}}}],["45",{"_index":2753,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["45/45",{"_index":2741,"title":{},"body":{"coverage.html":{}}}],["46",{"_index":2949,"title":{},"body":{"overview.html":{}}}],["47",{"_index":2784,"title":{},"body":{"coverage.html":{}}}],["47/56",{"_index":2999,"title":{},"body":{"unit-test.html":{}}}],["49/49",{"_index":2745,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":288,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"unit-test.html":{}}}],["5/17",{"_index":3037,"title":{},"body":{"unit-test.html":{}}}],["5/19",{"_index":3034,"title":{},"body":{"unit-test.html":{}}}],["5/5",{"_index":2747,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1774,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["500",{"_index":995,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["5000",{"_index":3587,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["50th",{"_index":1279,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["51,25",{"_index":2443,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["51/63",{"_index":3062,"title":{},"body":{"unit-test.html":{}}}],["52/64",{"_index":3061,"title":{},"body":{"unit-test.html":{}}}],["53",{"_index":2764,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":2439,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["55/56",{"_index":2986,"title":{},"body":{"unit-test.html":{}}}],["55/61",{"_index":2793,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":2440,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["56/91",{"_index":2770,"title":{},"body":{"coverage.html":{}}}],["57",{"_index":2797,"title":{},"body":{"coverage.html":{}}}],["59",{"_index":2787,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":930,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["6.0",{"_index":3541,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["6/116",{"_index":3041,"title":{},"body":{"unit-test.html":{}}}],["6/119",{"_index":3038,"title":{},"body":{"unit-test.html":{}}}],["6/12",{"_index":3059,"title":{},"body":{"unit-test.html":{}}}],["6/55",{"_index":2972,"title":{},"body":{"unit-test.html":{}}}],["6/57",{"_index":3030,"title":{},"body":{"unit-test.html":{}}}],["6/58",{"_index":2969,"title":{},"body":{"unit-test.html":{}}}],["6/6",{"_index":2746,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":3019,"title":{},"body":{"unit-test.html":{}}}],["60",{"_index":1177,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["61",{"_index":2769,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":2950,"title":{},"body":{"overview.html":{},"unit-test.html":{}}}],["63",{"_index":2767,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":2803,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["64bit",{"_index":1688,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["65",{"_index":3045,"title":{},"body":{"unit-test.html":{}}}],["67",{"_index":3016,"title":{},"body":{"unit-test.html":{}}}],["68",{"_index":2775,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["69",{"_index":2980,"title":{},"body":{"unit-test.html":{}}}],["7",{"_index":2155,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["7/11",{"_index":3010,"title":{},"body":{"unit-test.html":{}}}],["7/14",{"_index":3058,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":2777,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["70",{"_index":3000,"title":{},"body":{"unit-test.html":{}}}],["72/86",{"_index":2992,"title":{},"body":{"unit-test.html":{}}}],["75",{"_index":1775,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{},"unit-test.html":{}}}],["75th",{"_index":1265,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["76/102",{"_index":2965,"title":{},"body":{"unit-test.html":{}}}],["78",{"_index":2997,"title":{},"body":{"unit-test.html":{}}}],["8",{"_index":1810,"title":{},"body":{"interfaces/Logger.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["8/10",{"_index":3052,"title":{},"body":{"unit-test.html":{}}}],["8/13",{"_index":3007,"title":{},"body":{"unit-test.html":{}}}],["8/8",{"_index":2744,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["8/9",{"_index":2790,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80",{"_index":2771,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["8080",{"_index":3601,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["8086",{"_index":3562,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["81",{"_index":3060,"title":{},"body":{"unit-test.html":{}}}],["82",{"_index":3049,"title":{},"body":{"unit-test.html":{}}}],["82/93",{"_index":2990,"title":{},"body":{"unit-test.html":{}}}],["84",{"_index":2991,"title":{},"body":{"unit-test.html":{}}}],["85",{"_index":3063,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":2983,"title":{},"body":{"unit-test.html":{}}}],["87",{"_index":3024,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":2789,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["88/105",{"_index":3054,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":2966,"title":{},"body":{"unit-test.html":{}}}],["9'].sort",{"_index":2156,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["9/11",{"_index":3050,"title":{},"body":{"unit-test.html":{}}}],["9/12",{"_index":2985,"title":{},"body":{"unit-test.html":{}}}],["9/27",{"_index":2774,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2749,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":2792,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["9091",{"_index":2344,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["91",{"_index":2993,"title":{},"body":{"unit-test.html":{}}}],["92",{"_index":2987,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":2978,"title":{},"body":{"unit-test.html":{}}}],["93/110",{"_index":3066,"title":{},"body":{"unit-test.html":{}}}],["94/111",{"_index":3064,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":1776,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["95th",{"_index":1268,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["97",{"_index":2963,"title":{},"body":{"unit-test.html":{}}}],["98",{"_index":1777,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["98th",{"_index":1270,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["99",{"_index":1778,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["99.9",{"_index":1779,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9th",{"_index":1272,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["999936",{"_index":3626,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["99th",{"_index":1274,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["9_",{"_index":2148,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["_",{"_index":2152,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["_${field",{"_index":2280,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["_async",{"_index":3341,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["_index",{"_index":1140,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["_type",{"_index":1142,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["a.localecompare(b",{"_index":2157,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["above",{"_index":2919,"title":{},"body":{"license.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["abstract",{"_index":9,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableMetric.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{}}}],["abstracting",{"_index":2370,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["abstraction",{"_index":491,"title":{},"body":{"classes/Clock.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Logger.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["accessor",{"_index":1723,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["accessors",{"_index":54,"title":{},"body":{"classes/BaseMetric.html":{},"classes/HdrSnapshot.html":{}}}],["according",{"_index":496,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["accordingly",{"_index":917,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/SpaceHistory.html":{}}}],["action",{"_index":2942,"title":{},"body":{"license.html":{}}}],["active_handles",{"_index":3670,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["active_requests",{"_index":3671,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["actual",{"_index":643,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{}}}],["ad",{"_index":1363,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["add",{"_index":1681,"title":{},"body":{"classes/Int64Wrapper.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["add(value",{"_index":1685,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["addduration",{"_index":2663,"title":{},"body":{"classes/StopWatch.html":{}}}],["added",{"_index":1359,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["adding",{"_index":613,"title":{},"body":{"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["additional",{"_index":3076,"title":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}},"body":{}}],["additionalfields",{"_index":2266,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["addlistener",{"_index":1927,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["addmetricregistry",{"_index":1346,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["addmetricregistry(metricregistry",{"_index":1349,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["address",{"_index":2331,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["adds",{"_index":1029,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["addtags",{"_index":35,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["addtags(tags",{"_index":84,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["adjust",{"_index":1529,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["admin",{"_index":3559,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["afterreport",{"_index":1370,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["afterreport(ctx",{"_index":1435,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["afterwards",{"_index":1438,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["again",{"_index":1898,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["aliases",{"_index":2953,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all_in_one_column",{"_index":677,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{}}}],["allocated",{"_index":2544,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["allocations",{"_index":3208,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["alpha",{"_index":1156,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_1_second_samplerate",{"_index":1160,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_5_second_samplerate",{"_index":1161,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_1_second_samplerate",{"_index":1158,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_5_second_samplerate",{"_index":1159,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_1_second_samplerate",{"_index":1162,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_5_second_samplerate",{"_index":1163,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["always",{"_index":521,"title":{},"body":{"classes/Clock.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{}}}],["amount",{"_index":1863,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["amqp",{"_index":2844,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["analyzing",{"_index":3094,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["and/or",{"_index":2911,"title":{},"body":{"license.html":{}}}],["any).id",{"_index":1490,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["any,handle",{"_index":2374,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["anymetric",{"_index":141,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{}}}],["anymetric.getbuckets",{"_index":262,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["anymetric.getcounts",{"_index":263,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["anymetric.getgroup",{"_index":142,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.getmetadatamap",{"_index":144,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.getname",{"_index":146,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.getsnapshot",{"_index":2387,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["anymetric.gettags",{"_index":145,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.hasownproperty(\"snapshot",{"_index":2388,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["anymetric.name",{"_index":149,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anything",{"_index":3596,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["api",{"_index":1641,"title":{},"body":{"classes/Influxdb2Sender.html":{},"index.html":{}}}],["apis",{"_index":1650,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["apiversion",{"_index":3540,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["app",{"_index":3618,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["appended",{"_index":2323,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{}}}],["appendfile",{"_index":937,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["applicable",{"_index":570,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["application",{"_index":66,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["applied",{"_index":1371,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["args",{"_index":1812,"title":{},"body":{"interfaces/Logger.html":{}}}],["argument",{"_index":1805,"title":{},"body":{"interfaces/Logger.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["arguments",{"_index":1144,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["arising",{"_index":2945,"title":{},"body":{"license.html":{}}}],["around",{"_index":2828,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["arr",{"_index":1619,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr.length",{"_index":2050,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr[0",{"_index":2051,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["array",{"_index":400,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["array(count",{"_index":254,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["array.isarray(anymetric.buckets",{"_index":264,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["arraylength",{"_index":3140,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["arraylength.getvalue();histogram",{"_index":3150,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["arraylengthgauge",{"_index":3135,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["arraylengthgauge(\"arraylength",{"_index":3141,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["assigning",{"_index":2104,"title":{},"body":{"classes/Percentiles.html":{}}}],["associate",{"_index":1817,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["associated",{"_index":80,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"license.html":{}}}],["assumes",{"_index":503,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["async",{"_index":370,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["async.asyncqueue",{"_index":912,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["async.queue((task",{"_index":957,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["asynchronously",{"_index":2683,"title":{},"body":{"classes/StopWatch.html":{}}}],["attribute",{"_index":1726,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["authors",{"_index":2935,"title":{},"body":{"license.html":{}}}],["available",{"_index":1809,"title":{},"body":{"interfaces/Logger.html":{},"classes/SpaceHistory.html":{},"index.html":{}}}],["availablesize",{"_index":2496,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["average",{"_index":1155,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["average.ts",{"_index":1152,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["average.ts:105",{"_index":1190,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:113",{"_index":1173,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:136",{"_index":1193,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:146",{"_index":1196,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:157",{"_index":1195,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:171",{"_index":1210,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:187",{"_index":1197,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:19",{"_index":2085,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:29",{"_index":2086,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:38",{"_index":2088,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:47",{"_index":2087,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:59",{"_index":1178,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:60",{"_index":1179,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:61",{"_index":1183,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:62",{"_index":1184,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:63",{"_index":1181,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:64",{"_index":1182,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:73",{"_index":1174,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:81",{"_index":1187,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:89",{"_index":1189,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:97",{"_index":1186,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["averages",{"_index":1202,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["avg",{"_index":1164,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["await",{"_index":378,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["b",{"_index":256,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["back",{"_index":1517,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["base",{"_index":10,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["based",{"_index":1239,"title":{},"body":{"interfaces/Groupable.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["basemetric",{"_index":1,"title":{"classes/BaseMetric.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["basemetric#tojson",{"_index":1234,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["basemetric.counter",{"_index":75,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:217",{"_index":593,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:225",{"_index":596,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:233",{"_index":595,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:241",{"_index":598,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:249",{"_index":594,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:257",{"_index":597,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:265",{"_index":599,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:275",{"_index":619,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:279",{"_index":618,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:283",{"_index":623,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:289",{"_index":628,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:294",{"_index":620,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:298",{"_index":629,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:303",{"_index":616,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:307",{"_index":626,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:312",{"_index":617,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:316",{"_index":627,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:321",{"_index":622,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:325",{"_index":621,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:329",{"_index":630,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:334",{"_index":631,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:339",{"_index":615,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:344",{"_index":624,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:349",{"_index":625,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:354",{"_index":632,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:81",{"_index":611,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["basemetric:85",{"_index":2456,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["basename",{"_index":1067,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["basereporter",{"_index":1862,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["basic",{"_index":3081,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["batch",{"_index":3089,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["batchsize",{"_index":3574,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["before",{"_index":1433,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["beforereport",{"_index":756,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["beforereport(ctx",{"_index":1434,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["beginning",{"_index":2473,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["behavior",{"_index":651,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["between",{"_index":694,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/Percentiles.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["body",{"_index":1116,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/Influxdb2Sender.html":{}}}],["body.length",{"_index":1120,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["bookings",{"_index":3085,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["boolean",{"_index":545,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["boot",{"_index":2855,"title":{},"body":{"index.html":{}}}],["boundaries",{"_index":209,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{}}}],["boundaries.foreach((boundary",{"_index":2107,"title":{},"body":{"classes/Percentiles.html":{}}}],["boundaries.sort((a",{"_index":2106,"title":{},"body":{"classes/Percentiles.html":{}}}],["boundaries=[0.01",{"_index":2105,"title":{},"body":{"classes/Percentiles.html":{}}}],["boundary",{"_index":231,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["branch",{"_index":2882,"title":{},"body":{"index.html":{}}}],["branches",{"_index":2960,"title":{},"body":{"unit-test.html":{}}}],["break",{"_index":869,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bucket",{"_index":258,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/Influxdb2Sender.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-influx.html":{}}}],["bucketcount",{"_index":2300,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketcounting",{"_index":204,"title":{"interfaces/BucketCounting.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["bucketcount}${timestamp",{"_index":2304,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketfields",{"_index":770,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bucketfields.bucket_inf",{"_index":773,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bucketfields[`bucket_${bucket",{"_index":772,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["buckets",{"_index":225,"title":{"classes/Buckets.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"classes/Influxdb2Sender.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["buckets(boundaries",{"_index":255,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["buckets(metric.buckets",{"_index":267,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["buckets=new",{"_index":1324,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["bucketsapi",{"_index":1648,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["bucketsapi(this.db",{"_index":1660,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["bucketsapi.getbuckets",{"_index":1661,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["bucketsapi.postbuckets",{"_index":1664,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["bucketstrings",{"_index":2298,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketstrings.join('\\n",{"_index":2305,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketstrings.push",{"_index":2302,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["buckettocountmap",{"_index":259,"title":{"interfaces/BucketToCountMap.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["bucketwidth",{"_index":249,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["buffer",{"_index":3206,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["build",{"_index":1054,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["builder",{"_index":3551,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["buildheaders",{"_index":796,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["building",{"_index":1059,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["buildprometheustags",{"_index":2244,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["buildrow",{"_index":850,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["builds",{"_index":418,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{}}}],["built",{"_index":746,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bulk",{"_index":1115,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["business",{"_index":2836,"title":{},"body":{"index.html":{}}}],["c",{"_index":1118,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"license.html":{}}}],["calculated",{"_index":1203,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["calculates",{"_index":1153,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["call",{"_index":717,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableMetered.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["callback",{"_index":959,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["callback(null",{"_index":1006,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["callcount",{"_index":3167,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.get15minuterate",{"_index":3172,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.get1minuterate",{"_index":3176,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.get5minuterate",{"_index":3174,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.getcount",{"_index":3170,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.getmeanrate();timer",{"_index":3177,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.mark(1",{"_index":3169,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["called",{"_index":649,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["calling",{"_index":884,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["calls",{"_index":213,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["callstats",{"_index":3178,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.addduration(100",{"_index":3180,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.get15minuterate",{"_index":3182,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.get1minuterate",{"_index":3184,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.get5minuterate",{"_index":3183,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.getcount",{"_index":3181,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.getmeanrate",{"_index":3185,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.getsnapshot",{"_index":3186,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.newstopwatch",{"_index":3190,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.time",{"_index":3194,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.timeasync(async",{"_index":3196,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["can't",{"_index":2254,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["canbereported",{"_index":2128,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["canhandlemessage",{"_index":1416,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["canreport",{"_index":2257,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["cansendmessagestoworkers",{"_index":2207,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["capacity",{"_index":1023,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"additional-documentation/inspector-metrics.html":{}}}],["carbon",{"_index":306,"title":{"additional-documentation/inspector-carbon.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{}}}],["carbon/lib/metrics/carbonmetricreporter.ts",{"_index":298,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["carbondata",{"_index":297,"title":{"interfaces/CarbonData.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["carbondata.tags",{"_index":412,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["carbonmetricreporter",{"_index":347,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-carbon.html":{}}}],["carbonmetricreporteroptions",{"_index":343,"title":{"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["case",{"_index":867,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["catch",{"_index":969,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["catch((cause",{"_index":2220,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["catch((err",{"_index":417,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/StopWatch.html":{}}}],["catch((error",{"_index":2194,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["cause",{"_index":2222,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-vm.html":{}}}],["causes",{"_index":3120,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["causing",{"_index":636,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["certain",{"_index":1056,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":567,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["changes",{"_index":1819,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["character",{"_index":2150,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["characters",{"_index":2142,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["charge",{"_index":2898,"title":{},"body":{"license.html":{}}}],["check",{"_index":906,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{}}}],["checking",{"_index":2875,"title":{},"body":{"index.html":{}}}],["checks",{"_index":1413,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["child",{"_index":2028,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["choose",{"_index":1362,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["cint64\").int64",{"_index":1697,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":2938,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["class's",{"_index":749,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"overview.html":{}}}],["clb",{"_index":958,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["client",{"_index":327,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["client(clientoptions",{"_index":1113,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["clientoptions",{"_index":1046,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/Influxdb2Sender.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["clock",{"_index":354,"title":{"classes/Clock.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["clock:65",{"_index":2633,"title":{},"body":{"classes/StdClock.html":{}}}],["clock=this.defaultclock",{"_index":2010,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["cluster",{"_index":551,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["cluster.default",{"_index":554,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["cluster.ismaster",{"_index":3651,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["cluster.worker",{"_index":750,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["cluster.worker.send",{"_index":576,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["clustering",{"_index":547,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["clusteroptions",{"_index":358,"title":{"interfaces/ClusterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["clusteroptions.enabled",{"_index":1405,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["clusteroptions.eventreceiver.on(\"message",{"_index":1407,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["clusteroptions.getworkers",{"_index":2184,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["clusteroptions.sendmetricstomaster",{"_index":1406,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["clusteroptions.sendtoworker",{"_index":2208,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["clusteroptions.workerresponsetimeout",{"_index":2193,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co",{"_index":2174,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co.eventreceiver.on('message",{"_index":2178,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co.sendmetricstomaster",{"_index":2177,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co?.enabled",{"_index":2175,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["code",{"_index":2334,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"index.html":{},"additional-documentation/inspector-csv.html":{}}}],["code(200",{"_index":3608,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["codes",{"_index":3232,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["collect",{"_index":3101,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["collection",{"_index":208,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["collection.length",{"_index":1733,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collection.size",{"_index":1736,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collectmetrics",{"_index":3644,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["collector",{"_index":3658,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["collectors",{"_index":2840,"title":{},"body":{"index.html":{}}}],["collects",{"_index":3102,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["column",{"_index":665,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["columns",{"_index":690,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["columns.ts",{"_index":3436,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["columntype",{"_index":667,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{}}}],["combination",{"_index":2651,"title":{},"body":{"classes/StopWatch.html":{}}}],["combinations",{"_index":1114,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["combined",{"_index":309,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/MetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["command",{"_index":923,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["comments",{"_index":2271,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["common",{"_index":525,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["commonly",{"_index":13,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["commontags",{"_index":3548,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["compatibility",{"_index":927,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"index.html":{}}}],["compatible",{"_index":550,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["complete",{"_index":1542,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["component",{"_index":520,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["compose",{"_index":2854,"title":{},"body":{"index.html":{}}}],["computes",{"_index":3544,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["conditions",{"_index":2918,"title":{},"body":{"license.html":{}}}],["config",{"_index":1590,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-influx.html":{}}}],["configoptions",{"_index":3539,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["configurable",{"_index":3096,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["configuration",{"_index":987,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/Influxdb1Sender.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["configure",{"_index":3247,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["configured",{"_index":2340,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["connected",{"_index":3127,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["connection",{"_index":2946,"title":{},"body":{"license.html":{}}}],["considering",{"_index":2430,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["console",{"_index":351,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{}}}],["console.log(\"reporting",{"_index":3606,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["console.log(`added",{"_index":3198,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["console.log(`removed",{"_index":3199,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["console.log(error",{"_index":2195,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-influx.html":{}}}],["const",{"_index":140,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["constant",{"_index":1390,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["constructor",{"_index":276,"title":{},"body":{"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["constructor(alpha",{"_index":1171,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["constructor(boundaries",{"_index":277,"title":{},"body":{"classes/Buckets.html":{},"classes/Percentiles.html":{}}}],["constructor(clock",{"_index":2638,"title":{},"body":{"classes/StopWatch.html":{}}}],["constructor(config",{"_index":1591,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{}}}],["constructor(initial",{"_index":1683,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["constructor(listener",{"_index":2071,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(maxsize",{"_index":1021,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["constructor(metricref",{"_index":1885,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["constructor(name",{"_index":587,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"additional-documentation/inspector-metrics.html":{}}}],["constructor(nanosecondsperunit",{"_index":2716,"title":{},"body":{"classes/TimeUnit.html":{}}}],["constructor(options",{"_index":1403,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["constructor(reference",{"_index":1259,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["constructor(spacename",{"_index":2499,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["constructor(tags",{"_index":1388,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["constructor(undefined",{"_index":901,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["constructor(values",{"_index":2408,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["contained",{"_index":2595,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["container",{"_index":130,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["container.ts",{"_index":1814,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["container.ts:19",{"_index":1831,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:29",{"_index":1830,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:39",{"_index":1832,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:50",{"_index":1833,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:56",{"_index":1816,"title":{},"body":{"interfaces/Metadata.html":{}}}],["contains",{"_index":240,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["content",{"_index":2355,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["context",{"_index":1384,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["context.ts",{"_index":2078,"title":{},"body":{"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"coverage.html":{},"unit-test.html":{}}}],["context.ts:6",{"_index":2090,"title":{},"body":{"interfaces/OverallReportContext.html":{}}}],["contract",{"_index":2943,"title":{},"body":{"license.html":{}}}],["convenience",{"_index":150,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{}}}],["convenient",{"_index":175,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["converted",{"_index":2322,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["converts",{"_index":1694,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/TimeUnit.html":{}}}],["convertto",{"_index":2714,"title":{},"body":{"classes/TimeUnit.html":{}}}],["convertto(value",{"_index":2718,"title":{},"body":{"classes/TimeUnit.html":{}}}],["copies",{"_index":2913,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1718,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{}}}],["copyright",{"_index":2892,"title":{},"body":{"license.html":{}}}],["correct",{"_index":2287,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["corresponding",{"_index":232,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["count",{"_index":210,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["countable",{"_index":235,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["counter",{"_index":27,"title":{"classes/Counter.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["counter#getcount",{"_index":1763,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counter(name",{"_index":2006,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["counter.getcount",{"_index":421,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counter.getgroup",{"_index":425,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counter.getname",{"_index":427,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counterctx",{"_index":1449,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counterctx.metrics",{"_index":1455,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counterresults",{"_index":1461,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counters",{"_index":731,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["countertype",{"_index":2163,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["counting",{"_index":228,"title":{"interfaces/Counting.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableBucketCounting.html":{},"coverage.html":{}}}],["counts",{"_index":218,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["counts[boundary",{"_index":2301,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["counts[bucket",{"_index":272,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["count}${timestamp}\\n",{"_index":2307,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["coverage",{"_index":2734,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["cpu_usage",{"_index":3668,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["created",{"_index":908,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["createdir",{"_index":945,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["createmetricsetreportcontext",{"_index":1481,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["createmetricsetreportcontext(ctx",{"_index":1450,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["createoverallreportcontext",{"_index":1480,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["createreportingcontext",{"_index":1442,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["creates",{"_index":245,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["creating",{"_index":3227,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["crypto",{"_index":2116,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["csv",{"_index":704,"title":{"additional-documentation/inspector-csv.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts",{"_index":640,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts:58",{"_index":1224,"title":{},"body":{"interfaces/Fields.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts:88",{"_index":648,"title":{},"body":{"interfaces/CsvFileWriter.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts:98",{"_index":654,"title":{},"body":{"interfaces/CsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts",{"_index":894,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:101",{"_index":904,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:109",{"_index":903,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:148",{"_index":914,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:194",{"_index":935,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:214",{"_index":934,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:239",{"_index":921,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:259",{"_index":932,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:83",{"_index":911,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:92",{"_index":909,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csvfilewriter",{"_index":639,"title":{"interfaces/CsvFileWriter.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{}}}],["csvmetricreporter",{"_index":679,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["csvmetricreporter.message_type",{"_index":740,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["csvmetricreporteroptions",{"_index":680,"title":{"interfaces/CsvMetricReporterOptions.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{}}}],["ctx",{"_index":397,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ctx.canbereported",{"_index":2233,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ctx.date",{"_index":1139,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["ctx.date.gettime",{"_index":1493,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ctx.fields",{"_index":2234,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ctx.logmetadata",{"_index":1770,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.group",{"_index":1768,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.measurement",{"_index":1767,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.tags",{"_index":1769,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.metrics",{"_index":1487,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ctx.registry",{"_index":1137,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["ctx.result",{"_index":2228,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["ctx.result}${workerresponses.join('\\n",{"_index":2200,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ctx.type",{"_index":1138,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["current",{"_index":224,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["currentdir",{"_index":895,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["currentfilename",{"_index":896,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["currently",{"_index":2079,"title":{},"body":{"interfaces/MetricSetReportContext.html":{}}}],["custom",{"_index":3250,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["customtags",{"_index":1512,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["customtags[key",{"_index":1515,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["d",{"_index":2883,"title":{},"body":{"index.html":{}}}],["dailyindex",{"_index":1068,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["damages",{"_index":2939,"title":{},"body":{"license.html":{}}}],["data",{"_index":795,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["database",{"_index":1602,"title":{},"body":{"classes/Influxdb1Sender.html":{},"additional-documentation/inspector-influx.html":{}}}],["databases",{"_index":1615,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["databases.find((value",{"_index":1618,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["databases.localecompare(database",{"_index":1617,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["date",{"_index":373,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date(point.timestamp",{"_index":1554,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["date(this.options.clock.time().milliseconds",{"_index":1448,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["date(timestamp",{"_index":410,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["date,group,name,field,value",{"_index":3255,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["date,group,name,field,value,type,tag_type,tag_host,tag_special_tag",{"_index":3438,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["date,group,name,field,value,type,tags",{"_index":3351,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["date.getdate",{"_index":1070,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date.getfullyear",{"_index":1075,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date.getmonth",{"_index":1073,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date.now",{"_index":517,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["dateformat",{"_index":699,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["datestr",{"_index":758,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["day",{"_index":1069,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["dayprefix",{"_index":1071,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["dayprefix}${day",{"_index":1077,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["db",{"_index":1524,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["dbconfig",{"_index":3557,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["dd",{"_index":1066,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["deal",{"_index":2902,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2947,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1802,"title":{},"body":{"interfaces/Logger.html":{}}}],["decimal",{"_index":1321,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["decreased",{"_index":582,"title":{},"body":{"classes/Counter.html":{}}}],["decreases",{"_index":602,"title":{},"body":{"classes/Counter.html":{}}}],["decreasing",{"_index":608,"title":{},"body":{"classes/Counter.html":{}}}],["decrement",{"_index":584,"title":{},"body":{"classes/Counter.html":{}}}],["decrement(value",{"_index":600,"title":{},"body":{"classes/Counter.html":{}}}],["default",{"_index":57,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["defaultclock",{"_index":1923,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultcluster",{"_index":553,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultcluster.isworker",{"_index":994,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["defaultcluster.worker",{"_index":575,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["defaultcluster.worker.send(message",{"_index":577,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["defaultclusteroptions",{"_index":310,"title":{"classes/DefaultClusterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["defaultcsvfilewriter",{"_index":893,"title":{"classes/DefaultCsvFileWriter.html":{}},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["defaultcsvfilewriteroptions",{"_index":902,"title":{"interfaces/DefaultCsvFileWriterOptions.html":{}},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"coverage.html":{}}}],["defaultdocumentbuilder",{"_index":1078,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["defaultnamefactory",{"_index":1922,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultprometheusclusteroptions",{"_index":985,"title":{"classes/DefaultPrometheusClusterOptions.html":{}},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["defaultreservoir",{"_index":1011,"title":{"classes/DefaultReservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["defaultsender",{"_index":3553,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["defaultsender(dbconfig",{"_index":3563,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["defaulttags",{"_index":3575,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["defaulttypedeterminator",{"_index":1062,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["defined",{"_index":60,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["defines",{"_index":1597,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["defining",{"_index":207,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["definition",{"_index":1525,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["delay",{"_index":3665,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["delegation",{"_index":641,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["delete",{"_index":1934,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["delimiter",{"_index":693,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["depend",{"_index":1852,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{}}}],["dependencies",{"_index":1333,"title":{},"body":{"classes/HdrSnapshot.html":{},"index.html":{}}}],["dependency",{"_index":2871,"title":{},"body":{"index.html":{}}}],["depends",{"_index":1212,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"additional-documentation/inspector-csv.html":{}}}],["deployment",{"_index":3088,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["deprecated",{"_index":1941,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["depsrelease",{"_index":2876,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["description=null",{"_index":2004,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["description}\\n",{"_index":2274,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["desired",{"_index":1414,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["determine",{"_index":492,"title":{},"body":{"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["determinebetween",{"_index":3648,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["determined",{"_index":2255,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["determines",{"_index":133,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-csv.html":{}}}],["determining",{"_index":949,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["development",{"_index":2849,"title":{},"body":{"index.html":{}}}],["deviation",{"_index":1282,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["diff",{"_index":509,"title":{},"body":{"classes/Clock.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["diff(one",{"_index":2819,"title":{},"body":{"miscellaneous/functions.html":{}}}],["difference",{"_index":1200,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["different",{"_index":1882,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["dir",{"_index":905,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["directgauge",{"_index":1915,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["directly",{"_index":1531,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{}}}],["directory",{"_index":950,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["disable",{"_index":330,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["disabled",{"_index":2342,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["disabledclusteroptions",{"_index":579,"title":{"classes/DisabledClusterOptions.html":{}},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["disables",{"_index":578,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["disabling",{"_index":3527,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["distribute",{"_index":2909,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":247,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["distribution",{"_index":3098,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["dividing",{"_index":1204,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["docker",{"_index":2853,"title":{},"body":{"index.html":{}}}],["docs",{"_index":2878,"title":{},"body":{"index.html":{}}}],["document",{"_index":303,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["documentation",{"_index":2735,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["documents",{"_index":3547,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["doesn't",{"_index":944,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["double",{"_index":686,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["due",{"_index":3641,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["duration",{"_index":508,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["durations",{"_index":2636,"title":{},"body":{"classes/StopWatch.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["during",{"_index":408,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["dynamic",{"_index":1933,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["e",{"_index":1298,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["e.g",{"_index":212,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TimeUnit.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["each",{"_index":568,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["each_in_own_column",{"_index":678,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{}}}],["elapsed",{"_index":500,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["elastic/elasticsearch",{"_index":1055,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearch",{"_index":1051,"title":{"additional-documentation/inspector-elasticsearch.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearch/lib/metrics/elasticsearchmetricreporter.ts",{"_index":1044,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["elasticsearchmetricreporter",{"_index":1045,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.dailyindex('metric",{"_index":1111,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.dailyindex(`metrics",{"_index":3535,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.defaultdocumentbuilder",{"_index":1110,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.defaulttypedeterminator",{"_index":1112,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.getcountervalues(metric",{"_index":1080,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getgaugevalue(metric",{"_index":1084,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.gethistogramvalues(metric",{"_index":1081,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getmetervalues(metric",{"_index":1082,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getmonotonecountervalues(metric",{"_index":1079,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.gettimervalues(metric",{"_index":1083,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporteroption",{"_index":1043,"title":{"interfaces/ElasticsearchMetricReporterOption.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{}}}],["element",{"_index":3205,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["embedded",{"_index":2666,"title":{},"body":{"classes/StopWatch.html":{}}}],["emitcomments",{"_index":2171,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["emitted",{"_index":2321,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{}}}],["emitter",{"_index":2371,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":1287,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["enabled",{"_index":526,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["enables",{"_index":572,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["encodeuricomponent(getmetricdescription(metric",{"_index":870,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["encoding",{"_index":946,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["end",{"_index":243,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["ended",{"_index":3090,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["endings",{"_index":947,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["endpoint",{"_index":3590,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["ensure",{"_index":915,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["ensures",{"_index":1601,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MetricEntry.html":{}}}],["entry",{"_index":1383,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["entry.ts",{"_index":1858,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"unit-test.html":{}}}],["enum",{"_index":675,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["enumeration",{"_index":2122,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":2811,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env/boot.sh",{"_index":2858,"title":{},"body":{"index.html":{}}}],["env/reset.sh",{"_index":2860,"title":{},"body":{"index.html":{}}}],["environment:./test",{"_index":2857,"title":{},"body":{"index.html":{}}}],["equal",{"_index":2110,"title":{},"body":{"classes/Percentiles.html":{}}}],["equals",{"_index":2722,"title":{},"body":{"classes/TimeUnit.html":{}}}],["err",{"_index":413,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/StopWatch.html":{}}}],["error",{"_index":637,"title":{},"body":{"classes/Counter.html":{},"classes/HdrSnapshot.html":{},"interfaces/Logger.html":{},"classes/MonotoneCounter.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["error(\"module",{"_index":1329,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["error(\"sender",{"_index":1540,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["error('boundaries",{"_index":2108,"title":{},"body":{"classes/Percentiles.html":{}}}],["error('invalid",{"_index":1545,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["error(`error",{"_index":1132,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["errorcount",{"_index":3117,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.getcount",{"_index":3122,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.increment",{"_index":3121,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.increment(1",{"_index":3119,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.reset();event",{"_index":3123,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errors",{"_index":1053,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["eslint",{"_index":329,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["eslint/no",{"_index":334,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["eslint/restrict",{"_index":1127,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["etc",{"_index":1058,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["evaluation_interval",{"_index":3614,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["event",{"_index":311,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-vm.html":{}}}],["event(\"application_started",{"_index":3128,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["event.gettime",{"_index":374,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{}}}],["event.getvalue",{"_index":1543,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["eventbus",{"_index":2167,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["eventemitter",{"_index":2117,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["eventloop",{"_index":3666,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["eventloop.stop",{"_index":3683,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["eventreceiver",{"_index":527,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["events",{"_index":211,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["everything",{"_index":234,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["example",{"_index":1867,"title":{},"body":{"interfaces/MetricEntry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["example.ts",{"_index":3231,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["examples",{"_index":2847,"title":{},"body":{"index.html":{},"additional-documentation/inspector-influx.html":{}}}],["examples/influxdb",{"_index":3569,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["exclude",{"_index":2243,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["exclude.includes(normalizedkey",{"_index":2249,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["exclude.sort((a",{"_index":2245,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["executable",{"_index":2537,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["execute",{"_index":2861,"title":{},"body":{"index.html":{}}}],["execution",{"_index":3209,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["exist",{"_index":916,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["existing",{"_index":1603,"title":{},"body":{"classes/Influxdb1Sender.html":{},"index.html":{}}}],["exists",{"_index":1643,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["exponential",{"_index":275,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["exponential(initial",{"_index":291,"title":{},"body":{"classes/Buckets.html":{}}}],["exponentially",{"_index":294,"title":{},"body":{"classes/Buckets.html":{}}}],["exponentiallyweightedmovingaverage",{"_index":1150,"title":{"classes/ExponentiallyWeightedMovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["export",{"_index":136,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-csv.html":{}}}],["exported",{"_index":673,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/inspector-csv.html":{}}}],["exporting",{"_index":3343,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["exportmode",{"_index":676,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/inspector-csv.html":{}}}],["exportmode.all_in_one_column",{"_index":708,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["exportmode.each_in_own_column",{"_index":799,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["exposed",{"_index":3589,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["exposes",{"_index":3591,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["express",{"_index":2926,"title":{},"body":{"license.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["expressions",{"_index":1128,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["extend",{"_index":1751,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["extending",{"_index":338,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["extends",{"_index":170,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{}}}],["extension",{"_index":1060,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["extractor",{"_index":1738,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["f",{"_index":2681,"title":{},"body":{"classes/StopWatch.html":{}}}],["factor",{"_index":292,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["factory",{"_index":1924,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["failedattempts",{"_index":3586,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["failures",{"_index":345,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["false",{"_index":148,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["fashion",{"_index":925,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["feature",{"_index":561,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["features",{"_index":2831,"title":{},"body":{"index.html":{}}}],["few",{"_index":3109,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["field",{"_index":655,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["fieldname",{"_index":1669,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["fieldnameprefix",{"_index":1558,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields",{"_index":174,"title":{"interfaces/Fields.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["fields.count",{"_index":2268,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":1561,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_rate",{"_index":1580,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_rate",{"_index":1581,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_rate",{"_index":1582,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":1568,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":1569,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_rate",{"_index":1583,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":1570,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":1571,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":1572,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":1573,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":1574,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":1575,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":1576,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":1577,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}value",{"_index":1564,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["fields[field",{"_index":764,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["fieldstr",{"_index":2278,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["figures",{"_index":1320,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["figures=3",{"_index":1319,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["file.also",{"_index":3523,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["filename",{"_index":910,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["files",{"_index":705,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"index.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["filter",{"_index":672,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["filter((metric",{"_index":1488,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["filter((result",{"_index":1496,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["filter(metricregistry.iscounter",{"_index":1946,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.isgauge",{"_index":1952,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ishistogram",{"_index":1955,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ismeter",{"_index":1958,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ispuremonotonecounter",{"_index":1964,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.istimer",{"_index":1961,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(null",{"_index":827,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filtered",{"_index":820,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["filteredkeys",{"_index":823,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filteredkeys.add(key",{"_index":828,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filterednames",{"_index":801,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filterednames.foreach((metadataname",{"_index":804,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filteredtags",{"_index":810,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filteredtags.foreach((tag",{"_index":813,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filtering",{"_index":830,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filterkeys",{"_index":822,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filters",{"_index":817,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["finally",{"_index":1446,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["finds",{"_index":2048,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["finished",{"_index":656,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["firemetricadded",{"_index":2056,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricremoved",{"_index":2060,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["first",{"_index":504,"title":{},"body":{"classes/Clock.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["fitness",{"_index":2931,"title":{},"body":{"license.html":{}}}],["flushes",{"_index":1646,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["flushevents",{"_index":382,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["flushinterval",{"_index":3576,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["fo",{"_index":2405,"title":{},"body":{"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{}}}],["folder",{"_index":2848,"title":{},"body":{"index.html":{}}}],["following",{"_index":2431,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"license.html":{}}}],["foreach((metadatamaparray",{"_index":837,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["foreach((metrictagsarray",{"_index":847,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["foreach((registration",{"_index":1947,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["foreach((value",{"_index":771,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["forked",{"_index":69,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["format",{"_index":698,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["forward",{"_index":2168,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["forwards",{"_index":2224,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["found",{"_index":1330,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["fr",{"_index":2880,"title":{},"body":{"index.html":{}}}],["frame",{"_index":1851,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{}}}],["free",{"_index":2897,"title":{},"body":{"license.html":{}}}],["friendly",{"_index":2837,"title":{},"body":{"index.html":{}}}],["fs",{"_index":939,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["function",{"_index":138,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["function's",{"_index":2678,"title":{},"body":{"classes/StopWatch.html":{}}}],["function(error",{"_index":3585,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["functionality",{"_index":2879,"title":{},"body":{"index.html":{}}}],["functions",{"_index":15,"title":{"miscellaneous/functions.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["furnished",{"_index":2916,"title":{},"body":{"license.html":{}}}],["future",{"_index":1818,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["g",{"_index":2149,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["garbage",{"_index":3103,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["gather",{"_index":3203,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["gathers",{"_index":768,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["gauge",{"_index":312,"title":{"interfaces/Gauge.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["gauge's",{"_index":1771,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getgroup",{"_index":433,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getname",{"_index":434,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getvalue",{"_index":432,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gauge.ts",{"_index":1722,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["gauge.ts:13",{"_index":1746,"title":{},"body":{"interfaces/LengthMethodInterface.html":{}}}],["gauge.ts:33",{"_index":2471,"title":{},"body":{"interfaces/SizeMethodInterface.html":{}}}],["gaugectx",{"_index":1451,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gaugectx.metrics",{"_index":1462,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gaugeregistration",{"_index":1917,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gaugeresults",{"_index":1464,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gauges",{"_index":732,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["gaugetype",{"_index":2164,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["gc",{"_index":2802,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-vm.html":{}}}],["gc.stop",{"_index":3682,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["generalized",{"_index":1133,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["generate",{"_index":1921,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["generatename",{"_index":2053,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["generaterandomid",{"_index":2210,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["generates",{"_index":119,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{}}}],["generator",{"_index":3545,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["get15minuterate",{"_index":1836,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["get1minuterate",{"_index":1837,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["get5minuterate",{"_index":1838,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["get75thpercentile",{"_index":1248,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get95thpercentile",{"_index":1249,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get98thpercentile",{"_index":1250,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get999thpercentile",{"_index":1251,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get99thpercentile",{"_index":1252,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getallmetadatakeys",{"_index":831,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["getalltagkeys",{"_index":842,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["getalpha",{"_index":1167,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage",{"_index":1168,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage(unit",{"_index":1194,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getbuckets",{"_index":221,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{}}}],["getbyname",{"_index":2052,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcount",{"_index":239,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["getcounter",{"_index":1973,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounterlist",{"_index":1943,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounters",{"_index":1944,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbyname",{"_index":1972,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountervalues",{"_index":1088,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getcounts",{"_index":222,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{}}}],["getdefaultclock",{"_index":1938,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdescription",{"_index":36,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getdescription(metric",{"_index":2285,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["geteventstring",{"_index":2204,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["geteventstring>(event",{"_index":2202,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getfieldnameprefix",{"_index":1586,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["getfirstbyname",{"_index":2049,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgauge",{"_index":1975,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugelist",{"_index":1950,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgauges",{"_index":1951,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbyname",{"_index":1974,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugevalue",{"_index":1089,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getgroup",{"_index":37,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["gethistogram",{"_index":1978,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramlist",{"_index":1953,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistograms",{"_index":1954,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbyname",{"_index":1977,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramvalues",{"_index":1091,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getlog",{"_index":361,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["getmax",{"_index":1253,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmean",{"_index":1254,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmeanrate",{"_index":1839,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["getmeasurementname",{"_index":1587,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["getmedian",{"_index":1255,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmetadata",{"_index":38,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/MetadataContainer.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["getmetadata(name",{"_index":91,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getmetadatamap",{"_index":39,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getmeter",{"_index":1980,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeterlist",{"_index":1956,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeters",{"_index":1957,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbyname",{"_index":1979,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetervalues",{"_index":1103,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getmetric",{"_index":1970,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricbuckets",{"_index":2118,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricbuckets(metric",{"_index":265,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"miscellaneous/functions.html":{}}}],["getmetriccounts",{"_index":2119,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetriccounts(metric",{"_index":269,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"miscellaneous/functions.html":{}}}],["getmetricdescription",{"_index":657,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricdescription(metric",{"_index":156,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetricgroup",{"_index":658,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricgroup(metric",{"_index":159,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetriclist",{"_index":1966,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SpaceHistory.html":{}}}],["getmetricmetadata",{"_index":659,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricmetadata(metric",{"_index":165,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetricname",{"_index":488,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricname(metric",{"_index":152,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetrics",{"_index":1965,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SpaceHistory.html":{}}}],["getmetricsbyname",{"_index":1969,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricsstring",{"_index":2181,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getmetricstring",{"_index":2258,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getmetrictags",{"_index":1376,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetrictags(metric",{"_index":162,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetrictags(taggable",{"_index":1513,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["getmin",{"_index":1256,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmonotonecounterlist",{"_index":1963,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmonotonecountersbyname",{"_index":1984,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmonotonecountervalues",{"_index":1086,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getname",{"_index":40,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getnanosecondsperunit",{"_index":2715,"title":{},"body":{"classes/TimeUnit.html":{}}}],["getnumber",{"_index":1109,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getnumber(value",{"_index":1518,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["getquantiles",{"_index":2308,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["gets",{"_index":171,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["getsnapshot",{"_index":1338,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getsnapshot(metric",{"_index":2310,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"miscellaneous/functions.html":{}}}],["getstddev",{"_index":1257,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getsum",{"_index":2406,"title":{},"body":{"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["gettag",{"_index":41,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["gettag(name",{"_index":96,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["gettags",{"_index":42,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["getter",{"_index":2658,"title":{},"body":{"classes/StopWatch.html":{}}}],["gettimer",{"_index":1982,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimerlist",{"_index":1959,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimers",{"_index":1960,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbyname",{"_index":1981,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimervalues",{"_index":1108,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["gettimestamp",{"_index":2293,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getting",{"_index":304,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["getunit",{"_index":1169,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getvalue",{"_index":1228,"title":{},"body":{"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"additional-documentation/inspector-metrics.html":{}}}],["getvalue(0.5",{"_index":2423,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.75",{"_index":2413,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.95",{"_index":2415,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.98",{"_index":2417,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.99",{"_index":2421,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.999",{"_index":2419,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(quantile",{"_index":1283,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalues",{"_index":1258,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getworkers",{"_index":529,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["gh",{"_index":2884,"title":{},"body":{"index.html":{}}}],["git",{"_index":2881,"title":{},"body":{"index.html":{}}}],["give",{"_index":63,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["given",{"_index":396,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["gives",{"_index":1516,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["global",{"_index":3611,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["global.console",{"_index":3105,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["global.setinterval",{"_index":2570,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["granted",{"_index":2896,"title":{},"body":{"license.html":{}}}],["graphite",{"_index":307,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{}}}],["graphite.createclient(this.options.host",{"_index":388,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["graphite/carbon",{"_index":3213,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["graphs",{"_index":1875,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["greater",{"_index":2109,"title":{},"body":{"classes/Percentiles.html":{}}}],["group",{"_index":21,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["group=null",{"_index":2003,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["groupable",{"_index":127,"title":{"interfaces/Groupable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{}}}],["grouped",{"_index":1445,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["grouping",{"_index":1240,"title":{},"body":{"interfaces/Groupable.html":{}}}],["groups",{"_index":1883,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-metrics.html":{}}}],["group}:${name",{"_index":2316,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["h",{"_index":3605,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["h.response(reporter.getmetricsstring",{"_index":3607,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["hand",{"_index":1864,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["handle",{"_index":751,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handled",{"_index":3525,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["handler(request",{"_index":3604,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["handlereportmessage",{"_index":752,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["handlereportmessage(worker",{"_index":1422,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handlereportrequest",{"_index":2213,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["handlereportresponse",{"_index":2225,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["handleresults",{"_index":399,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handles",{"_index":1421,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handling",{"_index":1815,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["hapi",{"_index":3598,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["hapi.server",{"_index":3599,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["happen",{"_index":407,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["haschanged(metricid",{"_index":1502,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["haven't",{"_index":1866,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["having",{"_index":566,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["hdr",{"_index":1295,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["hdrhistogram",{"_index":1246,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["hdrhistogram(lowest",{"_index":2018,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["hdrsnapshot",{"_index":1243,"title":{"classes/HdrSnapshot.html":{}},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{}}}],["hdrsnapshot(this",{"_index":1337,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["header",{"_index":652,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["header.join(this.options.delimiter",{"_index":978,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["headers",{"_index":713,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["headers.push(`${this.options.metadatacolumnprefix}${metadataname",{"_index":805,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["headers.push(`${this.options.tagcolumnprefix}${tag",{"_index":814,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["headers.push(columntype",{"_index":816,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["health",{"_index":1868,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["healthy",{"_index":1871,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["heap",{"_index":2530,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapsizelimit",{"_index":2542,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapspacestatistics",{"_index":2571,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapspacestatistics.foreach((heapspacestatistic",{"_index":2583,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapstatistics",{"_index":2573,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["help",{"_index":2273,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["helper",{"_index":257,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["here",{"_index":1821,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["hereby",{"_index":2895,"title":{},"body":{"license.html":{}}}],["high",{"_index":1206,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["histogram",{"_index":237,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["histogram#getcount",{"_index":1773,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram(reservoir",{"_index":2022,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["histogram.getcount",{"_index":438,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogram.getgroup",{"_index":441,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram.getname",{"_index":442,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram.getsnapshot",{"_index":440,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["histogram.getsum().tostring",{"_index":786,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["histogram.ts",{"_index":1245,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["histogram.ts:108",{"_index":1275,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:119",{"_index":1280,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:129",{"_index":1290,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:139",{"_index":1286,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:149",{"_index":1288,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:160",{"_index":1277,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:171",{"_index":1281,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:182",{"_index":1284,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:26",{"_index":1260,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:42",{"_index":1261,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:53",{"_index":1267,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:64",{"_index":1269,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:75",{"_index":1271,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:86",{"_index":1273,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:97",{"_index":1278,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogramctx",{"_index":1452,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogramctx.metrics",{"_index":1466,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogramjson",{"_index":2688,"title":{},"body":{"classes/StopWatch.html":{}}}],["histogramresults",{"_index":1468,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histograms",{"_index":733,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogramtype",{"_index":2165,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["history",{"_index":2585,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.removetag(name",{"_index":2629,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.setgroup(group",{"_index":2605,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.settag(name",{"_index":2617,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.setvalue(heapspacestatistic.space_available_size",{"_index":2587,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.removetag(name",{"_index":2630,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.setgroup(group",{"_index":2606,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.settag(name",{"_index":2618,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.setvalue(heapspacestatistic.physical_space_size",{"_index":2588,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.removetag(name",{"_index":2631,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.setgroup(group",{"_index":2607,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.settag(name",{"_index":2619,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.setvalue(heapspacestatistic.space_size",{"_index":2589,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.removetag(name",{"_index":2632,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.setgroup(group",{"_index":2608,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.settag(name",{"_index":2620,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.setvalue(heapspacestatistic.space_used_size",{"_index":2590,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["hoc",{"_index":1364,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["holders",{"_index":2936,"title":{},"body":{"license.html":{}}}],["holds",{"_index":592,"title":{},"body":{"classes/Counter.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/MonotoneCounter.html":{}}}],["host",{"_index":341,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["hostname",{"_index":2329,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["hosts",{"_index":3561,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["hour",{"_index":2712,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hrd",{"_index":1263,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["http",{"_index":2336,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["http.request(options",{"_index":2362,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["http://graphite",{"_index":3214,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["http://localhost:8087",{"_index":3567,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["http://localhost:9200",{"_index":3534,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["http://metrics.dropwizard.io",{"_index":2823,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["https://github.com/node",{"_index":3554,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["https://github.com/prometheus/pushgateway",{"_index":2343,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["https://prometheus.io/docs/concepts",{"_index":2133,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["https://prometheus.io/docs/instrumenting/exposition_formats/#text",{"_index":2134,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["iclusterconfig",{"_index":1592,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["id",{"_index":30,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["identifier",{"_index":2736,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["identify",{"_index":1712,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["identifying",{"_index":1393,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["igenerate",{"_index":2874,"title":{},"body":{"index.html":{}}}],["ignores",{"_index":2227,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["imetricreporter",{"_index":1344,"title":{"interfaces/IMetricReporter.html":{}},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["immediately",{"_index":1368,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["implementation",{"_index":219,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["implementations",{"_index":571,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["implemented",{"_index":2341,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["implements",{"_index":12,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["implied",{"_index":2927,"title":{},"body":{"license.html":{}}}],["import",{"_index":125,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["include",{"_index":1865,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["included",{"_index":564,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["includetimestamp",{"_index":2172,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["including",{"_index":2904,"title":{},"body":{"license.html":{}}}],["inclusive",{"_index":1323,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["increased",{"_index":581,"title":{},"body":{"classes/Counter.html":{}}}],["increases",{"_index":607,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["increasing",{"_index":604,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"additional-documentation/inspector-metrics.html":{}}}],["increment",{"_index":585,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["increment(value",{"_index":605,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["independent",{"_index":2833,"title":{},"body":{"index.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["indexable",{"_index":273,"title":{},"body":{"interfaces/BucketToCountMap.html":{},"interfaces/Fields.html":{},"interfaces/Metadata.html":{},"interfaces/MeteredRates.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/Tags.html":{}}}],["indexname",{"_index":1063,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["indexnamedeterminator",{"_index":1047,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["indexof(metric",{"_index":1996,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indexof(metrics[0",{"_index":1991,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indicates",{"_index":546,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-csv.html":{}}}],["inf",{"_index":2289,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["infinity",{"_index":2292,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["influx",{"_index":1523,"title":{"additional-documentation/inspector-influx.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":3556,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["influx/lib/metrics/influxdb1sender.ts",{"_index":1589,"title":{},"body":{"classes/Influxdb1Sender.html":{},"coverage.html":{}}}],["influx/lib/metrics/influxdb1sender.ts:21",{"_index":1596,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["influx/lib/metrics/influxdb1sender.ts:29",{"_index":1595,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["influx/lib/metrics/influxdb1sender.ts:37",{"_index":1599,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["influx/lib/metrics/influxdb1sender.ts:45",{"_index":1594,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["influx/lib/metrics/influxdb1sender.ts:65",{"_index":1600,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["influx/lib/metrics/influxdb1sender.ts:83",{"_index":1604,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["influx/lib/metrics/influxdb1sender.ts:93",{"_index":1607,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts",{"_index":1625,"title":{},"body":{"classes/Influxdb2Sender.html":{},"coverage.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:128",{"_index":1644,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:138",{"_index":1645,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:22",{"_index":1635,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:30",{"_index":1640,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:38",{"_index":1638,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:46",{"_index":1634,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:54",{"_index":1636,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:62",{"_index":1633,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxdb2sender.ts:94",{"_index":1642,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts",{"_index":1520,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts:67",{"_index":2401,"title":{},"body":{"interfaces/Sender.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts:75",{"_index":2400,"title":{},"body":{"interfaces/Sender.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts:84",{"_index":2402,"title":{},"body":{"interfaces/Sender.html":{}}}],["influx/node",{"_index":3555,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["influxdata/influxdb",{"_index":1647,"title":{},"body":{"classes/Influxdb2Sender.html":{},"additional-documentation/inspector-influx.html":{}}}],["influxdb",{"_index":1532,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"index.html":{},"additional-documentation/inspector-influx.html":{}}}],["influxdb(config",{"_index":1613,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{}}}],["influxdb1sender",{"_index":1588,"title":{"classes/Influxdb1Sender.html":{}},"body":{"classes/Influxdb1Sender.html":{},"coverage.html":{}}}],["influxdb2",{"_index":1626,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["influxdb2sender",{"_index":1624,"title":{"classes/Influxdb2Sender.html":{}},"body":{"classes/Influxdb2Sender.html":{},"coverage.html":{},"additional-documentation/inspector-influx.html":{}}}],["influxdb2sender(clientoptions",{"_index":3571,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["influxmetricreporter",{"_index":1521,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"coverage.html":{},"additional-documentation/inspector-influx.html":{}}}],["influxmetricreporteroptions",{"_index":1519,"title":{"interfaces/InfluxMetricReporterOptions.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["information",{"_index":1057,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["inherited",{"_index":590,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/StdClock.html":{}}}],["init",{"_index":644,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["init(header",{"_index":646,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/Fields.html":{}}}],["initial",{"_index":295,"title":{},"body":{"classes/Buckets.html":{},"classes/Counter.html":{},"classes/Int64Wrapper.html":{},"classes/MonotoneCounter.html":{}}}],["initial=0",{"_index":1698,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["initialization",{"_index":1535,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["initially",{"_index":1231,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["insert",{"_index":1527,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["insertion",{"_index":2063,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["inspector",{"_index":325,"title":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["install",{"_index":1332,"title":{},"body":{"classes/HdrSnapshot.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["installed",{"_index":1315,"title":{},"body":{"classes/HdrSnapshot.html":{},"index.html":{}}}],["instance",{"_index":62,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["instance.getmetrics",{"_index":1920,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.getvalue",{"_index":1916,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref",{"_index":1907,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref.getvalue",{"_index":1918,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instanceof",{"_index":409,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["instances",{"_index":1134,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["instancing",{"_index":3546,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["instead",{"_index":685,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["int64",{"_index":1695,"title":{},"body":{"classes/Int64Wrapper.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["int64(initial",{"_index":1700,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64_t",{"_index":1679,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64wrapper",{"_index":1677,"title":{"classes/Int64Wrapper.html":{}},"body":{"classes/Int64Wrapper.html":{},"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["integer",{"_index":1692,"title":{},"body":{"classes/Int64Wrapper.html":{},"additional-documentation/inspector-metrics.html":{}}}],["inter",{"_index":1706,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["interface",{"_index":169,"title":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["interfaces",{"_index":205,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"overview.html":{}}}],["internal",{"_index":350,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["internaleventbus",{"_index":2170,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["internalrequest/response",{"_index":3645,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["interprocess",{"_index":1381,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["interprocessmessage",{"_index":1380,"title":{"interfaces/InterprocessMessage.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["interprocessreportmessage",{"_index":660,"title":{"interfaces/InterprocessReportMessage.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["interprocessreportrequest",{"_index":1709,"title":{"interfaces/InterprocessReportRequest.html":{}},"body":{"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["interprocessreportresponse",{"_index":1714,"title":{"interfaces/InterprocessReportResponse.html":{}},"body":{"interfaces/InterprocessReportResponse.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["interval",{"_index":1165,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["intervalref",{"_index":2549,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["introduced",{"_index":2872,"title":{},"body":{"index.html":{}}}],["invocation",{"_index":2644,"title":{},"body":{"classes/StopWatch.html":{}}}],["invoked",{"_index":2352,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/StopWatch.html":{}}}],["invokes",{"_index":2055,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ip",{"_index":2330,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["ipoint",{"_index":1606,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["iscounter",{"_index":1906,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isempty",{"_index":2160,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isgauge",{"_index":1914,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ishistogram",{"_index":1911,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["islengthattributeinterface",{"_index":1732,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["islengthmethodinterface",{"_index":1734,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["ismeter",{"_index":1912,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismetricset",{"_index":1919,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismonotonecounter",{"_index":1908,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isnan(count",{"_index":1087,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["isnan(counter.getcount",{"_index":1766,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["isnan(histogram.getcount",{"_index":1780,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isnan(meter.getcount",{"_index":1793,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isnan(quantile",{"_index":2444,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["isnan(timer.getcount",{"_index":1799,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isnan(value",{"_index":422,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["isnumber",{"_index":2162,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ispuremonotonecounter",{"_index":1909,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isready",{"_index":1534,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["isserializablebucketcounting",{"_index":261,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isserializablebucketcounting(metric",{"_index":266,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"miscellaneous/functions.html":{}}}],["isserializablemetric",{"_index":139,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isserializablemetric(metric",{"_index":153,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["isserializablesampling",{"_index":2778,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isserializablesampling(metric",{"_index":2386,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"miscellaneous/functions.html":{}}}],["issizeattributeinterface",{"_index":1735,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["issizemethodinterface",{"_index":1737,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["istimer",{"_index":1913,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["it's",{"_index":1366,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["javascript",{"_index":1689,"title":{},"body":{"classes/Int64Wrapper.html":{},"index.html":{}}}],["job",{"_index":2327,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["job_name",{"_index":3617,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["join",{"_index":940,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["join('\\n",{"_index":2315,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["join(dir",{"_index":973,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["join(this.currentdir",{"_index":980,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["join(this.options.tagdelimiter",{"_index":864,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["js",{"_index":929,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["json",{"_index":1235,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["json.value",{"_index":1237,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["keep",{"_index":926,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/MetricRegistryListener.html":{},"additional-documentation/inspector-vm.html":{}}}],["keeps",{"_index":1399,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/SlidingWindowReservoir.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["key",{"_index":191,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["key.replace(prometheusmetricreporter.label_name_replacement_regexp",{"_index":2248,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["keys",{"_index":821,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["keys(fields",{"_index":2276,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["keys(tags",{"_index":2264,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["keys.foreach((key",{"_index":825,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["kind",{"_index":2925,"title":{},"body":{"license.html":{}}}],["known",{"_index":718,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["koa",{"_index":3597,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["label",{"_index":2143,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["label_name_replacement_regexp",{"_index":2144,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["label_name_start_exclusion",{"_index":2151,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["last",{"_index":1201,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastmodifiedfunction",{"_index":1486,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastmodifiedfunction(metric",{"_index":1492,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastreport",{"_index":1503,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastvalue",{"_index":1501,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["latencies",{"_index":3594,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["latency",{"_index":3151,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["latest",{"_index":1876,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["le",{"_index":2263,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["legacy",{"_index":3533,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["length",{"_index":1725,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["lengthattributeinterface",{"_index":1720,"title":{"interfaces/LengthAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["lengthmethodinterface",{"_index":1727,"title":{"interfaces/LengthMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["level",{"_index":1392,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["liability",{"_index":2940,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2937,"title":{},"body":{"license.html":{}}}],["lib",{"_index":3075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libraries",{"_index":3100,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["library",{"_index":1801,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["license",{"_index":2838,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["limitation",{"_index":2905,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2928,"title":{},"body":{"license.html":{}}}],["line",{"_index":332,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-csv.html":{}}}],["linear",{"_index":246,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["linear(start",{"_index":251,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["lineending",{"_index":948,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["lines",{"_index":2229,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"unit-test.html":{},"additional-documentation/inspector-influx.html":{}}}],["lines.push(line",{"_index":2235,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["link",{"_index":135,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{}}}],["linked",{"_index":1861,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["list",{"_index":533,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"classes/Percentiles.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["listener",{"_index":1889,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-metrics.html":{}}}],["listener.metricadded(name",{"_index":2058,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.metricremoved(name",{"_index":2061,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.ts",{"_index":2062,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"coverage.html":{},"unit-test.html":{}}}],["listener.ts:19",{"_index":2068,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listener.ts:28",{"_index":2070,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listeners",{"_index":1926,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listening",{"_index":3224,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["lists",{"_index":663,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{}}}],["literal",{"_index":1050,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/MeasurementPoint.html":{}}}],["local",{"_index":2850,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":3654,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["localhost:8080example",{"_index":3622,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["localhost:9200",{"_index":3542,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["log",{"_index":342,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["logger",{"_index":313,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["loggerreporter",{"_index":1752,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["loggerreporteroptions",{"_index":1753,"title":{"interfaces/LoggerReporterOptions.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["loggerreportingcontext",{"_index":1750,"title":{"interfaces/LoggerReportingContext.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["logic",{"_index":497,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["logline",{"_index":1747,"title":{"interfaces/LogLine.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["logline.metadata",{"_index":1757,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["logline.result.metadata",{"_index":1762,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["logmetadata",{"_index":348,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["logs",{"_index":1760,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["look",{"_index":2830,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["loop",{"_index":3664,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["lower",{"_index":2448,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["lowest",{"_index":1317,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["lowest=1",{"_index":1316,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m",{"_index":1483,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["m.getname",{"_index":2046,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.metricref",{"_index":1990,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.setgroup(metric.getname",{"_index":2038,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m1",{"_index":3175,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["m15",{"_index":3171,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["m15_rate",{"_index":788,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["m1_rate",{"_index":789,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["m5",{"_index":3173,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["m5_rate",{"_index":790,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["made",{"_index":3211,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["main",{"_index":3133,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["mainly",{"_index":2288,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["maintained",{"_index":1322,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["makes",{"_index":744,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["mallocedmemory",{"_index":2545,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["managed",{"_index":1900,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manages",{"_index":1904,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manually",{"_index":1930,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["many",{"_index":669,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["map",{"_index":77,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["map((boundary",{"_index":2311,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["map((field",{"_index":2277,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["map((m",{"_index":1989,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((metric",{"_index":1494,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["map((metrics",{"_index":834,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["map((registration",{"_index":1962,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((registry",{"_index":832,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["map((result",{"_index":402,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{}}}],["map((tag",{"_index":862,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["map(async",{"_index":404,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["map.set(metric.getname",{"_index":2594,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["map.set(registration.name",{"_index":1948,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mapping",{"_index":230,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{}}}],["maps",{"_index":83,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["maptometadata",{"_index":128,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["maptometadata(metadatamap",{"_index":1827,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"miscellaneous/functions.html":{}}}],["maptometadata(metric.getmetadatamap",{"_index":167,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["maptometadata(this.metadatamap",{"_index":178,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["maptotags",{"_index":131,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["maptotags(metric.gettags",{"_index":164,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["maptotags(registry.gettags",{"_index":2231,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["maptotags(tagmap",{"_index":2704,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"miscellaneous/functions.html":{}}}],["maptotags(this.tagmap",{"_index":179,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["mark",{"_index":241,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["master",{"_index":539,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["matching",{"_index":203,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["math.exp",{"_index":1176,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["math.floor(pos",{"_index":2451,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.round(pos",{"_index":2446,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.sqrt(sum",{"_index":2429,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["max",{"_index":775,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["max=100",{"_index":1318,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["maxbufferlines",{"_index":3577,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["maximum",{"_index":1015,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{}}}],["maxretries",{"_index":3579,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["maxretrydelay",{"_index":3580,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["maxsize",{"_index":1018,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["mean",{"_index":776,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["mean_rate",{"_index":791,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meaning",{"_index":217,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{}}}],["meanrate",{"_index":1850,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["means",{"_index":1870,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["meant",{"_index":3078,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["measure",{"_index":1557,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["measurement",{"_index":302,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{}}}],["measurement[`${prefix}.count",{"_index":430,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m15_rate",{"_index":470,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m1_rate",{"_index":472,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m5_rate",{"_index":474,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.max",{"_index":444,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean",{"_index":446,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean_rate",{"_index":476,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.min",{"_index":448,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p50",{"_index":450,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p75",{"_index":452,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p95",{"_index":454,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p98",{"_index":456,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p99",{"_index":458,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p999",{"_index":460,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.stddev",{"_index":462,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.value",{"_index":436,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement_type",{"_index":1759,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["measurementpoint",{"_index":1526,"title":{"interfaces/MeasurementPoint.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["measures",{"_index":2677,"title":{},"body":{"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["mechanism",{"_index":2206,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["memberof",{"_index":172,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["memory",{"_index":2524,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["memorymetrics",{"_index":3660,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["memorymetrics.stop",{"_index":3681,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["merchantability",{"_index":2930,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2908,"title":{},"body":{"license.html":{}}}],["message",{"_index":540,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"unit-test.html":{}}}],["message.targetreportertype",{"_index":1420,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["message.ts",{"_index":1705,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"coverage.html":{},"unit-test.html":{}}}],["message.type",{"_index":1419,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["message_type",{"_index":1394,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["message_type_request",{"_index":2135,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["message_type_response",{"_index":2138,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["messages",{"_index":538,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["messagesand",{"_index":3226,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["messageto",{"_index":3223,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["messagetype",{"_index":1004,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["messaging",{"_index":2205,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["meta_",{"_index":710,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadata",{"_index":20,"title":{"interfaces/Metadata.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadata[key",{"_index":1826,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadata[metadataname",{"_index":857,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadata[name",{"_index":1829,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadata[percentiles.metadata_name",{"_index":2309,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metadata_name",{"_index":2094,"title":{},"body":{"classes/Percentiles.html":{}}}],["metadatacolumnprefix",{"_index":696,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadatacontainer",{"_index":129,"title":{"interfaces/MetadataContainer.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{}}}],["metadatadelimiter",{"_index":697,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadataexportmode",{"_index":689,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadatafilter",{"_index":703,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadatamap",{"_index":32,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"miscellaneous/functions.html":{}}}],["metadatamap.foreach((value",{"_index":1828,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadatamap.keys",{"_index":840,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatamap.set(key",{"_index":1825,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadatamaparray.foreach((metadatamap",{"_index":838,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadataname",{"_index":839,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatanames",{"_index":706,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatanames.add(metadataname",{"_index":841,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadataname}=${quote}${metadatavalue}${quote}${this.options.metadatadelimiter",{"_index":858,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatastr",{"_index":854,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatastr.slice(0",{"_index":859,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatatomap",{"_index":2773,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["metadatatomap(metadata",{"_index":1823,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"miscellaneous/functions.html":{}}}],["metadatavalue",{"_index":856,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["meter",{"_index":314,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["meter#getcount",{"_index":1792,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meter(clock",{"_index":2014,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["meter.getcount",{"_index":465,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["meter.getgroup",{"_index":467,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meter.getname",{"_index":468,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meterctx",{"_index":1453,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["meterctx.metrics",{"_index":1470,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metered",{"_index":1834,"title":{"interfaces/Metered.html":{}},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["meteredrates",{"_index":1847,"title":{"interfaces/MeteredRates.html":{}},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["meterjson",{"_index":2690,"title":{},"body":{"classes/StopWatch.html":{}}}],["meterresults",{"_index":1472,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["meters",{"_index":734,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["method",{"_index":151,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["methods",{"_index":34,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["metric",{"_index":11,"title":{"interfaces/Metric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["metric's",{"_index":2695,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["metric.counts",{"_index":270,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["metric.description",{"_index":157,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.getbuckets",{"_index":268,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["metric.getcount",{"_index":3549,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["metric.getcounts",{"_index":271,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["metric.getdescription",{"_index":158,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.getgroup",{"_index":161,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metric.getgroup()}.${metric.getname",{"_index":489,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getgroup()}.${name",{"_index":2054,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetadatamap",{"_index":836,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metric.getmetriclist().foreach((m",{"_index":2037,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetrics().foreach((m",{"_index":2044,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getname",{"_index":155,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metric.getsnapshot",{"_index":2390,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["metric.group",{"_index":160,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.metadata",{"_index":166,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.metricref",{"_index":1968,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.name",{"_index":154,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.setdescription(description",{"_index":2031,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setgroup(group",{"_index":2030,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setname(this.generatename(name",{"_index":2042,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.tags",{"_index":163,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric_name_replacement_regexp",{"_index":2158,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metric_name_start_exclusion",{"_index":2159,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricadded",{"_index":2065,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricadded(name",{"_index":2067,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricdocumentbuilder",{"_index":1048,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metricentry",{"_index":1382,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":1508,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricentry.lastvalue",{"_index":1506,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricid",{"_index":1489,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricinfodeterminator",{"_index":1052,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metricname",{"_index":1894,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricname}${fieldstr}{${tagstr",{"_index":2283,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricname}_bucket{${tagstr}${tagprefix}le=\"${boundary",{"_index":2303,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricname}{${tagstr}${tagprefix}quantile=\"${boundary",{"_index":2313,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricref",{"_index":1884,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref.getname",{"_index":1903,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistration",{"_index":1877,"title":{"classes/MetricRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{}}}],["metricregistration(metric",{"_index":2034,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistries",{"_index":1397,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricregistry",{"_index":315,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["metricregistry.defaultnamefactory",{"_index":1925,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.iscounter(instance",{"_index":1910,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.isgauge(metric",{"_index":2032,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.ismetricset(metric",{"_index":2036,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistrylistener",{"_index":1888,"title":{"interfaces/MetricRegistryListener.html":{}},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricregistrylistenerregistration",{"_index":1899,"title":{"classes/MetricRegistryListenerRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricregistrylistenerregistration(listener",{"_index":1929,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry}'s",{"_index":1437,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricremoved",{"_index":2066,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricremoved(name",{"_index":2069,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricreporter",{"_index":556,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricreporter.message_type",{"_index":1418,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricreporteroptions",{"_index":557,"title":{"interfaces/MetricReporterOptions.html":{}},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["metrics",{"_index":326,"title":{"additional-documentation/inspector-metrics.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetered.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["metrics.foreach((metric",{"_index":1995,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.length",{"_index":1988,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.map((metric",{"_index":835,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metrics.push(this.availablesize",{"_index":2521,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics.push(this.physicalsize",{"_index":2522,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics.push(this.size",{"_index":2519,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics.push(this.usedsize",{"_index":2520,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics/job/${this.options.job}/instance/${this.options.instance",{"_index":2359,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["metrics/lib/metrics/clock.ts",{"_index":490,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/clock.ts:48",{"_index":494,"title":{},"body":{"classes/Clock.html":{}}}],["metrics/lib/metrics/counter.ts",{"_index":580,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/counter.ts:129",{"_index":601,"title":{},"body":{"classes/Counter.html":{}}}],["metrics/lib/metrics/counter.ts:24",{"_index":2081,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:46",{"_index":2083,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:60",{"_index":2082,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:70",{"_index":2084,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:98",{"_index":588,"title":{},"body":{"classes/Counter.html":{}}}],["metrics/lib/metrics/event.ts",{"_index":2757,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/gauge.ts",{"_index":1225,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/gauge.ts:22",{"_index":1229,"title":{},"body":{"interfaces/Gauge.html":{}}}],["metrics/lib/metrics/gauge.ts:42",{"_index":2452,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["metrics/lib/metrics/gauge.ts:63",{"_index":2453,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["metrics/lib/metrics/gauge.ts:74",{"_index":2455,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["metrics/lib/metrics/hdr",{"_index":1244,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["metrics/lib/metrics/histogram.ts",{"_index":2763,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/meter.ts",{"_index":2766,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/metric",{"_index":1878,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/counting.ts",{"_index":206,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/counting.ts:120",{"_index":223,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["metrics/lib/metrics/model/counting.ts:130",{"_index":229,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["metrics/lib/metrics/model/counting.ts:137",{"_index":274,"title":{},"body":{"interfaces/BucketToCountMap.html":{}}}],["metrics/lib/metrics/model/counting.ts:20",{"_index":638,"title":{},"body":{"interfaces/Counting.html":{}}}],["metrics/lib/metrics/model/counting.ts:43",{"_index":296,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/counting.ts:67",{"_index":293,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/counting.ts:88",{"_index":278,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/counting.ts:97",{"_index":290,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/groupable.ts",{"_index":1238,"title":{},"body":{"interfaces/Groupable.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/groupable.ts:18",{"_index":1241,"title":{},"body":{"interfaces/Groupable.html":{}}}],["metrics/lib/metrics/model/groupable.ts:27",{"_index":1242,"title":{},"body":{"interfaces/Groupable.html":{}}}],["metrics/lib/metrics/model/int64.ts",{"_index":1678,"title":{},"body":{"classes/Int64Wrapper.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["metrics/lib/metrics/model/int64.ts:21",{"_index":1684,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/int64.ts:40",{"_index":1686,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/int64.ts:51",{"_index":1687,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/int64.ts:61",{"_index":1693,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/metadata",{"_index":1813,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/metered.ts",{"_index":1835,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/metered.ts:20",{"_index":1843,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:28",{"_index":1840,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:36",{"_index":1842,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:44",{"_index":1841,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:52",{"_index":1845,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:62",{"_index":1853,"title":{},"body":{"interfaces/MeteredRates.html":{}}}],["metrics/lib/metrics/model/metric.ts",{"_index":7,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/metric.ts:118",{"_index":1855,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:127",{"_index":1857,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:135",{"_index":1854,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:144",{"_index":1856,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:217",{"_index":61,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:225",{"_index":76,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:233",{"_index":74,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:241",{"_index":81,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:249",{"_index":73,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:257",{"_index":79,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:265",{"_index":82,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:267",{"_index":123,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:271",{"_index":124,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:275",{"_index":94,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:279",{"_index":92,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:283",{"_index":100,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:289",{"_index":111,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:294",{"_index":95,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:298",{"_index":113,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:303",{"_index":88,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:307",{"_index":107,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:312",{"_index":90,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:316",{"_index":109,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:321",{"_index":98,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:325",{"_index":97,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:329",{"_index":115,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:334",{"_index":117,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:339",{"_index":85,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:344",{"_index":102,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:349",{"_index":104,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:354",{"_index":122,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:367",{"_index":118,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/moving",{"_index":1151,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/reservoir.ts",{"_index":1012,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:113",{"_index":1026,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:136",{"_index":2476,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:144",{"_index":2475,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:152",{"_index":2474,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:170",{"_index":2477,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:183",{"_index":2479,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:19",{"_index":2380,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:198",{"_index":2478,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:28",{"_index":2382,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:36",{"_index":2381,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:58",{"_index":1024,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:66",{"_index":1022,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:84",{"_index":1025,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:97",{"_index":1028,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/sampling.ts",{"_index":2383,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/sampling.ts:19",{"_index":2384,"title":{},"body":{"interfaces/Sampling.html":{}}}],["metrics/lib/metrics/model/snapshot.ts",{"_index":2407,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:105",{"_index":2489,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:114",{"_index":2490,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:150",{"_index":2457,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:169",{"_index":2458,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:17",{"_index":2480,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:179",{"_index":2459,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:189",{"_index":2460,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:199",{"_index":2461,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:209",{"_index":2462,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:219",{"_index":2465,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:229",{"_index":2463,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:239",{"_index":2466,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:249",{"_index":2469,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:25",{"_index":2481,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:259",{"_index":2470,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:269",{"_index":2464,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:285",{"_index":2467,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:319",{"_index":2468,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:33",{"_index":2482,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:41",{"_index":2483,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:49",{"_index":2484,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:57",{"_index":2487,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:65",{"_index":2485,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:73",{"_index":2488,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:81",{"_index":2491,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:89",{"_index":2492,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:97",{"_index":2486,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/summarizing.ts",{"_index":2404,"title":{},"body":{"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/summarizing.ts:19",{"_index":2692,"title":{},"body":{"interfaces/Summarizing.html":{}}}],["metrics/lib/metrics/model/taggable.ts",{"_index":2693,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/taggable.ts:24",{"_index":2697,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:33",{"_index":2696,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:43",{"_index":2700,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:52",{"_index":2701,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:6",{"_index":2707,"title":{},"body":{"interfaces/Tags.html":{}}}],["metrics/lib/metrics/model/taggable.ts:61",{"_index":2694,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:70",{"_index":2698,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:79",{"_index":2699,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/time",{"_index":2710,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["metrics/lib/metrics/reporter/interprocess",{"_index":1704,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/logger",{"_index":1748,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/logger.ts",{"_index":1800,"title":{},"body":{"interfaces/Logger.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/metric",{"_index":523,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["metrics/lib/metrics/reporter/overall",{"_index":2089,"title":{},"body":{"interfaces/OverallReportContext.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/report",{"_index":2368,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/reporting",{"_index":2377,"title":{},"body":{"interfaces/ReportingResult.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/scheduled",{"_index":2391,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/size",{"_index":1721,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/timer.ts",{"_index":2635,"title":{},"body":{"classes/StopWatch.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/timer.ts:30",{"_index":2640,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:38",{"_index":2641,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:46",{"_index":2639,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:66",{"_index":2642,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:78",{"_index":2643,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/packages/inspector",{"_index":2962,"title":{},"body":{"unit-test.html":{}}}],["metrics:metric",{"_index":1395,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metrics[0",{"_index":1994,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics_path",{"_index":3619,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["metricset",{"_index":1890,"title":{"interfaces/MetricSet.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SpaceHistory.html":{},"coverage.html":{}}}],["metricsetreportcontext",{"_index":316,"title":{"interfaces/MetricSetReportContext.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["metricsfile",{"_index":951,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["metricsstr",{"_index":1717,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricstates",{"_index":1402,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metrictagsarray.foreach((metrictags",{"_index":848,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metrictype",{"_index":317,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metrictype}\\n",{"_index":2275,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["microsecond",{"_index":2721,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["microsecond.convertto(1000",{"_index":2723,"title":{},"body":{"classes/TimeUnit.html":{}}}],["microseconds",{"_index":3162,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["millisecond",{"_index":318,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MovingAverage.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["milliseconds",{"_index":498,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["millisecond}s",{"_index":2395,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["min",{"_index":777,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["minimal",{"_index":344,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["minimum",{"_index":559,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"additional-documentation/inspector-csv.html":{}}}],["minreportingtimeout",{"_index":357,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{}}}],["minretrydelay",{"_index":3582,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["minute",{"_index":1214,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["minute.convertto(this.options.minreportingtimeout",{"_index":1507,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["minutes",{"_index":562,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-csv.html":{}}}],["miscellaneous",{"_index":2810,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2839,"title":{},"body":{"index.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["mkdir",{"_index":898,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["mkdir(dir",{"_index":920,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["mm",{"_index":1065,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["model",{"_index":2832,"title":{},"body":{"index.html":{}}}],["model/counting",{"_index":633,"title":{},"body":{"classes/Counter.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/StopWatch.html":{}}}],["model/int64",{"_index":2645,"title":{},"body":{"classes/StopWatch.html":{}}}],["model/metered",{"_index":2646,"title":{},"body":{"classes/StopWatch.html":{}}}],["model/metric",{"_index":634,"title":{},"body":{"classes/Counter.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/ReportingResult.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["model/reservoir",{"_index":1892,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["model/sampling",{"_index":1291,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["model/snapshot",{"_index":1292,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["model/summarizing",{"_index":1294,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["model/taggable",{"_index":1378,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["model/time",{"_index":1379,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["modify",{"_index":2907,"title":{},"body":{"license.html":{}}}],["module",{"_index":328,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"classes/HdrSnapshot.html":{},"interfaces/MetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["modules",{"_index":2827,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["modules.inspector",{"_index":2826,"title":{},"body":{"index.html":{}}}],["moment",{"_index":661,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{}}}],["moment().format(\"yyyymmddhh00\")}_${process.pid}_metrics.csv",{"_index":3529,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["moment().format(\"yyyymmddhh00\")}metrics.csv",{"_index":3342,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["moment().format('yyyymmddhh00')}_metrics.csv",{"_index":952,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["moment.tz(date",{"_index":759,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["monitoring",{"_index":2821,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["mono",{"_index":2824,"title":{},"body":{"index.html":{}}}],["monotone",{"_index":1085,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["monotonecounter",{"_index":236,"title":{"classes/MonotoneCounter.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["monotonecounter#getcount",{"_index":1764,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["monotonecounter(name",{"_index":2009,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["monotonecounter:117",{"_index":606,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:24",{"_index":591,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:60",{"_index":609,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:70",{"_index":610,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounterresults",{"_index":1457,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["monotonecounters",{"_index":735,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["monotonically",{"_index":635,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"additional-documentation/inspector-metrics.html":{}}}],["month",{"_index":1072,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["monthprefix",{"_index":1074,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["monthprefix}${month",{"_index":1076,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["more",{"_index":1207,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["moving",{"_index":1154,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["movingaverage",{"_index":1157,"title":{"interfaces/MovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["ms",{"_index":3573,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["multi",{"_index":2835,"title":{},"body":{"index.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["multiple",{"_index":1881,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["multiplier",{"_index":1191,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["multiplying",{"_index":1199,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["myarray",{"_index":3139,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["myarray.push(1",{"_index":3147,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["myarray.push(2",{"_index":3148,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["myarray.push(3",{"_index":3149,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["n",{"_index":954,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-csv.html":{}}}],["n${metricname}_bucket{${tagstr}${tagprefix}le=\"+inf",{"_index":2306,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["n\\tcount",{"_index":1781,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm15_rate",{"_index":1794,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm1_rate",{"_index":1796,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm5_rate",{"_index":1795,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmax",{"_index":1782,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmean",{"_index":1783,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmean_rate",{"_index":1797,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmin",{"_index":1784,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp50",{"_index":1785,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp75",{"_index":1786,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp95",{"_index":1787,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp98",{"_index":1788,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp99",{"_index":1789,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp999",{"_index":1790,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tstddev",{"_index":1791,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["name",{"_index":18,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-vm.html":{}}}],["name.replace(prometheusmetricreporter.metric_name_replacement_regexp",{"_index":2317,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["name.slice(1",{"_index":2319,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["namefactory",{"_index":1893,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{}}}],["names",{"_index":105,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["names.foreach((name",{"_index":194,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["nan",{"_index":1276,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["nanosecond",{"_index":1211,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nanosecond.convertto(1000",{"_index":2720,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nanosecond.convertto(this.timeunitinnanoseconds",{"_index":1222,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["nanoseconds",{"_index":499,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["nanosecondsperunit",{"_index":2713,"title":{},"body":{"classes/TimeUnit.html":{}}}],["native",{"_index":1262,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["nativehistogram",{"_index":1296,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nativehistogram(lowest",{"_index":1335,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["nats",{"_index":2846,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["nature",{"_index":3642,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["necessarily",{"_index":1482,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["necessary",{"_index":3083,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["need",{"_index":563,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["needed",{"_index":14,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{}}}],["needs",{"_index":907,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["negative",{"_index":603,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["new",{"_index":78,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["newcounter",{"_index":2005,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhdrhistogram",{"_index":2017,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhistogram",{"_index":2020,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmeter",{"_index":2012,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmonotonecounter",{"_index":2008,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newpoint",{"_index":1666,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["newpoint.fields[fieldname",{"_index":1671,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["newpoint.tag(tag",{"_index":1674,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["newstopwatch",{"_index":2686,"title":{},"body":{"classes/StopWatch.html":{}}}],["newtimer",{"_index":2023,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["next",{"_index":331,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["node",{"_index":928,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Logger.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["nodejs",{"_index":2525,"title":{},"body":{"classes/SpaceHistory.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["nodejs.it",{"_index":3212,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["nodejs.timer",{"_index":2393,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SpaceHistory.html":{}}}],["nodexx",{"_index":2864,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":2934,"title":{},"body":{"license.html":{}}}],["normalized",{"_index":2241,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["normalizedfilename",{"_index":972,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["normalizedkey",{"_index":2247,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["normally",{"_index":1873,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["note",{"_index":3679,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["nothing",{"_index":381,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["notice",{"_index":2920,"title":{},"body":{"license.html":{}}}],["now",{"_index":2256,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-metrics.html":{}}}],["now.getutcmilliseconds",{"_index":2295,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["npm",{"_index":3079,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["null",{"_index":376,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["num",{"_index":1680,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["number",{"_index":56,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["number.isfinite(value",{"_index":2291,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["number.isnan(gauge.getvalue",{"_index":1772,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["number.isnan(value",{"_index":1090,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["numbers",{"_index":1030,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["numeric",{"_index":1530,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-csv.html":{}}}],["o",{"_index":1398,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["object",{"_index":226,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":1758,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["object.keys(counts",{"_index":2299,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["object.keys(customtags).foreach((key",{"_index":1514,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["object.keys(fields",{"_index":762,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(metadata).foreach((key",{"_index":1824,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["object.keys(metadata).foreach((metadataname",{"_index":855,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(metrictags).foreach((tag",{"_index":849,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(registrytags).foreach((key",{"_index":2252,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["object.keys(tags",{"_index":861,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(tags).foreach((key",{"_index":2702,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["object.keys(workers",{"_index":1008,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["object],[object",{"_index":2076,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["objects",{"_index":1724,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"additional-documentation/inspector-metrics.html":{}}}],["obtaining",{"_index":2900,"title":{},"body":{"license.html":{}}}],["official",{"_index":3530,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["old",{"_index":924,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["older",{"_index":505,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["on(messagetype",{"_index":2372,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["one",{"_index":242,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["one.milliseconds",{"_index":512,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["one.nanoseconds",{"_index":511,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onevalue",{"_index":510,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onwards",{"_index":3532,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["open",{"_index":2130,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["operation",{"_index":3524,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["operations",{"_index":1598,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["optional",{"_index":87,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":340,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["options.ts",{"_index":524,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["options.ts:122",{"_index":887,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:129",{"_index":888,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:135",{"_index":889,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:142",{"_index":890,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:148",{"_index":892,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:154",{"_index":891,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:171",{"_index":1037,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:178",{"_index":1038,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:184",{"_index":1039,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:191",{"_index":1040,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:197",{"_index":1042,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:203",{"_index":1041,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:51",{"_index":536,"title":{},"body":{"interfaces/ClusterOptions.html":{}}}],["options.ts:60",{"_index":543,"title":{},"body":{"interfaces/ClusterOptions.html":{}}}],["options.ts:67",{"_index":532,"title":{},"body":{"interfaces/ClusterOptions.html":{}}}],["order",{"_index":1711,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"classes/SlidingWindowReservoir.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["org",{"_index":1627,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["org.id",{"_index":1663,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["organization",{"_index":1637,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["orgid",{"_index":1662,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["orgs",{"_index":1658,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["orgsapi",{"_index":1649,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["orgsapi(this.db",{"_index":1657,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["orgsapi.getorgs",{"_index":1659,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["origin/gh",{"_index":2888,"title":{},"body":{"index.html":{}}}],["originating",{"_index":1708,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{}}}],["ot",{"_index":2335,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-influx.html":{}}}],["otherwise",{"_index":719,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"license.html":{}}}],["out",{"_index":700,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["output",{"_index":2339,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["over",{"_index":3099,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["overall",{"_index":1340,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["overallctx",{"_index":375,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["overallctx.result",{"_index":2203,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["overallctx.result}${lines.join('\\n",{"_index":2236,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["overallreportcontext",{"_index":319,"title":{"interfaces/OverallReportContext.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["override",{"_index":3344,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["override_tag",{"_index":3346,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["overview",{"_index":2948,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.concat(c",{"_index":1119,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["p50",{"_index":778,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p75",{"_index":779,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p95",{"_index":780,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p98",{"_index":781,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p99",{"_index":782,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p999",{"_index":783,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["package",{"_index":2890,"title":{"properties.html":{}},"body":{"index.html":{}}}],["packages",{"_index":2877,"title":{},"body":{"index.html":{}}}],["packages/.../carbonmetricreporter.ts",{"_index":3071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../clock.ts",{"_index":2813,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../counting.ts",{"_index":2814,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../csvmetricreporter.ts",{"_index":2812,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["packages/.../defaultprometheusclusteroptions.ts",{"_index":3069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../elasticsearchmetricreporter.ts",{"_index":2954,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../hdr",{"_index":3073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../int64.ts",{"_index":3072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../metadata",{"_index":2817,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../metric",{"_index":2955,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["packages/.../metric.ts",{"_index":2815,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../prometheusmetricreporter.ts",{"_index":2957,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../sampling.ts",{"_index":2816,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../scheduled",{"_index":2958,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../size",{"_index":2959,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../taggable.ts",{"_index":2818,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../time",{"_index":3068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../v8gcmetrics.ts",{"_index":3070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/inspector",{"_index":6,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["page",{"_index":3077,"title":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}},"body":{}}],["pages",{"_index":2885,"title":{},"body":{"index.html":{}}}],["param",{"_index":137,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["parameter",{"_index":501,"title":{},"body":{"classes/Clock.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["parameters",{"_index":86,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":748,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["part",{"_index":3528,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["partial",{"_index":1632,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["particular",{"_index":2932,"title":{},"body":{"license.html":{}}}],["party",{"_index":2843,"title":{},"body":{"index.html":{}}}],["passed",{"_index":134,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["password",{"_index":3560,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["path",{"_index":941,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["payload",{"_index":2347,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["payload.length",{"_index":2356,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["peakmallocedmemory",{"_index":2547,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["per",{"_index":67,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["percent",{"_index":2093,"title":{},"body":{"classes/Percentiles.html":{}}}],["percentile",{"_index":1266,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["percentiles",{"_index":2091,"title":{"classes/Percentiles.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["periodical",{"_index":385,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["permission",{"_index":2894,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2914,"title":{},"body":{"license.html":{}}}],["person",{"_index":2899,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2915,"title":{},"body":{"license.html":{}}}],["physical",{"_index":2503,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["physicalsize",{"_index":2497,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["pid",{"_index":3228,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["placeholder",{"_index":555,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["please",{"_index":1331,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["pnpm",{"_index":2873,"title":{},"body":{"index.html":{}}}],["point",{"_index":495,"title":{},"body":{"classes/Clock.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["point(point.measurement",{"_index":1667,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["point.fields",{"_index":1670,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["point.fields[fieldname",{"_index":1672,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["point.tags",{"_index":1673,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["point.tags[tag",{"_index":1675,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["point.timestamp",{"_index":1546,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["points",{"_index":1536,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["points.foreach((point",{"_index":1553,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["points.length",{"_index":1552,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["pool",{"_index":2680,"title":{},"body":{"classes/StopWatch.html":{}}}],["port",{"_index":2328,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["portions",{"_index":2923,"title":{},"body":{"license.html":{}}}],["pos",{"_index":2445,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["position",{"_index":1033,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["possible",{"_index":664,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["precision",{"_index":252,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"additional-documentation/inspector-metrics.html":{}}}],["precision=\"s",{"_index":1608,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["precision='s",{"_index":1651,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["precision=10000",{"_index":250,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["prefix",{"_index":428,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-csv.html":{}}}],["prerequisites",{"_index":2852,"title":{},"body":{"index.html":{}}}],["previously",{"_index":1358,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["prints",{"_index":1755,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"additional-documentation/inspector-metrics.html":{}}}],["private",{"_index":25,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{}}}],["probably",{"_index":755,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["procedures",{"_index":1436,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["process",{"_index":68,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["process.on(messagetype",{"_index":1005,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["process.pid",{"_index":3230,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["process.send",{"_index":1000,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["process.send(message",{"_index":1010,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["processes",{"_index":70,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["processesand",{"_index":3646,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["processmetric",{"_index":3672,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["processmetric.stop();license",{"_index":3684,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["produces",{"_index":3249,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["prog",{"_index":2392,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["progress",{"_index":493,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["project",{"_index":2870,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["prometheus",{"_index":2123,"title":{"additional-documentation/inspector-prometheus.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["prometheus's",{"_index":2337,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts",{"_index":986,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:27",{"_index":996,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:34",{"_index":992,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:41",{"_index":993,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:48",{"_index":991,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:69",{"_index":1001,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:80",{"_index":998,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:95",{"_index":999,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/interprocessreportrequest.ts",{"_index":1710,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/interprocessreportresponse.ts",{"_index":1715,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/percentiles.ts",{"_index":2092,"title":{},"body":{"classes/Percentiles.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/percentiles.ts:16",{"_index":2095,"title":{},"body":{"classes/Percentiles.html":{}}}],["prometheus/lib/metrics/percentiles.ts:23",{"_index":2102,"title":{},"body":{"classes/Percentiles.html":{}}}],["prometheus/lib/metrics/prometheusclusteroptions.ts",{"_index":2111,"title":{},"body":{"interfaces/PrometheusClusterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/prometheusmetricreporter.ts",{"_index":2113,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/prometheusmetricreporter.ts:58",{"_index":2114,"title":{},"body":{"interfaces/PrometheusFields.html":{}}}],["prometheus/lib/metrics/prometheusreporteroptions.ts",{"_index":2320,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/pushgatewaymetricreporter.ts",{"_index":2325,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus:metric",{"_index":2136,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusclusteroptions",{"_index":989,"title":{"interfaces/PrometheusClusterOptions.html":{}},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["prometheusfields",{"_index":2112,"title":{"interfaces/PrometheusFields.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["prometheusmetricreporter",{"_index":988,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["prometheusmetricreporter#geteventstring",{"_index":2345,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["prometheusmetricreporter#getmetricsstring",{"_index":2131,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter#message_type_request",{"_index":2212,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter#message_type_response",{"_index":2223,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isempty(description",{"_index":2286,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isempty(field",{"_index":2279,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isempty(tagstr",{"_index":2297,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isnumber(value",{"_index":2290,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.label_name_start_exclusion.includes(normalizedkey.charat(0",{"_index":2250,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.message_type_request",{"_index":2186,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.message_type_response",{"_index":2217,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.metric_name_start_exclusion.includes(name.charat(0",{"_index":2318,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricresult",{"_index":2127,"title":{"interfaces/PrometheusMetricResult.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["prometheusmetrictype",{"_index":2124,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{}}}],["prometheusreporteroptions",{"_index":2121,"title":{"interfaces/PrometheusReporterOptions.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["promise",{"_index":369,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["promise((resolve",{"_index":405,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["promise.all(results",{"_index":401,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise.all(tasks",{"_index":829,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["promise.all(workerpromises",{"_index":2198,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["promise.reject(new",{"_index":1544,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["promise.resolve",{"_index":1121,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["properties",{"_index":24,"title":{"properties.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"properties.html":{}}}],["property",{"_index":614,"title":{},"body":{"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["protected",{"_index":31,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["provide",{"_index":1386,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["provided",{"_index":1313,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PushgatewayReporterOptions.html":{},"license.html":{}}}],["proxy",{"_index":1880,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["prune",{"_index":2887,"title":{},"body":{"index.html":{}}}],["pseudo",{"_index":1385,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["public",{"_index":28,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{}}}],["publish",{"_index":1061,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"license.html":{}}}],["publishdocs",{"_index":2889,"title":{},"body":{"index.html":{}}}],["published",{"_index":3550,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["publishlicense",{"_index":2891,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2933,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":3588,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["pushgateway",{"_index":2332,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["pushgatewaymetricreporter",{"_index":2326,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["pushgatewaymetricreporter.you",{"_index":3656,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["pushgatewayreporteroptions",{"_index":2324,"title":{"interfaces/PushgatewayReporterOptions.html":{}},"body":{"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{}}}],["pushreporter",{"_index":3653,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["pushreporter.start();license",{"_index":3657,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["pushreporter.start();multi",{"_index":3655,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["put",{"_index":2351,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["quantile",{"_index":1285,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["quantiles",{"_index":2103,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["queue",{"_index":897,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["queuesize",{"_index":3137,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["queuesize.getvalue",{"_index":3146,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["queuesize.setvalue(12345",{"_index":3144,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["queuing",{"_index":1367,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["quote",{"_index":851,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["quotes",{"_index":684,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["random",{"_index":1032,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["randombytes",{"_index":2115,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["randombytes(32).tostring('hex",{"_index":2211,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["randomid",{"_index":2209,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["range",{"_index":244,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"additional-documentation/inspector-metrics.html":{}}}],["rate",{"_index":1192,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["rates",{"_index":1846,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["reached",{"_index":1016,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["readonly",{"_index":29,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ready",{"_index":1533,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":1130,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["reason.message",{"_index":1131,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["rebuild",{"_index":723,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["received",{"_index":2169,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["receiver",{"_index":552,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["receiver.ts",{"_index":2369,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{},"coverage.html":{},"unit-test.html":{}}}],["receiver.ts:21",{"_index":2375,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["receives",{"_index":2376,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["recorded",{"_index":1289,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["recording",{"_index":2591,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["reduce((p",{"_index":1117,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reference",{"_index":391,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/HdrSnapshot.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["referenced",{"_index":1264,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["references",{"_index":1905,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["refers",{"_index":2379,"title":{},"body":{"interfaces/ReportingResult.html":{}}}],["reflected",{"_index":1820,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["reg",{"_index":1423,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["regardless",{"_index":1227,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleGauge.html":{}}}],["regexp('[^a",{"_index":2145,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["register",{"_index":2041,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["registered",{"_index":1548,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-vm.html":{}}}],["registermetric",{"_index":2029,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registers",{"_index":2026,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration",{"_index":1895,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-metrics.html":{}}}],["registration.metricref",{"_index":1949,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration.remove();metric",{"_index":3202,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry",{"_index":377,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["registry's",{"_index":1444,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.addlistener(new",{"_index":3200,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.getcounterlist",{"_index":1460,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.getdefaultclock",{"_index":3663,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.getgaugelist",{"_index":1463,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gethistogramlist",{"_index":1467,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.getmeterlist",{"_index":1471,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.getmetriclist",{"_index":833,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["registry.getmonotonecounterlist",{"_index":1456,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gettags",{"_index":1510,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gettags().foreach((tag",{"_index":1511,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gettimerlist",{"_index":1475,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.newcounter(\"newallocations",{"_index":3210,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newcounter(\"requestcount",{"_index":3112,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newcounter(\"requests",{"_index":3201,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newhdrhistogram(\"requestlatency",{"_index":3160,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newhistogram(\"requestlatency",{"_index":3153,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newmeter(\"callcount",{"_index":3168,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newmonotonecounter(\"errorcount",{"_index":3118,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newtimer(\"callstats",{"_index":3179,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newtimer(\"requests",{"_index":3106,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["registry.newtimer(\"requests1",{"_index":3234,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["registry.newtimer(\"requests2",{"_index":3236,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["registry.newtimer(\"requests3",{"_index":3238,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["registry.registermetric(arraylength",{"_index":3143,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.registermetric(capacity",{"_index":3207,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.registermetric(eventloop",{"_index":3677,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(gc",{"_index":3676,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(memorymetrics",{"_index":3675,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(processmetric",{"_index":3678,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(queuesize",{"_index":3142,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.ts",{"_index":1879,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["registry.ts:25",{"_index":2072,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:41",{"_index":2073,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:61",{"_index":1887,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registry.ts:68",{"_index":1886,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registrytags",{"_index":2230,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["registrytags[key",{"_index":2253,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reject",{"_index":406,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["reject(err",{"_index":415,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["related",{"_index":2523,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["remaining",{"_index":1353,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["removal",{"_index":2064,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["remove",{"_index":1897,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removecounter",{"_index":1997,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removed",{"_index":2059,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removegauge",{"_index":1999,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removehistogram",{"_index":2000,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removelistener",{"_index":1931,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetadata",{"_index":43,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/MetadataContainer.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["removemetadata(name",{"_index":99,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["removemeter",{"_index":2001,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetric",{"_index":1987,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetricregistry",{"_index":1347,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["removemetricregistry(metricregistry",{"_index":1355,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["removemetrics",{"_index":1986,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removes",{"_index":1357,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["removetag",{"_index":44,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{}}}],["removetag(name",{"_index":101,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["removetags",{"_index":45,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["removetags(...names",{"_index":103,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["removetimer",{"_index":2002,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["rendered",{"_index":1719,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{}}}],["replace",{"_index":2140,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["replaced",{"_index":1017,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["report",{"_index":301,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["report.date",{"_index":1426,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.counters",{"_index":1428,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.gauges",{"_index":1429,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.histograms",{"_index":1430,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.meters",{"_index":1431,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.monotonecounters",{"_index":1427,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.timers",{"_index":1432,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportcounter",{"_index":420,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reported",{"_index":720,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["reporter",{"_index":346,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["reporter.addmetricregistry(registry",{"_index":3107,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reporter.gettags().set(\"app",{"_index":3216,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["reporter.reportevent(event);gauge",{"_index":3134,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["reporter.reportevent(event);multi",{"_index":3222,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["reporter.setlog(global.console",{"_index":3564,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["reporter.settags(tags",{"_index":3350,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reporter.settags(tagstomap",{"_index":3229,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reporter.start",{"_index":3108,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{}}}],["reporter.start();determine",{"_index":3543,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["reporter.start();for",{"_index":3536,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["reporter.start();set",{"_index":3215,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["reporter.ts",{"_index":1345,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["reporter.ts:106",{"_index":1351,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:123",{"_index":2708,"title":{},"body":{"classes/TagsOnlyMetricRegistry.html":{}}}],["reporter.ts:141",{"_index":2709,"title":{},"body":{"classes/TagsOnlyMetricRegistry.html":{}}}],["reporter.ts:35",{"_index":1354,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:44",{"_index":1373,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:53",{"_index":1374,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:62",{"_index":1375,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:71",{"_index":1350,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:80",{"_index":1356,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:98",{"_index":1361,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter:report",{"_index":1396,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reporter:request",{"_index":2137,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reporter:response",{"_index":2139,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reporters",{"_index":1707,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reportertype",{"_index":349,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportevent",{"_index":1348,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reportevent(event",{"_index":1360,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reportevent>(event",{"_index":371,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportfunction",{"_index":1485,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportfunction(metric",{"_index":1495,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportgauge",{"_index":431,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportgauge(gauge",{"_index":1497,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reporthistogram",{"_index":437,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":1498,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reporting",{"_index":386,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reportingcontext",{"_index":769,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportingresult",{"_index":320,"title":{"interfaces/ReportingResult.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["reportinterval",{"_index":352,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{}}}],["reportmessagereceiver",{"_index":549,"title":{"interfaces/ReportMessageReceiver.html":{}},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"coverage.html":{}}}],["reportmeter",{"_index":464,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportmeter(meter",{"_index":1499,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportmetric",{"_index":1135,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reportmetricregistry",{"_index":1447,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportmetrics",{"_index":1443,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reports",{"_index":365,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{}}}],["reporttimer",{"_index":478,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporttimer(timer",{"_index":1500,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["repository",{"_index":2825,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1226,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["representation",{"_index":168,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{}}}],["representing",{"_index":299,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Percentiles.html":{},"classes/StopWatch.html":{}}}],["represents",{"_index":233,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["req",{"_index":2361,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["req.end",{"_index":2367,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["req.write(payload",{"_index":2366,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["request",{"_index":1716,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetered.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["request.id",{"_index":2215,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["request.targetreportertype",{"_index":2216,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["requestcount",{"_index":3111,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.decrement(1",{"_index":3114,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.getcount",{"_index":3115,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.increment(1",{"_index":3113,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.reset();monotonecounter",{"_index":3116,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency",{"_index":3152,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.getsnapshot",{"_index":3157,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(102000",{"_index":3163,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(12345",{"_index":3154,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(23456",{"_index":3155,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(34567",{"_index":3156,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(4390000",{"_index":3165,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requests",{"_index":214,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["requests.settag(\"host",{"_index":3595,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests.time",{"_index":3110,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["requests1",{"_index":3233,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests1.setgroup(\"requests",{"_index":3239,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests1.settag(\"host",{"_index":3241,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests1.time",{"_index":3251,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2",{"_index":3235,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.setgroup(\"requests",{"_index":3240,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.settag(\"host",{"_index":3243,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.settag(\"type",{"_index":3345,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.time",{"_index":3252,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3",{"_index":3237,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3.settag(\"host",{"_index":3245,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3.settag(\"special_tag",{"_index":3347,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3.time",{"_index":3253,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests_count{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":3637,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests_sum{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":3639,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01",{"_index":3623,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05",{"_index":3624,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5",{"_index":3625,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75",{"_index":3627,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9",{"_index":3628,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95",{"_index":3630,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98",{"_index":3631,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99",{"_index":3633,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999",{"_index":3635,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["require(\"node",{"_index":1696,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["require('gc",{"_index":3074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('graphite",{"_index":337,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["require('moment",{"_index":942,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["require('native",{"_index":1297,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["requires",{"_index":336,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["res",{"_index":2363,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"classes/StopWatch.html":{}}}],["res.statusmessage",{"_index":2365,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["reserved",{"_index":2242,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reservoir",{"_index":1014,"title":{"interfaces/Reservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["reservoir=null",{"_index":2016,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["reset",{"_index":586,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["resolve",{"_index":416,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["resolve(response.metricsstr",{"_index":2189,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["resolve(stats",{"_index":984,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["resolved",{"_index":1372,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["resource",{"_index":3093,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["respect",{"_index":919,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["respond",{"_index":997,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{}}}],["response",{"_index":1122,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["response.warnings",{"_index":1125,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["responses",{"_index":1713,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["restarts",{"_index":2472,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["restriction",{"_index":2903,"title":{},"body":{"license.html":{}}}],["result",{"_index":300,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["result.metric",{"_index":761,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["result.metrics.map((metric",{"_index":845,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["result.result",{"_index":403,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["result.ts",{"_index":2378,"title":{},"body":{"interfaces/ReportingResult.html":{},"coverage.html":{},"unit-test.html":{}}}],["results",{"_index":202,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["results.map((result",{"_index":1551,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["retention",{"_index":1639,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["retentionrules",{"_index":1628,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["retryjitter",{"_index":3583,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["return",{"_index":147,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["returned",{"_index":392,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["returns",{"_index":89,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":2906,"title":{},"body":{"license.html":{}}}],["rm",{"_index":2863,"title":{},"body":{"index.html":{}}}],["root/inspector",{"_index":2961,"title":{},"body":{"unit-test.html":{}}}],["route",{"_index":3602,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["row",{"_index":647,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["row.push(`${quote}${field",{"_index":873,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${getmetricgroup(metric",{"_index":874,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${getmetricname(metric",{"_index":878,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${metadata[metadataname",{"_index":877,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${tags[tag",{"_index":881,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${tmpstr}${quote",{"_index":872,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${type",{"_index":882,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(datestr",{"_index":868,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(metadatastr",{"_index":875,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(tagstr",{"_index":879,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(value",{"_index":883,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["rows",{"_index":670,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["rows.length",{"_index":766,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["rows.push(row",{"_index":765,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["run",{"_index":650,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-csv.html":{}}}],["running",{"_index":2080,"title":{},"body":{"interfaces/MetricSetReportContext.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-vm.html":{}}}],["runs",{"_index":716,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["s",{"_index":1609,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{}}}],["safely",{"_index":1896,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sales",{"_index":3086,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["same",{"_index":612,"title":{},"body":{"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetricEntry.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-csv.html":{}}}],["sample",{"_index":507,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["sampled",{"_index":3095,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["samplerate",{"_index":2013,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{}}}],["samplerate=1",{"_index":2011,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["samplerate=1000",{"_index":2550,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["samples",{"_index":238,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["sampling",{"_index":1188,"title":{"interfaces/Sampling.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["save",{"_index":3080,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["schedule",{"_index":3340,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["scheduled",{"_index":1749,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["scheduledmetricreporter",{"_index":321,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["scheduledmetricreporteroptions",{"_index":322,"title":{"interfaces/ScheduledMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["scheduler",{"_index":355,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["schedules",{"_index":936,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["scheduling",{"_index":715,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["scrape_configs",{"_index":3616,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["scrape_interval",{"_index":3612,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["scraping",{"_index":3643,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["second",{"_index":506,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["see",{"_index":2132,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["sell",{"_index":2912,"title":{},"body":{"license.html":{}}}],["send",{"_index":537,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["send(points",{"_index":1537,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":1522,"title":{"interfaces/Sender.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"coverage.html":{},"additional-documentation/inspector-influx.html":{}}}],["senderready",{"_index":1549,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["sending",{"_index":544,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["sendmetricstomaster",{"_index":528,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["sendpayload",{"_index":2354,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["sends",{"_index":1352,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["sendtomaster",{"_index":530,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["sendtomaster(message",{"_index":535,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["sendtoworker",{"_index":531,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["sendtoworker(worker",{"_index":541,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["sent",{"_index":305,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{}}}],["separate",{"_index":674,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/inspector-csv.html":{}}}],["separately",{"_index":691,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["serializable",{"_index":1848,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{}}}],["serializablebucketcounting",{"_index":260,"title":{"interfaces/SerializableBucketCounting.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serializablemetered",{"_index":1849,"title":{"interfaces/SerializableMetered.html":{}},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["serializablemetric",{"_index":22,"title":{"interfaces/SerializableMetric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serializablesampling",{"_index":2120,"title":{"interfaces/SerializableSampling.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serializablesummarizing",{"_index":2403,"title":{"interfaces/SerializableSummarizing.html":{}},"body":{"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["serialization",{"_index":177,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["serialized",{"_index":120,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{}}}],["serializedsnapshot",{"_index":1247,"title":{"interfaces/SerializedSnapshot.html":{}},"body":{"classes/HdrSnapshot.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["series",{"_index":2834,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["serve",{"_index":3650,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["server",{"_index":308,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["server.route",{"_index":3603,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["server.start",{"_index":3652,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["server.start();/etc/prometheus/config.yml",{"_index":3610,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["service",{"_index":3217,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["serving",{"_index":3647,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["set",{"_index":17,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["set.ts",{"_index":2074,"title":{},"body":{"interfaces/MetricSet.html":{},"coverage.html":{},"unit-test.html":{}}}],["set.ts:21",{"_index":2077,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["set.ts:29",{"_index":2075,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["setdefaultclock",{"_index":1940,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["setdescription",{"_index":46,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setdescription(description",{"_index":106,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setgroup",{"_index":47,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Groupable.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{}}}],["setgroup(group",{"_index":108,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setinterval",{"_index":356,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{}}}],["setlog",{"_index":363,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["setlog(log",{"_index":1754,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["setmetadata",{"_index":48,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/MetadataContainer.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setmetadata(name",{"_index":110,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setname",{"_index":49,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setname(name",{"_index":112,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setnamefactory",{"_index":1936,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sets",{"_index":173,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["settag",{"_index":50,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{}}}],["settag(\"component",{"_index":3132,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["settag(\"customtag",{"_index":3220,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["settag(\"mode",{"_index":3131,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["settag(name",{"_index":114,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["settags",{"_index":51,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/IMetricReporter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["settags(tags",{"_index":116,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["settimeout",{"_index":2191,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["setting",{"_index":569,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MetricReporterOptions.html":{}}}],["setup",{"_index":2851,"title":{},"body":{"index.html":{},"additional-documentation/inspector-vm.html":{}}}],["setvalue",{"_index":1233,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["setvalue(\"started",{"_index":3130,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["setvalue(1.0",{"_index":3219,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["setvalue(value",{"_index":2454,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["shall",{"_index":2921,"title":{},"body":{"license.html":{}}}],["ships",{"_index":3104,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["shortcut",{"_index":668,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{}}}],["shouldcallinit",{"_index":743,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["shutdown",{"_index":2859,"title":{},"body":{"index.html":{}}}],["signals",{"_index":3129,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["signed",{"_index":1691,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["similar",{"_index":2822,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["simple",{"_index":1013,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["simplegauge",{"_index":1230,"title":{"classes/SimpleGauge.html":{}},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["simplegauge(\"requestcount",{"_index":3138,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["simplegauge('heapsizelimit",{"_index":2543,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('mallocedmemory",{"_index":2546,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('peakmallocedmemory",{"_index":2548,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spaceavailablesize",{"_index":2512,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spacephysicalsize",{"_index":2514,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spacesize",{"_index":2508,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spaceusedsize",{"_index":2510,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalavailablesize",{"_index":2534,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalheapsize",{"_index":2532,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalheapsizeexecutable",{"_index":2539,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalphysicalsize",{"_index":2536,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('usedheapsize",{"_index":2541,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplesnapshot",{"_index":1034,"title":{"classes/SimpleSnapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["simplesnapshot(metric.snapshot.values",{"_index":2389,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["simplified",{"_index":2333,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["simply",{"_index":2338,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["simulate",{"_index":3248,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["single",{"_index":683,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["size",{"_index":1019,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{}}}],["sizeattributeinterface",{"_index":1729,"title":{"interfaces/SizeAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge",{"_index":1731,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge.islengthattributeinterface(collection",{"_index":1741,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.islengthmethodinterface(collection",{"_index":1743,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizeattributeinterface(collection",{"_index":1744,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizemethodinterface(collection",{"_index":1745,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizemethodinterface",{"_index":1728,"title":{"interfaces/SizeMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["slidingwindowreservoir",{"_index":1891,"title":{"classes/SlidingWindowReservoir.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["slidingwindowreservoir(1024",{"_index":2021,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["snapshot",{"_index":439,"title":{"interfaces/Snapshot.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean",{"_index":3189,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean();hdrhistogram",{"_index":3158,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean();meter",{"_index":3166,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean();metriclisteners",{"_index":3197,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getvalue(boundary",{"_index":2312,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["software",{"_index":2901,"title":{},"body":{"license.html":{}}}],["sorted",{"_index":2385,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["sources",{"_index":3649,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["space",{"_index":2495,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-vm.html":{}}}],["spacehistory",{"_index":2493,"title":{"classes/SpaceHistory.html":{}},"body":{"classes/SpaceHistory.html":{},"coverage.html":{}}}],["spacehistory('code_space",{"_index":2564,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('large_object_space",{"_index":2568,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('map_space",{"_index":2566,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('new_space",{"_index":2560,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('old_space",{"_index":2562,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacename",{"_index":2501,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spaces",{"_index":2529,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["specialvalue",{"_index":3221,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["specific",{"_index":220,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/ReportingResult.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["specified",{"_index":419,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["specs",{"_index":2528,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["standard",{"_index":339,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusClusterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["start",{"_index":71,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["started",{"_index":2820,"title":{"index.html":{},"license.html":{}},"body":{"additional-documentation/inspector-metrics.html":{}}}],["starts",{"_index":714,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["starttime",{"_index":2637,"title":{},"body":{"classes/StopWatch.html":{}}}],["stat",{"_index":899,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["stat(filename",{"_index":931,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["state",{"_index":1605,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["statements",{"_index":2737,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["states",{"_index":1401,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["static",{"_index":26,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["static_configs",{"_index":3620,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["statistical",{"_index":3097,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["statistics",{"_index":3659,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["stats",{"_index":938,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["stats.isdirectory",{"_index":968,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["stats.size",{"_index":976,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["status",{"_index":1869,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["stdclock",{"_index":323,"title":{"classes/StdClock.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["stddev",{"_index":784,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["stderr",{"_index":1811,"title":{},"body":{"interfaces/Logger.html":{}}}],["stdout",{"_index":1807,"title":{},"body":{"interfaces/Logger.html":{}}}],["steps",{"_index":583,"title":{},"body":{"classes/Counter.html":{}}}],["stop",{"_index":393,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["stops",{"_index":390,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SpaceHistory.html":{}}}],["stopwatch",{"_index":2634,"title":{"classes/StopWatch.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["stopwatch(this.clock",{"_index":2687,"title":{},"body":{"classes/StopWatch.html":{}}}],["storage",{"_index":3204,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["store",{"_index":682,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["stores",{"_index":2527,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["straight",{"_index":2346,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["stream",{"_index":1808,"title":{},"body":{"interfaces/Logger.html":{}}}],["string",{"_index":72,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSummarizing.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["strings",{"_index":818,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["subject",{"_index":2917,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2910,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2922,"title":{},"body":{"license.html":{}}}],["sum",{"_index":785,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["summarizing",{"_index":1293,"title":{"interfaces/Summarizing.html":{}},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["summary",{"_index":2125,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["summarytype",{"_index":2166,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["super",{"_index":359,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["super(null",{"_index":1327,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["super(options",{"_index":2394,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["super.handlereportmessage(worker",{"_index":754,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["super.report",{"_index":1550,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["super.start",{"_index":389,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["super.stop",{"_index":394,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.tojson",{"_index":1236,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["support",{"_index":548,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MetricReporterOptions.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["support/register",{"_index":126,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["supported",{"_index":3084,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["sure",{"_index":745,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["switch",{"_index":866,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["sync",{"_index":913,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["synchronously",{"_index":2679,"title":{},"body":{"classes/StopWatch.html":{}}}],["system",{"_index":3087,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["t",{"_index":93,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["table",{"_index":2809,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2808,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":671,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["tag.and",{"_index":3526,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["tag_",{"_index":709,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagcolumnprefix",{"_index":692,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagdelimiter",{"_index":695,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagexportmode",{"_index":688,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagfilter",{"_index":702,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["taggable",{"_index":132,"title":{"interfaces/Taggable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["tagmap",{"_index":33,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"miscellaneous/functions.html":{}}}],["tagmap.foreach((tag",{"_index":2705,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["tagmap.set(key",{"_index":2703,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["tagnames",{"_index":808,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tagprefix",{"_index":2296,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tags",{"_index":19,"title":{"interfaces/Tags.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["tags.add(tag",{"_index":844,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tags.foreach((value",{"_index":190,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["tags.group",{"_index":424,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tags.name",{"_index":426,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tags.set(\"app_version",{"_index":3592,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["tags.set(\"application",{"_index":3124,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["tags.set(\"hostname",{"_index":3125,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["tags.set(\"type",{"_index":3349,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["tags[key",{"_index":1509,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["tags[name",{"_index":2706,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["tags[normalizedkey",{"_index":2251,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tagsnames",{"_index":707,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tagsonlymetricregistry",{"_index":1387,"title":{"classes/TagsOnlyMetricRegistry.html":{}},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["tagsonlymetricregistry(report.tags",{"_index":1424,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["tagstomap",{"_index":1377,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["tagstomap(tags",{"_index":1389,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{}}}],["tagstr",{"_index":860,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tag}=\"${tags[tag",{"_index":2265,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tag}=${quote}${tags[tag]}${quote",{"_index":863,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["take",{"_index":2829,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["targetreportertype",{"_index":738,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["targets",{"_index":3621,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["targettype",{"_index":1417,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["targettype=metricreporter.message_type",{"_index":1415,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["task(callback",{"_index":960,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["tasks",{"_index":824,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tasks.push((async",{"_index":826,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["template",{"_index":366,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["test",{"_index":2856,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["test_abc",{"_index":3348,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["testing",{"_index":3572,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["tests:docker",{"_index":2862,"title":{},"body":{"index.html":{}}}],["tevent",{"_index":368,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["teventdata",{"_index":367,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["text",{"_index":2129,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["text/plain",{"_index":2357,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["th",{"_index":1339,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["then((res",{"_index":2685,"title":{},"body":{"classes/StopWatch.html":{}}}],["therefore",{"_index":2674,"title":{},"body":{"classes/StopWatch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["this.a.length",{"_index":3136,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["this.addduration(diff(starttime",{"_index":2682,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.afterreport(ctx",{"_index":1441,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.alpha",{"_index":1216,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.availablesize",{"_index":2511,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.availablesize.settag('space",{"_index":2517,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.avg",{"_index":1221,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.beforereport(ctx",{"_index":1439,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.bucket",{"_index":1653,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["this.bucketsinternal.boundaries",{"_index":1343,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.buildheaders",{"_index":725,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.buildprometheustags(metric",{"_index":2262,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.buildrow(registry",{"_index":763,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.buildtags(ctx",{"_index":1565,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(ctx.registry",{"_index":423,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(null",{"_index":737,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.buildtags(registry",{"_index":853,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.buildtags(result.registry",{"_index":846,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.canhandlemessage(message",{"_index":753,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.cansendmessagestoworkers",{"_index":2183,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.client",{"_index":387,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.client.bulk",{"_index":1123,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.client.end",{"_index":395,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.writetagged(carbondata.measurement",{"_index":411,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.clock",{"_index":2647,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.clock.time",{"_index":2649,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.config",{"_index":1610,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["this.config.database",{"_index":1614,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["this.constructor.name",{"_index":1404,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.count",{"_index":1341,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.countertype",{"_index":2238,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.createoverallreportcontext",{"_index":380,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.currentdir",{"_index":964,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.currentfilename",{"_index":963,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.db",{"_index":1612,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{}}}],["this.db.createdatabase(database",{"_index":1621,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["this.db.getdatabasenames",{"_index":1616,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["this.db.getwriteapi(this.org",{"_index":1656,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["this.db.writepoints(points",{"_index":1623,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["this.defaultclock",{"_index":1939,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.description",{"_index":185,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{}}}],["this.eventreceiver",{"_index":1003,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["this.extractor",{"_index":1742,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.filterkeys(metadatanames",{"_index":802,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.filterkeys(tagnames",{"_index":811,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.firemetricadded(metric.getname",{"_index":2035,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricadded(name",{"_index":2043,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricremoved(name",{"_index":1993,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.gaugetype",{"_index":2237,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.generaterandomid",{"_index":2185,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.get15minuterate",{"_index":2660,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.get1minuterate",{"_index":2662,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.get5minuterate",{"_index":2661,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.getallmetadatakeys",{"_index":800,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getalltagkeys",{"_index":809,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getbuckets(metric",{"_index":2267,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getbyname(name",{"_index":1983,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname>(name",{"_index":1985,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getcount",{"_index":2657,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.getdescription",{"_index":197,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.getdescription(metric",{"_index":2260,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getfieldnameprefix(counter",{"_index":1559,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(gauge",{"_index":1562,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":1566,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(meter",{"_index":1578,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(timer",{"_index":1584,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getfirstbyname(name",{"_index":1971,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname>(name",{"_index":1976,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getgroup",{"_index":198,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.getmax",{"_index":2447,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmean",{"_index":2428,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmeanrate",{"_index":2659,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.getmeasurementname(counter",{"_index":1560,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gauge",{"_index":1563,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":1567,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(meter",{"_index":1579,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(timer",{"_index":1585,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getmetricname(counter",{"_index":429,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(gauge",{"_index":435,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(histogram",{"_index":443,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(meter",{"_index":469,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(metric",{"_index":2259,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getmetricname(timer",{"_index":483,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricsstring",{"_index":2214,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getmetricstring(date",{"_index":2232,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getname",{"_index":200,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.getnumber(histogram.getcount",{"_index":774,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getnumber(meter.get15minuterate",{"_index":471,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuterate",{"_index":473,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuterate",{"_index":475,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getcount",{"_index":787,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getnumber(meter.getmeanrate",{"_index":477,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentile",{"_index":453,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentile",{"_index":455,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentile",{"_index":457,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentile",{"_index":461,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentile",{"_index":459,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":445,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":447,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":451,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":449,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":463,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuterate",{"_index":484,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuterate",{"_index":485,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuterate",{"_index":486,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getcount",{"_index":792,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getnumber(timer.getmeanrate",{"_index":487,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.getquantiles(metric",{"_index":2269,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.gettimestamp(now",{"_index":2261,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getvalue(0.5",{"_index":2424,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.75",{"_index":2414,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.95",{"_index":2416,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.98",{"_index":2418,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.99",{"_index":2422,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.999",{"_index":2420,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(fields[field",{"_index":2282,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.group",{"_index":186,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/SpaceHistory.html":{}}}],["this.group}.${this.name",{"_index":196,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.handlereportmessage(worker",{"_index":1408,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.handlereportrequest(message",{"_index":2179,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.handlereportresponse(message",{"_index":2180,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.handleresults",{"_index":379,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{}}}],["this.handleresults(ctx",{"_index":1479,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.handleresults(null",{"_index":742,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{}}}],["this.handleresults(report.ctx",{"_index":1425,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.haschanged(metricid",{"_index":1491,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.hdrsnapshot",{"_index":1336,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.header",{"_index":724,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.heapsizelimit.removetag(name",{"_index":2626,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.heapsizelimit.setgroup(group",{"_index":2601,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.heapsizelimit.settag(name",{"_index":2614,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.heapsizelimit.setvalue(heapstatistics.heap_size_limit",{"_index":2580,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.histogram",{"_index":1334,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["this.histogram.buckets",{"_index":2653,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.counts",{"_index":2654,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getbuckets",{"_index":2675,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcount",{"_index":2668,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcounts",{"_index":2676,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsnapshot",{"_index":2667,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsum",{"_index":2669,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.snapshot",{"_index":2656,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.sum",{"_index":2655,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.tojson",{"_index":2689,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.update(unit.convertto(duration",{"_index":2664,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogramtype",{"_index":2239,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus",{"_index":2176,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus.emit(response.id",{"_index":2226,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus.once(message.id",{"_index":2188,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus.removealllisteners(message.id",{"_index":2192,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.interval",{"_index":1217,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.intervalref",{"_index":2569,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.intervalref.unref",{"_index":2592,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.listeners.foreach((listener",{"_index":2057,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.indexof(listener",{"_index":1932,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.push(listener",{"_index":1928,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners[index",{"_index":1935,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.logmetadata",{"_index":360,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.mallocedmemory.removetag(name",{"_index":2627,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.mallocedmemory.setgroup(group",{"_index":2602,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.mallocedmemory.settag(name",{"_index":2615,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.mallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":2581,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.maxsize",{"_index":1035,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["this.metadata",{"_index":199,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap",{"_index":180,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap.delete(name",{"_index":182,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap.get(name",{"_index":181,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap.set(name",{"_index":183,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatanames",{"_index":876,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.metadatanames.push(metadataname",{"_index":806,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.meter",{"_index":2652,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get15minuterate",{"_index":2670,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get1minuterate",{"_index":2672,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get5minuterate",{"_index":2671,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.getmeanrate",{"_index":2673,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.mark(1",{"_index":2665,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.tojson",{"_index":2691,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metricref",{"_index":1902,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricregistries",{"_index":721,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.indexof(metricregistry",{"_index":1411,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.length",{"_index":722,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.push(metricregistry",{"_index":1410,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.splice(index",{"_index":1412,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metrics",{"_index":1945,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{}}}],["this.metrics.foreach((metric",{"_index":2593,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.map((metric",{"_index":1967,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(new",{"_index":2033,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(this.heapsizelimit",{"_index":2556,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.mallocedmemory",{"_index":2557,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.peakmallocedmemory",{"_index":2558,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalavailablesize",{"_index":2553,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalheapsize",{"_index":2551,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalheapsizeexecutable",{"_index":2554,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalphysicalsize",{"_index":2552,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.usedheapsize",{"_index":2555,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.splice(index",{"_index":1992,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricstates.get(metricid",{"_index":1505,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricstates.has(metricid",{"_index":1504,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.mkdir(dir",{"_index":970,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.name",{"_index":184,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["this.namefactory",{"_index":1937,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.namefactory(name",{"_index":2045,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nanosecondsperunit",{"_index":2725,"title":{},"body":{"classes/TimeUnit.html":{}}}],["this.num",{"_index":1699,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.add(value",{"_index":1701,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tonumber",{"_index":1702,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tostring",{"_index":1703,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.options",{"_index":955,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions",{"_index":728,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.enabled",{"_index":729,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.sendmetricstomaster",{"_index":730,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.sendtomaster",{"_index":2218,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.clusteroptions.sendtomaster(message",{"_index":741,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.sendtomaster(response",{"_index":2219,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.columns",{"_index":797,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.createdir",{"_index":965,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.dir",{"_index":961,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.emitcomments",{"_index":2272,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.encoding",{"_index":983,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.filename",{"_index":962,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.host",{"_index":2358,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.includetimestamp",{"_index":2294,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.indexnamedeterminator(ctx.registry",{"_index":1141,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.lineending",{"_index":979,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.log",{"_index":362,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug",{"_index":1126,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.log.debug('wrote",{"_index":1547,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug(`wrote",{"_index":1556,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.options.log.error(err",{"_index":414,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log.info(logline.message",{"_index":1756,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.options.log.info(logline.result.message",{"_index":1761,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.options.log.trace(`${res.statuscode",{"_index":2364,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.log?.error",{"_index":2221,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.metadataexportmode",{"_index":798,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.metadatafilter",{"_index":803,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.metricdocumentbuilder",{"_index":1136,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.port",{"_index":2360,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.reporter.geteventstring(event",{"_index":2348,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.reporter.getmetricsstring",{"_index":2353,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.scheduler(async",{"_index":2398,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.options.sender.init",{"_index":1538,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.isready",{"_index":1539,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.send(points",{"_index":1555,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["this.options.tagexportmode",{"_index":807,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.tagfilter",{"_index":812,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.tags",{"_index":1409,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.tags.foreach((value",{"_index":843,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.timezone).format(this.options.dateformat",{"_index":760,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.typedeterminator(ctx.registry",{"_index":1143,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.unit.convertto(this.options.reportinterval",{"_index":2396,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.options.usesinglequotes",{"_index":852,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.useuntyped",{"_index":2270,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.writeheaders",{"_index":974,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.writer.init(this.header",{"_index":727,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.writer.writerow(metric",{"_index":886,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.org",{"_index":1652,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["this.peakmallocedmemory.removetag(name",{"_index":2628,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.peakmallocedmemory.setgroup(group",{"_index":2603,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.peakmallocedmemory.settag(name",{"_index":2616,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.peakmallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":2582,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.physicalsize",{"_index":2513,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.physicalsize.settag('space",{"_index":2518,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.precision",{"_index":1611,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["this.queue",{"_index":956,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.queue.push(async",{"_index":981,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.ready",{"_index":1622,"title":{},"body":{"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{}}}],["this.reference.getcount",{"_index":1307,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.max",{"_index":1305,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.mean",{"_index":1308,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.min",{"_index":1306,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(50",{"_index":1304,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(75",{"_index":1299,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(95",{"_index":1300,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(98",{"_index":1301,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99",{"_index":1303,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99.9",{"_index":1302,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(quantile",{"_index":1310,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.stddev",{"_index":1309,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.register(metricname",{"_index":2047,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(counter",{"_index":2007,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(histogram",{"_index":2019,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(m",{"_index":2039,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(meter",{"_index":2015,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(timer",{"_index":2025,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registry.removelistener(this.listener",{"_index":1901,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removemetric(name",{"_index":1998,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removetag(name",{"_index":195,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.report",{"_index":2199,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.reportcounter(counter",{"_index":1459,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportertype",{"_index":739,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportgauge(event",{"_index":372,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{}}}],["this.reportgauge(gauge",{"_index":1465,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reporthistogram(histogram",{"_index":1469,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportmeter(meter",{"_index":1473,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportmetric(counter",{"_index":1145,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(gauge",{"_index":1146,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(histogram",{"_index":1147,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(meter",{"_index":1148,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(timer",{"_index":1149,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetricregistry(ctx",{"_index":1440,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportmetrics(ctx",{"_index":1458,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reporttimer(timer",{"_index":1477,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.retentionrules",{"_index":1654,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["this.sendmetricstomaster",{"_index":1478,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.sendpayload(payload",{"_index":2349,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.setdescription(description",{"_index":1740,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.setname(name",{"_index":1739,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.shouldcallinit",{"_index":726,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.size",{"_index":2507,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.size.settag('space",{"_index":2515,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.foreach((history",{"_index":2604,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.get(heapspacestatistic.space_name",{"_index":2586,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.has(heapspacestatistic.space_name",{"_index":2584,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('code_space",{"_index":2563,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('large_object_space",{"_index":2567,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('map_space",{"_index":2565,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('new_space",{"_index":2559,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('old_space",{"_index":2561,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.starttime",{"_index":2648,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.stat(dir",{"_index":967,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.stat(normalizedfilename",{"_index":975,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.sum",{"_index":1223,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.suminternal.add(value",{"_index":1342,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.summarytype",{"_index":2240,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.tagmap",{"_index":187,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.tagmap.delete(name",{"_index":193,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/SpaceHistory.html":{}}}],["this.tagmap.get(name",{"_index":188,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.tagmap.set(key",{"_index":192,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.tagmap.set(name",{"_index":189,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/SpaceHistory.html":{}}}],["this.tags",{"_index":201,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.tagsnames",{"_index":880,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.tagsnames.push(tag",{"_index":815,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.timer",{"_index":2397,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{}}}],["this.timer.addduration(diff(this.starttime",{"_index":2650,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timer.unref",{"_index":2399,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.timeunitinnanoseconds",{"_index":1219,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.totalavailablesize.removetag(name",{"_index":2622,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalavailablesize.setgroup(group",{"_index":2597,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalavailablesize.settag(name",{"_index":2610,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalavailablesize.setvalue(heapstatistics.total_available_size",{"_index":2577,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.removetag(name",{"_index":2621,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.setgroup(group",{"_index":2596,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.settag(name",{"_index":2609,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.setvalue(heapstatistics.total_heap_size",{"_index":2575,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.removetag(name",{"_index":2624,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.setgroup(group",{"_index":2599,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.settag(name",{"_index":2612,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.setvalue(heapstatistics.total_heap_size_executable",{"_index":2578,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.removetag(name",{"_index":2623,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.setgroup(group",{"_index":2598,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.settag(name",{"_index":2611,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.setvalue(heapstatistics.total_physical_size",{"_index":2576,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.unit",{"_index":1218,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.usedheapsize.removetag(name",{"_index":2625,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedheapsize.setgroup(group",{"_index":2600,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedheapsize.settag(name",{"_index":2613,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedheapsize.setvalue(heapstatistics.used_heap_size",{"_index":2579,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedsize",{"_index":2509,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedsize.settag('space",{"_index":2516,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.value",{"_index":1232,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["this.values",{"_index":2409,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.foreach((value",{"_index":2427,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.length",{"_index":1036,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["this.values.sort((a",{"_index":2412,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[0",{"_index":2426,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[index",{"_index":2449,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[this.values.length",{"_index":2425,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.write",{"_index":977,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.writeapi",{"_index":1655,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["this.writeapi.flush",{"_index":1676,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["this.writeapi.writepoints(points.map(point",{"_index":1665,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["this.writerows(metric",{"_index":767,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["those",{"_index":3225,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["threads",{"_index":3092,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["through",{"_index":1205,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-metrics.html":{}}}],["throw",{"_index":1328,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"classes/Percentiles.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{}}}],["throws",{"_index":1314,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["tick",{"_index":1170,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["time",{"_index":215,"title":{"interfaces/Time.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["timeasync",{"_index":2684,"title":{},"body":{"classes/StopWatch.html":{}}}],["timeout",{"_index":560,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["timeprecision",{"_index":1593,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["timer",{"_index":324,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["timer#getcount",{"_index":1798,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer(clock",{"_index":2024,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.getcount",{"_index":479,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timer.getgroup",{"_index":481,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer.getname",{"_index":482,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer.getsnapshot",{"_index":480,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["timer.getsum().tostring",{"_index":793,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["timer.start",{"_index":3191,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["timer.stop",{"_index":3192,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["timerctx",{"_index":1454,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timerctx.metrics",{"_index":1474,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timerresults",{"_index":1476,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timers",{"_index":736,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["timestamp",{"_index":398,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricEntry.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["timestamp(point.timestamp",{"_index":1668,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["timestamps",{"_index":1860,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["timeunit",{"_index":1172,"title":{"classes/TimeUnit.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["timeunit(1",{"_index":2727,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000",{"_index":2728,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000",{"_index":2729,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000000",{"_index":2730,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(3600000000000",{"_index":2732,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(60000000000",{"_index":2731,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(86400000000000",{"_index":2733,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunitinnanoseconds",{"_index":1166,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["timezone",{"_index":662,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tmpstr",{"_index":865,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tmpstr.replace(/'/g",{"_index":871,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tojson",{"_index":52,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["token",{"_index":3568,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["tonumber",{"_index":1682,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["top",{"_index":918,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["tort",{"_index":2944,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":53,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["total",{"_index":1844,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-vm.html":{}}}],["totalavailablesize",{"_index":2533,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["totalheapsize",{"_index":2531,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["totalheapsizeexecutable",{"_index":2538,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["totalphysicalsize",{"_index":2535,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["trace",{"_index":1803,"title":{},"body":{"interfaces/Logger.html":{}}}],["track",{"_index":1400,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["transforms",{"_index":1822,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"miscellaneous/functions.html":{}}}],["trigger",{"_index":384,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["triggers",{"_index":1215,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":574,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["truth",{"_index":518,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["try",{"_index":966,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{}}}],["ts",{"_index":2845,"title":{},"body":{"index.html":{}}}],["two",{"_index":502,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["two.milliseconds",{"_index":516,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two.nanoseconds",{"_index":515,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["twovalue",{"_index":514,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["type",{"_index":55,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/Counter.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["type(\"text/plain",{"_index":3609,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["type.ts",{"_index":2956,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":2952,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":1484,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["typedeterminator",{"_index":1049,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["typeof",{"_index":143,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["types",{"_index":666,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["typescript",{"_index":333,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["und",{"_index":3674,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["undefined",{"_index":466,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["under",{"_index":2027,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["unhealthy",{"_index":1872,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["unidirectional",{"_index":573,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["unique",{"_index":64,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["unit",{"_index":216,"title":{"unit-test.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["unit.convertto(interval",{"_index":1220,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["unit.nanosecondsperunit",{"_index":2726,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts",{"_index":2711,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["unit.ts:18",{"_index":2717,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:36",{"_index":2724,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:53",{"_index":2719,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unstopped",{"_index":3680,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["unsupported",{"_index":2141,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["until",{"_index":1031,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["untyped",{"_index":2126,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["unwanted",{"_index":701,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["update",{"_index":1020,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["update(value",{"_index":1027,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["updated",{"_index":794,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/MovingAverage.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["updates",{"_index":1198,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{}}}],["upper",{"_index":2450,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["url",{"_index":3566,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["usage",{"_index":3082,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["use",{"_index":176,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/TagsOnlyMetricRegistry.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{}}}],["used",{"_index":227,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["usedheapsize",{"_index":2540,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["usedsize",{"_index":2498,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["user",{"_index":3669,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["username",{"_index":3558,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["users",{"_index":3537,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["uses",{"_index":383,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["usesinglequotes",{"_index":687,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["useuntyped",{"_index":2173,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["using",{"_index":819,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["usual",{"_index":1369,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["usually",{"_index":1806,"title":{},"body":{"interfaces/Logger.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["utc",{"_index":712,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["utf8",{"_index":953,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["utility",{"_index":1859,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["v1",{"_index":3552,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["v1.2.3\");reporting",{"_index":3218,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["v2",{"_index":3565,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["v8",{"_index":2506,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8.getheapspacestatistics",{"_index":2572,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["v8.getheapstatistics",{"_index":2574,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["v8eventloop",{"_index":2796,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8eventloop(\"eventloop",{"_index":3667,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["v8gcmetrics",{"_index":2800,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8gcmetrics(\"gc",{"_index":3662,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["v8memorymetrics",{"_index":2526,"title":{},"body":{"classes/SpaceHistory.html":{},"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8memorymetrics(\"v8",{"_index":3661,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["v8processmetrics",{"_index":2806,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8processmetrics(\"process",{"_index":3673,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["valid",{"_index":1765,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["value",{"_index":58,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["value.localecompare(database",{"_index":1620,"title":{},"body":{"classes/Influxdb1Sender.html":{}}}],["value.trim",{"_index":2161,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["valueextractor",{"_index":1730,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"miscellaneous/typealiases.html":{}}}],["values",{"_index":248,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["values.count",{"_index":1092,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.join(this.options.delimiter",{"_index":982,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["values.length",{"_index":2411,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.m15_rate",{"_index":1104,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.m1_rate",{"_index":1105,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.m5_rate",{"_index":1106,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.max",{"_index":1093,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.mean",{"_index":1094,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.mean_rate",{"_index":1107,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.min",{"_index":1095,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p50",{"_index":1096,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p75",{"_index":1097,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p95",{"_index":1098,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p98",{"_index":1099,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p99",{"_index":1100,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p999",{"_index":1101,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.slice(0",{"_index":2410,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.stddev",{"_index":1102,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["valuestr",{"_index":2281,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["valuestr}${timestamp}\\n",{"_index":2284,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["value}${timestamp",{"_index":2314,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["var",{"_index":335,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["variable",{"_index":1391,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["variables",{"_index":3067,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["versa",{"_index":1209,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["version",{"_index":121,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"index.html":{},"properties.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["versions",{"_index":3538,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["via",{"_index":2350,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["vice",{"_index":1208,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["vm",{"_index":2841,"title":{"additional-documentation/inspector-vm.html":{}},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["vm/lib/metrics/v8eventloop.ts",{"_index":2795,"title":{},"body":{"coverage.html":{}}}],["vm/lib/metrics/v8gcmetrics.ts",{"_index":2799,"title":{},"body":{"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts",{"_index":2494,"title":{},"body":{"classes/SpaceHistory.html":{},"coverage.html":{},"unit-test.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:24",{"_index":2504,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:31",{"_index":2505,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:38",{"_index":2502,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:45",{"_index":2500,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8processmetrics.ts",{"_index":2805,"title":{},"body":{"coverage.html":{}}}],["void",{"_index":364,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["wait",{"_index":1541,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["waiting",{"_index":3091,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["want",{"_index":1874,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["warn",{"_index":1804,"title":{},"body":{"interfaces/Logger.html":{}}}],["warnings",{"_index":1124,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["warranties",{"_index":2929,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2924,"title":{},"body":{"license.html":{}}}],["watch",{"_index":3193,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["we'll",{"_index":1528,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["weight",{"_index":1175,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["well",{"_index":558,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-csv.html":{}}}],["wether",{"_index":1365,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["whether",{"_index":2941,"title":{},"body":{"license.html":{}}}],["who's",{"_index":519,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["within",{"_index":65,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["without",{"_index":565,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["worker",{"_index":542,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["worker,message",{"_index":2373,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["worker.send",{"_index":1002,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["worker.send(message",{"_index":1007,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["workerpromise",{"_index":2187,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerpromises",{"_index":2182,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerpromises.push(promise.race([workerpromise",{"_index":2196,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerresponses",{"_index":2197,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerresponses.join('\\n",{"_index":2201,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerresponsetimeout",{"_index":990,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{}}}],["workers",{"_index":534,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workers.push(workers[key",{"_index":1009,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["workertimeout",{"_index":2190,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["works",{"_index":3195,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["worktree",{"_index":2886,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1312,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["wraps",{"_index":922,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["write",{"_index":900,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/Influxdb1Sender.html":{},"classes/Influxdb2Sender.html":{},"additional-documentation/inspector-csv.html":{}}}],["write(filename",{"_index":933,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["writeapi",{"_index":1629,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["writefailed",{"_index":3584,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["writeheader",{"_index":971,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["writeheaders",{"_index":943,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["writeoptions",{"_index":1631,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["writeprecisiontype",{"_index":1630,"title":{},"body":{"classes/Influxdb2Sender.html":{}}}],["writer",{"_index":681,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["writerow",{"_index":645,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["writerow(metric",{"_index":653,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/Fields.html":{}}}],["writerows",{"_index":885,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["writes",{"_index":757,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["writing",{"_index":642,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MeasurementPoint.html":{},"interfaces/Sender.html":{}}}],["written",{"_index":747,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["wrote",{"_index":1129,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["x",{"_index":2246,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["yes",{"_index":589,"title":{},"body":{"classes/Counter.html":{},"classes/Influxdb2Sender.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["yyyy",{"_index":1064,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["yyyymmddhhmmss.sssz",{"_index":711,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["z0",{"_index":2147,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["za",{"_index":2146,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["zero",{"_index":522,"title":{},"body":{"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseMetric.html":{"url":"classes/BaseMetric.html","title":"class - BaseMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metric.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract base-class for a metric which implements commonly needed functions:\n\nget / set name\nget / set description\nget / set tags\nget / set metadata\nget / set group\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            Metric\n                            SerializableMetric\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadataMap\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Protected\n                                tagMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    metadata\n                                \n                                \n                                    tags\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        COUNTER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:217\n                        \n                    \n\n            \n                \n                    A static number instance to give an unique id within an application instance.\nThis counter is only unique per process, forked processes start from 0.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:249\n                        \n                    \n\n            \n                \n                    The description of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:233\n                        \n                    \n\n            \n                \n                    The group set to this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : BaseMetric.COUNTER++\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:225\n                        \n                    \n\n            \n                \n                    The unique id of this metric instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        metadataMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:257\n                        \n                    \n\n            \n                \n                    The metadata associated with an instance of class.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:241\n                        \n                    \n\n            \n                \n                    The name of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        tagMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:265\n                        \n                    \n\n            \n                \n                    Maps of tags for this metric.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:339\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDescription()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:279\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadataMap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadataMap()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:275\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:294\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:321\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:283\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:344\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDescription(description: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:307\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroup(group: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:316\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:289\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setName\n                        \n                    \n                \n            \n            \n                \n                    \n                    setName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:298\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:329\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:334\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:367\n                \n            \n\n\n            \n                \n                    Generates a serialized version of this metric.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:354\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        metadata\n                    \n                \n\n                \n                    \n                        getmetadata()\n                    \n                \n                            \n                                \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:267\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tags\n                    \n                \n\n                \n                    \n                        gettags()\n                    \n                \n                            \n                                \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:271\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { mapToMetadata, Metadata, MetadataContainer } from \"./metadata-container\";\nimport { mapToTags, Taggable, Tags } from \"./taggable\";\n\n/**\n * Determines if the metric passed is a {@link SerializableMetric} or not.\n *\n * @export\n * @param {(Groupable | MetadataContainer | Taggable | Metric | SerializableMetric)} metric\n * @returns {metric is SerializableMetric}\n */\nexport function isSerializableMetric(\n  metric: Groupable | MetadataContainer | Taggable | Metric | SerializableMetric): metric is SerializableMetric {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getGroup && typeof anyMetric.getGroup === \"function\") ||\n    (anyMetric.getMetadataMap && typeof anyMetric.getMetadataMap === \"function\") ||\n    (anyMetric.getTags && typeof anyMetric.getTags === \"function\") ||\n    (anyMetric.getName && typeof anyMetric.getName === \"function\")) {\n    return false;\n  }\n  return typeof anyMetric.name === \"string\";\n}\n\n/**\n * Convenience method the get the name of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricName(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.name;\n  } else {\n    return metric.getName();\n  }\n}\n\n/**\n * Convenience method the get the description of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricDescription(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.description;\n  } else {\n    return metric.getDescription();\n  }\n}\n\n/**\n * Convenience method the get the group of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Groupable | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricGroup(metric: Groupable | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.group;\n  } else {\n    return metric.getGroup();\n  }\n}\n\n/**\n * Convenience method the get the tags of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Taggable | SerializableMetric)} metric\n * @returns {Tags}\n */\nexport function getMetricTags(metric: Taggable | SerializableMetric): Tags {\n  if (isSerializableMetric(metric)) {\n    return (metric.tags as any) as Tags;\n  } else {\n    return mapToTags(metric.getTags());\n  }\n}\n\n/**\n * Convenience method the get the metadata of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(MetadataContainer | SerializableMetric)} metric\n * @returns {Metadata}\n */\nexport function getMetricMetadata(metric: MetadataContainer | SerializableMetric): Metadata {\n  if (isSerializableMetric(metric)) {\n    return metric.metadata;\n  } else {\n    return mapToMetadata(metric.getMetadataMap());\n  }\n}\n\n/**\n * Representation of a metric.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {MetadataContainer}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n  /**\n   * Gets the name of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getName(): string;\n\n  /**\n   * Sets the name of the metric.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Metric\n   */\n  setName(name: string): this;\n\n  /**\n   * Gets the description of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getDescription(): string;\n\n  /**\n   * Sets the description of the metric.\n   *\n   * @param {string} description\n   * @returns {this}\n   * @memberof Metric\n   */\n  setDescription(description: string): this;\n\n}\n\n/**\n * A {@link Metric} with public fields for convenient use after serialization.\n *\n * @export\n * @interface SerializableMetric\n * @extends {Metric}\n */\nexport interface SerializableMetric extends Metric {\n  /**\n   * Description of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  description: string;\n  /**\n   * Group of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  group: string;\n  /**\n   * Metadata map of the metric.\n   *\n   * @type {Metadata}\n   * @memberof SerializableMetric\n   */\n  metadata: Metadata;\n  /**\n   * name of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  name: string;\n  /**\n   * Tags of the metric.\n   *\n   * @type {Tags}\n   * @memberof SerializableMetric\n   */\n  tags: Tags;\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set description\n * - get / set tags\n * - get / set metadata\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n * @implements {SerializableMetric}\n */\nexport abstract class BaseMetric implements Metric, SerializableMetric {\n\n  /**\n   * A static number instance to give an unique id within an application instance.\n   * This counter is only unique per process, forked processes start from 0.\n   *\n   * @private\n   * @static\n   * @memberof BaseMetric\n   */\n  private static COUNTER = 0;\n\n  /**\n   * The unique id of this metric instance.\n   *\n   * @type {number}\n   * @memberof BaseMetric\n   */\n  public readonly id: number = BaseMetric.COUNTER++;\n  /**\n   * The group set to this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public group: string;\n  /**\n   * The name of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public name: string;\n  /**\n   * The description of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public description: string;\n  /**\n   * The metadata associated with an instance of class.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected metadataMap: Map = new Map();\n  /**\n   * Maps of tags for this metric.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected tagMap: Map = new Map();\n\n  public get metadata(): Metadata {\n    return mapToMetadata(this.metadataMap);\n  }\n\n  public get tags(): Tags {\n    return mapToTags(this.tagMap);\n  }\n\n  public getMetadataMap(): Map {\n    return this.metadataMap;\n  }\n\n  public getMetadata(name: string): T {\n    return this.metadataMap.get(name) as T;\n  }\n\n  public removeMetadata(name: string): T {\n    const value = this.metadataMap.get(name) as T;\n    this.metadataMap.delete(name);\n    return value;\n  }\n\n  public setMetadata(name: string, value: T): this {\n    this.metadataMap.set(name, value);\n    return this;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  public getGroup(): string {\n    return this.group;\n  }\n\n  public setGroup(group: string): this {\n    this.group = group;\n    return this;\n  }\n\n  public getTags(): Map {\n    return this.tagMap;\n  }\n\n  public getTag(name: string): string {\n    return this.tagMap.get(name);\n  }\n\n  public setTag(name: string, value: string): this {\n    this.tagMap.set(name, value);\n    return this;\n  }\n\n  public setTags(tags: Map): this {\n    this.tagMap = tags;\n    return this;\n  }\n\n  public addTags(tags: Map): this {\n    tags.forEach((value, key) => this.tagMap.set(key, value));\n    return this;\n  }\n\n  public removeTag(name: string): this {\n    this.tagMap.delete(name);\n    return this;\n  }\n\n  public removeTags(...names: string[]): this {\n    names.forEach((name) => this.removeTag(name));\n    return this;\n  }\n\n  public toString(): string {\n    if (this.group) {\n      return `${this.group}.${this.name}`;\n    }\n    return this.name;\n  }\n\n  /**\n   * Generates a serialized version of this metric.\n   *\n   * @returns {*}\n   * @memberof BaseMetric\n   */\n  public toJSON(): any {\n    return {\n      description: this.getDescription(),\n      group: this.getGroup(),\n      metadata: this.metadata,\n      name: this.getName(),\n      tags: this.tags,\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketCounting.html":{"url":"interfaces/BucketCounting.html","title":"interface - BucketCounting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BucketCounting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\nThe meaning of the counts is implementation-specific.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getBuckets\n                                    \n                                \n                                \n                                    \n                                        getCounts\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getBuckets\n                        \n                    \n                \n            \n            \n                \ngetBuckets()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:120\n                \n            \n\n\n            \n                \n                    Gets the current Buckets object used to do the counting.\n\n\n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCounts\n                        \n                    \n                \n            \n            \n                \ngetCounts()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:130\n                \n            \n\n\n            \n                \n                    Gets a mapping from the boundary to the count of events\nwithin the corresponding boundary.\nThe meaning of the count is implementation specific.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketToCountMap.html":{"url":"interfaces/BucketToCountMap.html","title":"interface - BucketToCountMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BucketToCountMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for serialized bucket counts.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [bucket: number]:        number\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:137\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Buckets.html":{"url":"classes/Buckets.html","title":"class - Buckets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Buckets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n\n            \n                Description\n            \n            \n                Contains boundaries used to mark one end of a value range.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                boundaries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                exponential\n                            \n                            \n                                    Static\n                                linear\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:88\n                            \n                        \n\n                \n                    \n                            Creates an instance of Buckets.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        boundaries\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:97\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        exponential\n                        \n                    \n                \n            \n            \n                \n                    \n                    exponential(initial: number, factor: number, count: number, precision: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:67\n                \n            \n\n\n            \n                \n                    Creates a new Buckets object with exponentially distributed values.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    initial\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    factor\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10000\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        linear\n                        \n                    \n                \n            \n            \n                \n                    \n                    linear(start: number, bucketWidth: number, count: number, precision: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:43\n                \n            \n\n\n            \n                \n                    Creates a new Buckets object with linear-distributed values.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    bucketWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10000\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonData.html":{"url":"interfaces/CarbonData.html","title":"interface - CarbonData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarbonData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for representing the result of a metric report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            measurement\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        measurement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        measurement:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Document that is getting sent to the carbon / graphite server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:         Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Combined tags for the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Tags,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Graphite / carbon client module.\n */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst graphite = require('graphite')\n\n/**\n * Extending standard options with `host` and `log` properties.\n *\n * @export\n * @interface CarbonMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The graphite / carbon host.\n   *\n   * @type {string}\n   * @memberof CarbonMetricReporterOptions\n   */\n  readonly host: string\n  /**\n   * Minimal logger interface to report failures.\n   *\n   * @type {Logger}\n   * @memberof CarbonMetricReporterOptions\n   */\n  log: Logger\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n  /**\n   * Document that is getting sent to the carbon / graphite server.\n   *\n   * @type {*}\n   * @memberof CarbonData\n   */\n  measurement: any\n  /**\n   * Combined tags for the metric.\n   *\n   * @type {Tags}\n   * @memberof CarbonData\n   */\n  tags: Tags\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private readonly logMetadata: any;\n  /**\n   * Graphite / carbon client instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private client: any;\n\n  /**\n   * Creates an instance of CarbonMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CarbonMetricReporter\n   */\n  public constructor ({\n    host,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CarbonMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      host,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof CarbonMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {Logger} log\n   * @memberof CarbonMetricReporter\n   */\n  public setLog (log: Logger): void {\n    this.options.log = log\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      await this.handleResults(\n        this.createOverallReportContext(),\n        null,\n        event.getTime(),\n        'gauge',\n        [{\n          metric: event,\n          result\n        }]\n      )\n    }\n\n    return event\n  }\n\n  /**\n   * Does nothing\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Uses the scheduler function to trigger periodical reporting.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async start (): Promise {\n    this.client = graphite.createClient(this.options.host)\n    return await super.start()\n  }\n\n  /**\n   * Stops the timer reference returned by the scheduler function.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async stop (): Promise {\n    await super.stop()\n    if (this.client) {\n      await this.client.end()\n    }\n    return this\n  }\n\n  /**\n   * Uses the client instance to report the given metric results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} timestamp\n   * @param {MetricType} type\n   * @param {ReportingResult[]} results\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    timestamp: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    await Promise.all(results\n      .map((result) => result.result)\n      .map(async (carbonData) => await new Promise((resolve, reject) => {\n        // can happen during serialization\n        if (!(timestamp instanceof Date)) {\n          timestamp = new Date(timestamp)\n        }\n        this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n          if (err != null) {\n            if (this.options.log) {\n              this.options.log.error(err, this.logMetadata)\n            }\n            reject(err)\n            return\n          }\n          resolve()\n        })\n      }).catch((err) => {\n        if (this.options.log) {\n          this.options.log.error(err, this.logMetadata)\n        }\n      })))\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): CarbonData {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, counter)\n    tags.group = counter.getGroup()\n    tags.name = counter.getName()\n\n    const prefix = this.getMetricName(counter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = counter.getCount() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, gauge)\n    tags.group = gauge.getGroup()\n    tags.name = gauge.getName()\n\n    const prefix = this.getMetricName(gauge)\n    const measurement: any = {}\n    measurement[`${prefix}.value`] = gauge.getValue() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const tags = this.buildTags(ctx.registry, histogram)\n    tags.group = histogram.getGroup()\n    tags.name = histogram.getName()\n\n    const prefix = this.getMetricName(histogram)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = histogram.getCount() || 0\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): CarbonData {\n    const value = meter.getCount()\n    if (value === undefined || value === null || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, meter)\n    tags.group = meter.getGroup()\n    tags.name = meter.getName()\n\n    const prefix = this.getMetricName(meter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = meter.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, meter)\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): CarbonData {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const tags = this.buildTags(ctx.registry, timer)\n    tags.group = timer.getGroup()\n    tags.name = timer.getName()\n\n    const prefix = this.getMetricName(timer)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = timer.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, timer)\n    }\n  }\n\n  /**\n   * Builds a name for the metric.\n   *\n   * @protected\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof CarbonMetricReporter\n   */\n  protected getMetricName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${metric.getName()}`\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonMetricReporterOptions.html":{"url":"interfaces/CarbonMetricReporterOptions.html","title":"interface - CarbonMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarbonMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Extending standard options with host and log properties.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            log\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The graphite / carbon host.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Tags,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Graphite / carbon client module.\n */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst graphite = require('graphite')\n\n/**\n * Extending standard options with `host` and `log` properties.\n *\n * @export\n * @interface CarbonMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The graphite / carbon host.\n   *\n   * @type {string}\n   * @memberof CarbonMetricReporterOptions\n   */\n  readonly host: string\n  /**\n   * Minimal logger interface to report failures.\n   *\n   * @type {Logger}\n   * @memberof CarbonMetricReporterOptions\n   */\n  log: Logger\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n  /**\n   * Document that is getting sent to the carbon / graphite server.\n   *\n   * @type {*}\n   * @memberof CarbonData\n   */\n  measurement: any\n  /**\n   * Combined tags for the metric.\n   *\n   * @type {Tags}\n   * @memberof CarbonData\n   */\n  tags: Tags\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private readonly logMetadata: any;\n  /**\n   * Graphite / carbon client instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private client: any;\n\n  /**\n   * Creates an instance of CarbonMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CarbonMetricReporter\n   */\n  public constructor ({\n    host,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CarbonMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      host,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof CarbonMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {Logger} log\n   * @memberof CarbonMetricReporter\n   */\n  public setLog (log: Logger): void {\n    this.options.log = log\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      await this.handleResults(\n        this.createOverallReportContext(),\n        null,\n        event.getTime(),\n        'gauge',\n        [{\n          metric: event,\n          result\n        }]\n      )\n    }\n\n    return event\n  }\n\n  /**\n   * Does nothing\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Uses the scheduler function to trigger periodical reporting.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async start (): Promise {\n    this.client = graphite.createClient(this.options.host)\n    return await super.start()\n  }\n\n  /**\n   * Stops the timer reference returned by the scheduler function.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async stop (): Promise {\n    await super.stop()\n    if (this.client) {\n      await this.client.end()\n    }\n    return this\n  }\n\n  /**\n   * Uses the client instance to report the given metric results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} timestamp\n   * @param {MetricType} type\n   * @param {ReportingResult[]} results\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    timestamp: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    await Promise.all(results\n      .map((result) => result.result)\n      .map(async (carbonData) => await new Promise((resolve, reject) => {\n        // can happen during serialization\n        if (!(timestamp instanceof Date)) {\n          timestamp = new Date(timestamp)\n        }\n        this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n          if (err != null) {\n            if (this.options.log) {\n              this.options.log.error(err, this.logMetadata)\n            }\n            reject(err)\n            return\n          }\n          resolve()\n        })\n      }).catch((err) => {\n        if (this.options.log) {\n          this.options.log.error(err, this.logMetadata)\n        }\n      })))\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): CarbonData {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, counter)\n    tags.group = counter.getGroup()\n    tags.name = counter.getName()\n\n    const prefix = this.getMetricName(counter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = counter.getCount() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, gauge)\n    tags.group = gauge.getGroup()\n    tags.name = gauge.getName()\n\n    const prefix = this.getMetricName(gauge)\n    const measurement: any = {}\n    measurement[`${prefix}.value`] = gauge.getValue() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const tags = this.buildTags(ctx.registry, histogram)\n    tags.group = histogram.getGroup()\n    tags.name = histogram.getName()\n\n    const prefix = this.getMetricName(histogram)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = histogram.getCount() || 0\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): CarbonData {\n    const value = meter.getCount()\n    if (value === undefined || value === null || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, meter)\n    tags.group = meter.getGroup()\n    tags.name = meter.getName()\n\n    const prefix = this.getMetricName(meter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = meter.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, meter)\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): CarbonData {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const tags = this.buildTags(ctx.registry, timer)\n    tags.group = timer.getGroup()\n    tags.name = timer.getName()\n\n    const prefix = this.getMetricName(timer)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = timer.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, timer)\n    }\n  }\n\n  /**\n   * Builds a name for the metric.\n   *\n   * @protected\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof CarbonMetricReporter\n   */\n  protected getMetricName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${metric.getName()}`\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clock.html":{"url":"classes/Clock.html","title":"class - Clock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/clock.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstraction of a clock. Used to determine progress in time.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        time\n                        \n                    \n                \n            \n            \n                \n                    \n                    time()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/clock.ts:48\n                \n            \n\n\n            \n                \n                    Gets the current point in time according to the logic of the clock implementation.\n\n\n                    \n                    \n                    \n                        Returns :         Time\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n  milliseconds: number\n  nanoseconds: number\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff (one: Time, two: Time): number {\n  if (!one || !two) {\n    return 0\n  }\n  const oneValue: number = one.nanoseconds + one.milliseconds * 1000000\n  const twoValue: number = two.nanoseconds + two.milliseconds * 1000000\n  return twoValue - oneValue\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n  /**\n   * Gets the current point in time according to the logic of the clock implementation.\n   *\n   * @abstract\n   * @returns {Time}\n   * @memberof Clock\n   */\n  public abstract time (): Time\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n  /**\n   * Returns a Time object who's nanoseconds component is always zero.\n   *\n   * @returns {Time}\n   * @memberof StdClock\n   */\n  public time (): Time {\n    const time = {\n      milliseconds: Date.now(),\n      nanoseconds: 0\n    }\n    return time\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClusterOptions.html":{"url":"interfaces/ClusterOptions.html","title":"interface - ClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Common metrics options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enabled\n                                        \n                                \n                                \n                                        \n                                            eventReceiver\n                                        \n                                \n                                \n                                        \n                                            sendMetricsToMaster\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getWorkers\n                                    \n                                \n                                \n                                    \n                                        sendToMaster\n                                    \n                                \n                                \n                                    \n                                        sendToWorker\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getWorkers\n                        \n                    \n                \n            \n            \n                \ngetWorkers()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:67\n                \n            \n\n\n            \n                \n                    Gets a list of all workers.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendToMaster\n                        \n                    \n                \n            \n            \n                \nsendToMaster(message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:51\n                \n            \n\n\n            \n                \n                    Function to send messages to the master-process.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendToWorker\n                        \n                    \n                \n            \n            \n                \nsendToWorker(worker: Worker, message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:60\n                \n            \n\n\n            \n                \n                    Function for sending message to a worker instance.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    worker\n                                    \n                                            Worker\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates if clustering-support is enabled or not.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventReceiver\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventReceiver:         ReportMessageReceiver\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReportMessageReceiver\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventReceiver to get messages from master on forked processes or from forked processes on master.\nCompatible with 'cluster'.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sendMetricsToMaster\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sendMetricsToMaster:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates if the #sendToMaster function should be used to send messages to the master process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport {\n  Worker\n} from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\nconst defaultCluster = (cluster.default || cluster) as any\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = defaultCluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!defaultCluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => defaultCluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Counter.html":{"url":"classes/Counter.html","title":"class - Counter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/counter.ts\n        \n\n\n            \n                Description\n            \n            \n                A counter represents a number that can be increased or decreased in steps.\nThe initial value is 0.\n\n            \n\n            \n                Extends\n            \n            \n                        MonotoneCounter\n            \n\n            \n                Implements\n            \n            \n                            Counting\n                            Metric\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                count\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadataMap\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Protected\n                                tagMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                decrement\n                            \n                            \n                                    Public\n                                increment\n                            \n                            \n                                    Public\n                                getCount\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/counter.ts:98\n                            \n                        \n\n                \n                    \n                            Creates an instance of Counter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional name of the counter\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional description of the counter\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                Inherited from         MonotoneCounter\n\n                            \n                        \n                    \n                        \n                                Defined in         MonotoneCounter:24\n\n                        \n                    \n\n            \n                \n                    Holds the current value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        COUNTER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:217\n\n                        \n                    \n\n            \n                \n                    A static number instance to give an unique id within an application instance.\nThis counter is only unique per process, forked processes start from 0.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:249\n\n                        \n                    \n\n            \n                \n                    The description of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:233\n\n                        \n                    \n\n            \n                \n                    The group set to this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : BaseMetric.COUNTER++\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:225\n\n                        \n                    \n\n            \n                \n                    The unique id of this metric instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        metadataMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:257\n\n                        \n                    \n\n            \n                \n                    The metadata associated with an instance of class.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:241\n\n                        \n                    \n\n            \n                \n                    The name of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        tagMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:265\n\n                        \n                    \n\n            \n                \n                    Maps of tags for this metric.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        decrement\n                        \n                    \n                \n            \n            \n                \n                    \n                    decrement(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:129\n                \n            \n\n\n            \n                \n                    Decreases the current count by the given value - a negative value is increasing the current count.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        increment\n                        \n                    \n                \n            \n            \n                \n                    \n                    increment(value: number)\n                \n            \n\n\n            \n                \n                    Inherited from         MonotoneCounter\n\n                \n            \n            \n                \n                        Defined in         MonotoneCounter:117\n\n                \n            \n\n\n            \n                \n                    Increases the current count by the given value - a negative value is decreasing the current count.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCount\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCount()\n                \n            \n\n\n            \n                \n                    Inherited from         MonotoneCounter\n\n                \n            \n            \n                \n                        Defined in         MonotoneCounter:60\n\n                \n            \n\n\n            \n                \n                    Gets the current count.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         MonotoneCounter\n\n                \n            \n            \n                \n                        Defined in         MonotoneCounter:70\n\n                \n            \n\n\n            \n                \n                    Sets the current count to 0.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:81\n\n                \n            \n\n\n            \n                \n                    Same as BaseMetric, also adding count property.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:339\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDescription()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:303\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:312\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:279\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadataMap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadataMap()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:275\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:325\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:321\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:283\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:344\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:349\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDescription(description: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:307\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroup(group: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:316\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:289\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setName\n                        \n                    \n                \n            \n            \n                \n                    \n                    setName(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:329\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:334\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:354\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Counting } from './model/counting'\nimport { BaseMetric, Metric } from './model/metric'\n\n/**\n * A monotonically increasing number.\n * The initial value is 0.\n *\n * @export\n * @class MonotoneCounter\n * @extends {BaseMetric}\n * @implements {Counting}\n * @implements {Metric}\n */\nexport class MonotoneCounter extends BaseMetric implements Counting, Metric {\n  /**\n   * Holds the current value.\n   *\n   * @private\n   * @type {number}\n   * @memberof MonotoneCounter\n   */\n  protected count: number = 0\n\n  /**\n   * Creates an instance of MonotoneCounter.\n   *\n   * @param {string} [name] optional name of the counter\n   * @param {string} [description] optional description of the counter\n   * @memberof MonotoneCounter\n   */\n  public constructor (name?: string, description?: string) {\n    super()\n    this.name = name\n    this.description = description\n  }\n\n  /**\n   * Increases the current count by the given value - a negative value is causing an error.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof MonotoneCounter\n   */\n  public increment (value: number): this {\n    if (value \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Counting.html":{"url":"interfaces/Counting.html","title":"interface - Counting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Counting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents everything that is countable (Counter, MonotoneCounter, Histogram).\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getCount\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:20\n                \n            \n\n\n            \n                \n                    Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvFileWriter.html":{"url":"interfaces/CsvFileWriter.html","title":"interface - CsvFileWriter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CsvFileWriter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Delegation interface for writing the actual value to a file.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        init\n                                    \n                                \n                                \n                                    \n                                        writeRow\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(header: Row)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/CsvMetricReporter.ts:88\n                \n            \n\n\n            \n                \n                    Called on every metrics-report run one time - behavior is implementation specific.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    header\n                                    \n                                                Row\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeRow\n                        \n                    \n                \n            \n            \n                \nwriteRow(metric: Metric | SerializableMetric, values: Row)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/CsvMetricReporter.ts:98\n                \n            \n\n\n            \n                \n                    Called for each field of each metric and after init finished - behavior is implementation specific.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n                                    \n                                            Metric | SerializableMetric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                                Row\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  Histogram,\n  InterprocessReportMessage,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  SerializableMetric,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport * as moment from 'moment-timezone'\n\n/**\n * Lists all possible column types.\n */\nexport type ColumnType = 'date' | 'name' | 'field' | 'group' | 'description' | 'value' | 'tags' | 'type' | 'metadata';\n\n/**\n * Shortcut type for a row.\n */\nexport type Row = string[];\n\n/**\n * Shortcut type for many rows.\n */\nexport type Rows = Row[];\n\n/**\n * Type for a tag or metadata filter.\n */\nexport type Filter = (metric: Metric, key: string, value: string) => Promise;\n\n/**\n * Helper interface for Fields.\n *\n * @interface Fields\n */\ninterface Fields {\n  [field: string]: string\n}\n\n/**\n * Tags and metadata can be exported in one row or in separate rows.\n *\n * @export\n * @enum {number}\n */\nexport enum ExportMode {\n  ALL_IN_ONE_COLUMN,\n  EACH_IN_OWN_COLUMN,\n}\n\n/**\n * Delegation interface for writing the actual value to a file.\n *\n * @export\n * @interface CsvFileWriter\n */\nexport interface CsvFileWriter {\n\n  /**\n   * Called on every metrics-report run one time - behavior is implementation specific.\n   *\n   * @param {Row} header\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  init(header: Row): Promise\n\n  /**\n   * Called for each field of each metric and after init finished - behavior is implementation specific.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {Row} values\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  writeRow(metric: Metric | SerializableMetric, values: Row): Promise\n}\n\n/**\n * Options for {@link CsvMetricReporter}.\n *\n * @export\n * @interface CsvMetricReporterOptions\n */\nexport interface CsvMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The writer used to store the rows.\n   *\n   * @type {CsvFileWriter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly writer?: CsvFileWriter\n  /**\n   * Indicates that single quotes are used instead of double quotes.\n   *\n   * @type {boolean}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly useSingleQuotes?: boolean\n  /**\n   * ExportMode for tags.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagExportMode?: ExportMode\n  /**\n   * ExportMode for metadata.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataExportMode?: ExportMode\n  /**\n   * Prefix for tag columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagColumnPrefix?: string\n  /**\n   * Delimiter between the tags if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagDelimiter?: string\n  /**\n   * Prefix for metadata columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataColumnPrefix?: string\n  /**\n   * Delimiter between the metadata if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataDelimiter?: string\n  /**\n   * The columns to export.\n   *\n   * @type {ColumnType[]}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly columns?: ColumnType[]\n  /**\n   * The format for the date column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly dateFormat?: string\n  /**\n   * The timezone used to determine the date.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly timezone?: string\n  /**\n   * An async filter function used to filter out unwanted tags.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagFilter?: Filter\n  /**\n   * An async filter function used to filter out unwanted metadata.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataFilter?: Filter\n}\n\n/**\n * Metric reporter for csv files.\n *\n * @export\n * @class CsvMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CsvMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Header row.\n   *\n   * @private\n   * @type {Row}\n   * @memberof CsvMetricReporter\n   */\n  private header: Row;\n  /**\n   * All metadata names\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly metadataNames: string[] = [];\n  /**\n   * All tags names.\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly tagsNames: string[] = [];\n\n  /**\n   * Creates an instance of CsvMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CsvMetricReporter\n   */\n  public constructor ({\n    writer,\n    useSingleQuotes = false,\n    tagExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    metadataExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    tagColumnPrefix = 'tag_',\n    tagDelimiter = ';',\n    metadataColumnPrefix = 'meta_',\n    metadataDelimiter = ';',\n    columns = [],\n    dateFormat = 'YYYYMMDDHHmmss.SSSZ',\n    timezone = 'UTC',\n    tagFilter = async () => true,\n    metadataFilter = async () => true,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CsvMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      columns,\n      dateFormat,\n      metadataColumnPrefix,\n      metadataDelimiter,\n      metadataExportMode,\n      metadataFilter,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tagColumnPrefix,\n      tagDelimiter,\n      tagExportMode,\n      tagFilter,\n      tags,\n      timezone,\n      unit,\n      useSingleQuotes,\n      writer\n    }, reporterType)\n  }\n\n  /**\n   * Builds all headers and starts scheduling reporting runs.\n   * When call this method all metadata and tags in each metric\n   * in the application need to be set / known, otherwise it cannot be\n   * reported.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async start (): Promise {\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      // rebuild header on every call to start\n      this.header = await this.buildHeaders()\n      // only call init on master process\n      if (this.shouldCallInit()) {\n        await this.options.writer.init(this.header)\n      }\n      await super.start()\n    }\n    return this\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!this.header) {\n      this.header = await this.buildHeaders()\n    }\n\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      if (this.options.clusterOptions &&\n        this.options.clusterOptions.enabled &&\n        this.options.clusterOptions.sendMetricsToMaster) {\n        const message: InterprocessReportMessage = {\n          ctx: {},\n          date: event.getTime(),\n          metrics: {\n            counters: [],\n            gauges: [{\n              metric: event,\n              result\n            }],\n            histograms: [],\n            meters: [],\n            monotoneCounters: [],\n            timers: []\n          },\n          tags: this.buildTags(null, null),\n          targetReporterType: this.reporterType,\n          type: CsvMetricReporter.MESSAGE_TYPE\n        }\n        await this.options.clusterOptions.sendToMaster(message)\n      } else {\n        await this.options.writer.init(this.header)\n        await this.handleResults(null, null, event.getTime(), 'gauge', [{\n          metric: event,\n          result\n        }])\n      }\n    }\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Indicates if the init method of the writer instance should be called.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof CsvMetricReporter\n   */\n  protected shouldCallInit (): boolean {\n    return !this.options.clusterOptions ||\n      !this.options.clusterOptions.enabled ||\n      (this.options.clusterOptions.enabled && !this.options.clusterOptions.sendMetricsToMaster)\n  }\n\n  /**\n   * Makes sure the csv headers are built, written to the file to then\n   * call the parent class's implementation of this method.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof CsvMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n    if (this.canHandleMessage(message)) {\n      if (!this.header) {\n        this.header = await this.buildHeaders()\n      }\n      await this.options.writer.init(this.header)\n      await super.handleReportMessage(worker, message, handle)\n    }\n  }\n\n  /**\n   * Calls the init method of the writer instance if\n   * the metrics are not send to the master process\n   * (so probably only called by master-process if clustering is enabled).\n   *\n   * @protected\n   * @memberof CsvMetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    if (this.shouldCallInit()) {\n      await this.options.writer.init(this.header)\n    }\n  }\n\n  /**\n   * Writes the reporting results to the writer instance.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof CsvMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const dateStr = moment.tz(date, this.options.timezone).format(this.options.dateFormat)\n    for (const result of results) {\n      const fields = result.result\n      const metric = result.metric\n      if (fields) {\n        const rows: Rows = []\n        for (const field of Object.keys(fields)) {\n          const row = this.buildRow(registry, dateStr, metric, type, field, fields[field])\n          rows.push(row)\n        }\n        if (rows.length > 0) {\n          await this.writeRows(metric, rows, type)\n        }\n      }\n    }\n  }\n\n  /**\n   * Gathers the fields for a counter metric.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${counter.getCount()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a gauge metric.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Fields {\n    return {\n      value: `${gauge.getValue()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a histogram metric.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Fields {\n    const snapshot = histogram.getSnapshot()\n    const bucketFields: Fields = {}\n    histogram\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(histogram.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${this.getNumber(histogram.getCount())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: histogram.getSum().toString()\n    }\n  }\n\n  /**\n   * Gathers the fields for a meter metric.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${this.getNumber(meter.getCount())}`,\n      m15_rate: `${this.getNumber(meter.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(meter.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(meter.get5MinuteRate())}`,\n      mean_rate: `${this.getNumber(meter.getMeanRate())}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a timer metric.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Fields {\n    const snapshot = timer.getSnapshot()\n    const bucketFields: Fields = {}\n    timer\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(timer.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${timer.getCount() || 0}`,\n      m15_rate: `${this.getNumber(timer.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(timer.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(timer.get5MinuteRate())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      mean_rate: `${this.getNumber(timer.getMeanRate())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: timer.getSum().toString()\n    }\n  }\n\n  /**\n   * Builds a row / string array with all headers. Also updated the internal data of the reporter.\n   *\n   * @private\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  private async buildHeaders (): Promise {\n    const headers: Row = []\n\n    for (const columnType of this.options.columns) {\n      if (columnType === 'metadata' && this.options.metadataExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const metadataNames = this.getAllMetadataKeys()\n        const filteredNames = await this.filterKeys(metadataNames, this.options.metadataFilter)\n        filteredNames.forEach((metadataName) => {\n          headers.push(`${this.options.metadataColumnPrefix}${metadataName}`)\n          this.metadataNames.push(metadataName)\n        })\n      } else if (columnType === 'tags' && this.options.tagExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const tagNames = this.getAllTagKeys()\n        const filteredTags = await this.filterKeys(tagNames, this.options.tagFilter)\n        filteredTags.forEach((tag) => {\n          headers.push(`${this.options.tagColumnPrefix}${tag}`)\n          this.tagsNames.push(tag)\n        })\n      } else {\n        headers.push(columnType)\n      }\n    }\n\n    return headers\n  }\n\n  /**\n   * Filters the given set of strings using the given filter and returns the filtered set.\n   *\n   * @private\n   * @param {Set} keys\n   * @param {Filter} filter\n   * @returns {Promise>}\n   * @memberof CsvMetricReporter\n   */\n  private async filterKeys (keys: Set, filter: Filter): Promise> {\n    const filteredKeys = new Set()\n    const tasks: Array> = []\n    keys.forEach((key) => {\n      tasks.push((async () => {\n        if (!filter || await filter(null, key, null)) {\n          filteredKeys.add(key)\n        }\n      })())\n    })\n    await Promise.all(tasks)\n    return filteredKeys\n  }\n\n  /**\n   * Gets all metadata keys - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllMetadataKeys (): Set {\n    const metadataNames = new Set()\n    this.metricRegistries\n      .map((registry) => registry.getMetricList())\n      .map((metrics) => metrics.map((metric) => metric.getMetadataMap()))\n      .forEach((metadataMapArray) => {\n        metadataMapArray.forEach((metadataMap) => {\n          for (const metadataName of metadataMap.keys()) {\n            metadataNames.add(metadataName)\n          }\n        })\n      })\n    return metadataNames\n  }\n\n  /**\n   * Gets all tag names - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllTagKeys (): Set {\n    const tags = new Set()\n    this.options.tags.forEach((value, tag) => tags.add(tag))\n    this.metricRegistries\n      .map((registry) => ({\n        metrics: registry.getMetricList(),\n        registry\n      }))\n      .map((result) => result.metrics.map((metric) => this.buildTags(result.registry, metric)))\n      .forEach((metricTagsArray) => {\n        metricTagsArray.forEach((metricTags) => {\n          Object.keys(metricTags).forEach((tag) => tags.add(tag))\n        })\n      })\n    return tags\n  }\n\n  /**\n   * Builds the row of a single metric.\n   *\n   * @private\n   * @template T\n   * @param {MetricRegistry | null} registry\n   * @param {string} dateStr\n   * @param {T} metric\n   * @param {MetricType} type\n   * @param {string} field\n   * @param {string} value\n   * @returns {Row}\n   * @memberof CsvMetricReporter\n   */\n  private buildRow(\n    registry: MetricRegistry | null,\n    dateStr: string,\n    metric: T,\n    type: MetricType,\n    field: string,\n    value: string): Row {\n    const quote = this.options.useSingleQuotes ? \"'\" : '\"'\n    const row: Row = []\n    const tags = this.buildTags(registry, metric)\n\n    let metadataStr = ''\n    if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      const metadata: Metadata = getMetricMetadata(metric)\n      Object.keys(metadata).forEach((metadataName) => {\n        const metadataValue = metadata[metadataName]\n        metadataStr += `${metadataName}=${quote}${metadataValue}${quote}${this.options.metadataDelimiter}`\n      })\n      metadataStr = metadataStr.slice(0, -1)\n    }\n\n    let tagStr = ''\n    if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      tagStr = Object.keys(tags)\n        .map((tag) => `${tag}=${quote}${tags[tag]}${quote}`)\n        .join(this.options.tagDelimiter)\n    }\n\n    for (const columnType of this.options.columns) {\n      let tmpStr = ''\n      switch (columnType) {\n        case 'date':\n          row.push(dateStr)\n          break\n        case 'description':\n          tmpStr = encodeURIComponent(getMetricDescription(metric) || '')\n          if (quote === \"'\") {\n            tmpStr = tmpStr.replace(/'/g, \"\\\\'\")\n          }\n          row.push(`${quote}${tmpStr}${quote}`)\n          break\n        case 'field':\n          row.push(`${quote}${field || ''}${quote}`)\n          break\n        case 'group':\n          row.push(`${quote}${getMetricGroup(metric) || ''}${quote}`)\n          break\n        case 'metadata':\n          if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(metadataStr)\n          } else {\n            const metadata: Metadata = getMetricMetadata(metric)\n            for (const metadataName of this.metadataNames) {\n              row.push(`${quote}${metadata[metadataName] || ''}${quote}`)\n            }\n          }\n          break\n        case 'name':\n          row.push(`${quote}${getMetricName(metric) || ''}${quote}`)\n          break\n        case 'tags':\n          if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(tagStr)\n          } else {\n            for (const tag of this.tagsNames) {\n              row.push(`${quote}${tags[tag] || ''}${quote}`)\n            }\n          }\n          break\n        case 'type':\n          row.push(`${quote}${type || ''}${quote}`)\n          break\n        case 'value':\n          row.push(value || '')\n          break\n        default:\n      }\n    }\n\n    return row\n  }\n\n  /**\n   * Writes the rows by calling the corresponding {@link CsvFileWriter}.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {Rows} rows\n   * @param {MetricType} type\n   * @memberof CsvMetricReporter\n   */\n  private async writeRows(\n    metric: T,\n    rows: Rows,\n    type: MetricType\n  ): Promise {\n    for (const row of rows) {\n      await this.options.writer.writeRow(metric, row)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvMetricReporterOptions.html":{"url":"interfaces/CsvMetricReporterOptions.html","title":"interface - CsvMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CsvMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for CsvMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            columns\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dateFormat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadataColumnPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadataDelimiter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadataExportMode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadataFilter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tagColumnPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tagDelimiter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tagExportMode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tagFilter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timezone\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useSingleQuotes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            writer\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columns:         ColumnType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The columns to export.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateFormat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The format for the date column.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataColumnPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadataColumnPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Prefix for metadata columns if exported separately.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataDelimiter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadataDelimiter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Delimiter between the metadata if exported in one column.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataExportMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadataExportMode:         ExportMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ExportMode for metadata.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataFilter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadataFilter:         Filter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Filter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async filter function used to filter out unwanted metadata.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagColumnPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tagColumnPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Prefix for tag columns if exported separately.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagDelimiter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tagDelimiter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Delimiter between the tags if exported in one column.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagExportMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tagExportMode:         ExportMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ExportMode for tags.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagFilter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tagFilter:         Filter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Filter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async filter function used to filter out unwanted tags.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timezone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timezone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The timezone used to determine the date.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useSingleQuotes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useSingleQuotes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates that single quotes are used instead of double quotes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        writer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        writer:         CsvFileWriter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CsvFileWriter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The writer used to store the rows.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  Histogram,\n  InterprocessReportMessage,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  SerializableMetric,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport * as moment from 'moment-timezone'\n\n/**\n * Lists all possible column types.\n */\nexport type ColumnType = 'date' | 'name' | 'field' | 'group' | 'description' | 'value' | 'tags' | 'type' | 'metadata';\n\n/**\n * Shortcut type for a row.\n */\nexport type Row = string[];\n\n/**\n * Shortcut type for many rows.\n */\nexport type Rows = Row[];\n\n/**\n * Type for a tag or metadata filter.\n */\nexport type Filter = (metric: Metric, key: string, value: string) => Promise;\n\n/**\n * Helper interface for Fields.\n *\n * @interface Fields\n */\ninterface Fields {\n  [field: string]: string\n}\n\n/**\n * Tags and metadata can be exported in one row or in separate rows.\n *\n * @export\n * @enum {number}\n */\nexport enum ExportMode {\n  ALL_IN_ONE_COLUMN,\n  EACH_IN_OWN_COLUMN,\n}\n\n/**\n * Delegation interface for writing the actual value to a file.\n *\n * @export\n * @interface CsvFileWriter\n */\nexport interface CsvFileWriter {\n\n  /**\n   * Called on every metrics-report run one time - behavior is implementation specific.\n   *\n   * @param {Row} header\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  init(header: Row): Promise\n\n  /**\n   * Called for each field of each metric and after init finished - behavior is implementation specific.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {Row} values\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  writeRow(metric: Metric | SerializableMetric, values: Row): Promise\n}\n\n/**\n * Options for {@link CsvMetricReporter}.\n *\n * @export\n * @interface CsvMetricReporterOptions\n */\nexport interface CsvMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The writer used to store the rows.\n   *\n   * @type {CsvFileWriter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly writer?: CsvFileWriter\n  /**\n   * Indicates that single quotes are used instead of double quotes.\n   *\n   * @type {boolean}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly useSingleQuotes?: boolean\n  /**\n   * ExportMode for tags.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagExportMode?: ExportMode\n  /**\n   * ExportMode for metadata.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataExportMode?: ExportMode\n  /**\n   * Prefix for tag columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagColumnPrefix?: string\n  /**\n   * Delimiter between the tags if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagDelimiter?: string\n  /**\n   * Prefix for metadata columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataColumnPrefix?: string\n  /**\n   * Delimiter between the metadata if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataDelimiter?: string\n  /**\n   * The columns to export.\n   *\n   * @type {ColumnType[]}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly columns?: ColumnType[]\n  /**\n   * The format for the date column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly dateFormat?: string\n  /**\n   * The timezone used to determine the date.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly timezone?: string\n  /**\n   * An async filter function used to filter out unwanted tags.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagFilter?: Filter\n  /**\n   * An async filter function used to filter out unwanted metadata.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataFilter?: Filter\n}\n\n/**\n * Metric reporter for csv files.\n *\n * @export\n * @class CsvMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CsvMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Header row.\n   *\n   * @private\n   * @type {Row}\n   * @memberof CsvMetricReporter\n   */\n  private header: Row;\n  /**\n   * All metadata names\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly metadataNames: string[] = [];\n  /**\n   * All tags names.\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly tagsNames: string[] = [];\n\n  /**\n   * Creates an instance of CsvMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CsvMetricReporter\n   */\n  public constructor ({\n    writer,\n    useSingleQuotes = false,\n    tagExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    metadataExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    tagColumnPrefix = 'tag_',\n    tagDelimiter = ';',\n    metadataColumnPrefix = 'meta_',\n    metadataDelimiter = ';',\n    columns = [],\n    dateFormat = 'YYYYMMDDHHmmss.SSSZ',\n    timezone = 'UTC',\n    tagFilter = async () => true,\n    metadataFilter = async () => true,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CsvMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      columns,\n      dateFormat,\n      metadataColumnPrefix,\n      metadataDelimiter,\n      metadataExportMode,\n      metadataFilter,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tagColumnPrefix,\n      tagDelimiter,\n      tagExportMode,\n      tagFilter,\n      tags,\n      timezone,\n      unit,\n      useSingleQuotes,\n      writer\n    }, reporterType)\n  }\n\n  /**\n   * Builds all headers and starts scheduling reporting runs.\n   * When call this method all metadata and tags in each metric\n   * in the application need to be set / known, otherwise it cannot be\n   * reported.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async start (): Promise {\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      // rebuild header on every call to start\n      this.header = await this.buildHeaders()\n      // only call init on master process\n      if (this.shouldCallInit()) {\n        await this.options.writer.init(this.header)\n      }\n      await super.start()\n    }\n    return this\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!this.header) {\n      this.header = await this.buildHeaders()\n    }\n\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      if (this.options.clusterOptions &&\n        this.options.clusterOptions.enabled &&\n        this.options.clusterOptions.sendMetricsToMaster) {\n        const message: InterprocessReportMessage = {\n          ctx: {},\n          date: event.getTime(),\n          metrics: {\n            counters: [],\n            gauges: [{\n              metric: event,\n              result\n            }],\n            histograms: [],\n            meters: [],\n            monotoneCounters: [],\n            timers: []\n          },\n          tags: this.buildTags(null, null),\n          targetReporterType: this.reporterType,\n          type: CsvMetricReporter.MESSAGE_TYPE\n        }\n        await this.options.clusterOptions.sendToMaster(message)\n      } else {\n        await this.options.writer.init(this.header)\n        await this.handleResults(null, null, event.getTime(), 'gauge', [{\n          metric: event,\n          result\n        }])\n      }\n    }\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Indicates if the init method of the writer instance should be called.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof CsvMetricReporter\n   */\n  protected shouldCallInit (): boolean {\n    return !this.options.clusterOptions ||\n      !this.options.clusterOptions.enabled ||\n      (this.options.clusterOptions.enabled && !this.options.clusterOptions.sendMetricsToMaster)\n  }\n\n  /**\n   * Makes sure the csv headers are built, written to the file to then\n   * call the parent class's implementation of this method.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof CsvMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n    if (this.canHandleMessage(message)) {\n      if (!this.header) {\n        this.header = await this.buildHeaders()\n      }\n      await this.options.writer.init(this.header)\n      await super.handleReportMessage(worker, message, handle)\n    }\n  }\n\n  /**\n   * Calls the init method of the writer instance if\n   * the metrics are not send to the master process\n   * (so probably only called by master-process if clustering is enabled).\n   *\n   * @protected\n   * @memberof CsvMetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    if (this.shouldCallInit()) {\n      await this.options.writer.init(this.header)\n    }\n  }\n\n  /**\n   * Writes the reporting results to the writer instance.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof CsvMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const dateStr = moment.tz(date, this.options.timezone).format(this.options.dateFormat)\n    for (const result of results) {\n      const fields = result.result\n      const metric = result.metric\n      if (fields) {\n        const rows: Rows = []\n        for (const field of Object.keys(fields)) {\n          const row = this.buildRow(registry, dateStr, metric, type, field, fields[field])\n          rows.push(row)\n        }\n        if (rows.length > 0) {\n          await this.writeRows(metric, rows, type)\n        }\n      }\n    }\n  }\n\n  /**\n   * Gathers the fields for a counter metric.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${counter.getCount()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a gauge metric.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Fields {\n    return {\n      value: `${gauge.getValue()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a histogram metric.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Fields {\n    const snapshot = histogram.getSnapshot()\n    const bucketFields: Fields = {}\n    histogram\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(histogram.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${this.getNumber(histogram.getCount())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: histogram.getSum().toString()\n    }\n  }\n\n  /**\n   * Gathers the fields for a meter metric.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${this.getNumber(meter.getCount())}`,\n      m15_rate: `${this.getNumber(meter.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(meter.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(meter.get5MinuteRate())}`,\n      mean_rate: `${this.getNumber(meter.getMeanRate())}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a timer metric.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Fields {\n    const snapshot = timer.getSnapshot()\n    const bucketFields: Fields = {}\n    timer\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(timer.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${timer.getCount() || 0}`,\n      m15_rate: `${this.getNumber(timer.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(timer.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(timer.get5MinuteRate())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      mean_rate: `${this.getNumber(timer.getMeanRate())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: timer.getSum().toString()\n    }\n  }\n\n  /**\n   * Builds a row / string array with all headers. Also updated the internal data of the reporter.\n   *\n   * @private\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  private async buildHeaders (): Promise {\n    const headers: Row = []\n\n    for (const columnType of this.options.columns) {\n      if (columnType === 'metadata' && this.options.metadataExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const metadataNames = this.getAllMetadataKeys()\n        const filteredNames = await this.filterKeys(metadataNames, this.options.metadataFilter)\n        filteredNames.forEach((metadataName) => {\n          headers.push(`${this.options.metadataColumnPrefix}${metadataName}`)\n          this.metadataNames.push(metadataName)\n        })\n      } else if (columnType === 'tags' && this.options.tagExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const tagNames = this.getAllTagKeys()\n        const filteredTags = await this.filterKeys(tagNames, this.options.tagFilter)\n        filteredTags.forEach((tag) => {\n          headers.push(`${this.options.tagColumnPrefix}${tag}`)\n          this.tagsNames.push(tag)\n        })\n      } else {\n        headers.push(columnType)\n      }\n    }\n\n    return headers\n  }\n\n  /**\n   * Filters the given set of strings using the given filter and returns the filtered set.\n   *\n   * @private\n   * @param {Set} keys\n   * @param {Filter} filter\n   * @returns {Promise>}\n   * @memberof CsvMetricReporter\n   */\n  private async filterKeys (keys: Set, filter: Filter): Promise> {\n    const filteredKeys = new Set()\n    const tasks: Array> = []\n    keys.forEach((key) => {\n      tasks.push((async () => {\n        if (!filter || await filter(null, key, null)) {\n          filteredKeys.add(key)\n        }\n      })())\n    })\n    await Promise.all(tasks)\n    return filteredKeys\n  }\n\n  /**\n   * Gets all metadata keys - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllMetadataKeys (): Set {\n    const metadataNames = new Set()\n    this.metricRegistries\n      .map((registry) => registry.getMetricList())\n      .map((metrics) => metrics.map((metric) => metric.getMetadataMap()))\n      .forEach((metadataMapArray) => {\n        metadataMapArray.forEach((metadataMap) => {\n          for (const metadataName of metadataMap.keys()) {\n            metadataNames.add(metadataName)\n          }\n        })\n      })\n    return metadataNames\n  }\n\n  /**\n   * Gets all tag names - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllTagKeys (): Set {\n    const tags = new Set()\n    this.options.tags.forEach((value, tag) => tags.add(tag))\n    this.metricRegistries\n      .map((registry) => ({\n        metrics: registry.getMetricList(),\n        registry\n      }))\n      .map((result) => result.metrics.map((metric) => this.buildTags(result.registry, metric)))\n      .forEach((metricTagsArray) => {\n        metricTagsArray.forEach((metricTags) => {\n          Object.keys(metricTags).forEach((tag) => tags.add(tag))\n        })\n      })\n    return tags\n  }\n\n  /**\n   * Builds the row of a single metric.\n   *\n   * @private\n   * @template T\n   * @param {MetricRegistry | null} registry\n   * @param {string} dateStr\n   * @param {T} metric\n   * @param {MetricType} type\n   * @param {string} field\n   * @param {string} value\n   * @returns {Row}\n   * @memberof CsvMetricReporter\n   */\n  private buildRow(\n    registry: MetricRegistry | null,\n    dateStr: string,\n    metric: T,\n    type: MetricType,\n    field: string,\n    value: string): Row {\n    const quote = this.options.useSingleQuotes ? \"'\" : '\"'\n    const row: Row = []\n    const tags = this.buildTags(registry, metric)\n\n    let metadataStr = ''\n    if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      const metadata: Metadata = getMetricMetadata(metric)\n      Object.keys(metadata).forEach((metadataName) => {\n        const metadataValue = metadata[metadataName]\n        metadataStr += `${metadataName}=${quote}${metadataValue}${quote}${this.options.metadataDelimiter}`\n      })\n      metadataStr = metadataStr.slice(0, -1)\n    }\n\n    let tagStr = ''\n    if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      tagStr = Object.keys(tags)\n        .map((tag) => `${tag}=${quote}${tags[tag]}${quote}`)\n        .join(this.options.tagDelimiter)\n    }\n\n    for (const columnType of this.options.columns) {\n      let tmpStr = ''\n      switch (columnType) {\n        case 'date':\n          row.push(dateStr)\n          break\n        case 'description':\n          tmpStr = encodeURIComponent(getMetricDescription(metric) || '')\n          if (quote === \"'\") {\n            tmpStr = tmpStr.replace(/'/g, \"\\\\'\")\n          }\n          row.push(`${quote}${tmpStr}${quote}`)\n          break\n        case 'field':\n          row.push(`${quote}${field || ''}${quote}`)\n          break\n        case 'group':\n          row.push(`${quote}${getMetricGroup(metric) || ''}${quote}`)\n          break\n        case 'metadata':\n          if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(metadataStr)\n          } else {\n            const metadata: Metadata = getMetricMetadata(metric)\n            for (const metadataName of this.metadataNames) {\n              row.push(`${quote}${metadata[metadataName] || ''}${quote}`)\n            }\n          }\n          break\n        case 'name':\n          row.push(`${quote}${getMetricName(metric) || ''}${quote}`)\n          break\n        case 'tags':\n          if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(tagStr)\n          } else {\n            for (const tag of this.tagsNames) {\n              row.push(`${quote}${tags[tag] || ''}${quote}`)\n            }\n          }\n          break\n        case 'type':\n          row.push(`${quote}${type || ''}${quote}`)\n          break\n        case 'value':\n          row.push(value || '')\n          break\n        default:\n      }\n    }\n\n    return row\n  }\n\n  /**\n   * Writes the rows by calling the corresponding {@link CsvFileWriter}.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {Rows} rows\n   * @param {MetricType} type\n   * @memberof CsvMetricReporter\n   */\n  private async writeRows(\n    metric: T,\n    rows: Rows,\n    type: MetricType\n  ): Promise {\n    for (const row of rows) {\n      await this.options.writer.writeRow(metric, row)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultClusterOptions.html":{"url":"classes/DefaultClusterOptions.html","title":"class - DefaultClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Default cluster setting applicable for most metric-reporter implementations.\nEnables unidirectional message by sending metrics from forked processes to master process.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ClusterOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventReceiver\n                            \n                            \n                                    Public\n                                    Readonly\n                                getWorkers\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendMetricsToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToWorker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:122\n                        \n                    \n\n            \n                \n                    Set to true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        eventReceiver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportMessageReceiver\n\n                    \n                \n                \n                    \n                        Default value : defaultCluster\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:129\n                        \n                    \n\n            \n                \n                    Set to cluster module.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        getWorkers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:135\n                        \n                    \n\n            \n                \n                    Set to null.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sendMetricsToMaster\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : !!defaultCluster.worker\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:142\n                        \n                    \n\n            \n                \n                    True for forked processes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sendToMaster\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:154\n                        \n                    \n\n            \n                \n                    Uses 'cluster.worker.send' to send messages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sendToWorker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:148\n                        \n                    \n\n            \n                \n                    Set to null.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport {\n  Worker\n} from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\nconst defaultCluster = (cluster.default || cluster) as any\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = defaultCluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!defaultCluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => defaultCluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultCsvFileWriter.html":{"url":"classes/DefaultCsvFileWriter.html","title":"class - DefaultCsvFileWriter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultCsvFileWriter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n        \n\n\n            \n                Description\n            \n            \n                Standard implementation for a csv file writer.\n\n            \n\n\n            \n                Implements\n            \n            \n                            CsvFileWriter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentDir\n                            \n                            \n                                    Private\n                                currentFilename\n                            \n                            \n                                    Private\n                                    Readonly\n                                options\n                            \n                            \n                                    Private\n                                    Readonly\n                                queue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                            \n                                    Private\n                                    Async\n                                mkdir\n                            \n                            \n                                    Private\n                                    Async\n                                stat\n                            \n                            \n                                    Private\n                                    Async\n                                write\n                            \n                            \n                                    Public\n                                    Async\n                                writeRow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(undefined: DefaultCsvFileWriterOptions)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:109\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultCsvFileWriter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        DefaultCsvFileWriterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentDir\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:101\n                        \n                    \n\n            \n                \n                    Holds the current dir to check if dir has changed\nand a new one needs to be created as well as the file in it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentFilename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:92\n                        \n                    \n\n            \n                \n                    Holds the current file name to check if the filename has changed\nand the headers needs to be written.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DefaultCsvFileWriterOptions\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:83\n                        \n                    \n\n            \n                \n                    The options for the file writer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :     async.AsyncQueue\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:109\n                        \n                    \n\n            \n                \n                    Write queue to sync on file writes.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(header: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:148\n                \n            \n\n\n            \n                \n                    Called on each metrics-report run to ensure the dir & file exist\nand the headers are written accordingly at the top of the file\nwith respect to the given options.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    header\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        mkdir\n                        \n                    \n                \n            \n            \n                \n                    \n                    mkdir(dir: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:239\n                \n            \n\n\n            \n                \n                    Wraps a mkdir command with old-fashion promise to keep compatibility to node js 6.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dir\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        stat\n                        \n                    \n                \n            \n            \n                \n                    \n                    stat(filename: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:259\n                \n            \n\n\n            \n                \n                    Wraps a stat command with old-fashion promise to keep compatibility to node js 6.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        write\n                        \n                    \n                \n            \n            \n                \n                    \n                    write(filename: string, data: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:214\n                \n            \n\n\n            \n                \n                    Wraps a write command with old-fashion promise to keep compatibility to node js 6.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        writeRow\n                        \n                    \n                \n            \n            \n                \n                    \n                    writeRow(metric: Metric | SerializableMetric, values: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:194\n                \n            \n\n\n            \n                \n                    Schedules a new write command for the given row fields.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n                                    \n                                            Metric | SerializableMetric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as async from 'async'\nimport { appendFile, mkdir, stat, Stats } from 'fs'\nimport { join } from 'path'\n\nimport { Metric, SerializableMetric } from 'inspector-metrics'\nimport { CsvFileWriter } from './CsvMetricReporter'\nimport moment = require('moment');\n\n/**\n * Options for standard implementation for a csv file writer.\n *\n * @export\n * @interface DefaultCsvFileWriterOptions\n */\nexport interface DefaultCsvFileWriterOptions {\n\n  /**\n   * Determines if the column headers should be written at the top of each file.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly writeHeaders?: boolean\n  /**\n   * Determines if the dir for the metrics reporting should be created if it doesn't exist.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly createDir?: boolean\n  /**\n   * The delimiter between the fields.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly delimiter?: string\n  /**\n   * The encoding of the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly encoding?: string\n  /**\n   * The line endings in the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly lineEnding?: string\n  /**\n   * An async function determining the filename of the metrics.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly filename?: () => Promise\n  /**\n   * An async function determining the directory of the metricsfile.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly dir?: () => Promise\n}\n\n/**\n * Standard implementation for a csv file writer.\n *\n * @export\n * @class DefaultCsvFileWriter\n * @implements {CsvFileWriter}\n */\nexport class DefaultCsvFileWriter implements CsvFileWriter {\n  /**\n   * The options for the file writer.\n   *\n   * @private\n   * @type {DefaultCsvFileWriterOptions}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly options: DefaultCsvFileWriterOptions;\n  /**\n   * Holds the current file name to check if the filename has changed\n   * and the headers needs to be written.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentFilename: string;\n  /**\n   * Holds the current dir to check if dir has changed\n   * and a new one needs to be created as well as the file in it.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentDir: string;\n  /**\n   * Write queue to sync on file writes.\n   *\n   * @private\n   * @type {async.AsyncQueue}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly queue: async.AsyncQueue;\n\n  /**\n   * Creates an instance of DefaultCsvFileWriter.\n   *\n   * @param {DefaultCsvFileWriterOptions} options\n   * @memberof DefaultCsvFileWriter\n   */\n  public constructor ({\n    filename = async () => `${moment().format('YYYYMMDDHH00')}_metrics.csv`,\n    dir = async () => './metrics',\n    writeHeaders = true,\n    createDir = true,\n    delimiter = ',',\n    encoding = 'utf8',\n    lineEnding = '\\n'\n  }: DefaultCsvFileWriterOptions) {\n    this.options = {\n      createDir,\n      delimiter,\n      dir,\n      encoding,\n      filename,\n      lineEnding,\n      writeHeaders\n    }\n    this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n      task(callback)\n    }, 1)\n  }\n\n  /**\n   * Called on each metrics-report run to ensure the dir & file exist\n   * and the headers are written accordingly at the top of the file\n   * with respect to the given options.\n   *\n   * @param {string[]} header\n   * @memberof DefaultCsvFileWriter\n   */\n  public async init (header: string[]): Promise {\n    const dir = await this.options.dir()\n    const filename = await this.options.filename()\n\n    if (filename !== this.currentFilename || dir !== this.currentDir) {\n      let createDir = false\n      if (this.options.createDir) {\n        try {\n          const stats = await this.stat(dir)\n          createDir = !stats.isDirectory()\n        } catch (err) {\n          createDir = true\n        }\n      }\n      if (createDir) {\n        await this.mkdir(dir)\n      }\n\n      let writeHeader = false\n      const normalizedFilename = join(dir, filename)\n      if (this.options.writeHeaders) {\n        try {\n          const stats = await this.stat(normalizedFilename)\n          writeHeader = stats.size === 0\n        } catch (err) {\n          writeHeader = true\n        }\n      }\n      if (writeHeader) {\n        await this.write(\n          normalizedFilename,\n          header.join(this.options.delimiter) + this.options.lineEnding\n        )\n      }\n    }\n    this.currentDir = dir\n    this.currentFilename = filename\n  }\n\n  /**\n   * Schedules a new write command for the given row fields.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {string[]} values\n   * @memberof DefaultCsvFileWriter\n   */\n  public async writeRow (metric: Metric | SerializableMetric, values: string[]): Promise {\n    const normalizedFilename = join(this.currentDir, this.currentFilename)\n    this.queue.push(async (callback: () => void) => {\n      await this.write(\n        normalizedFilename,\n        values.join(this.options.delimiter) + this.options.lineEnding\n      )\n      callback()\n    })\n  }\n\n  /**\n   * Wraps a write command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @param {string} data\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async write (filename: string, data: string): Promise {\n    return await new Promise((resolve, reject) => {\n      appendFile(\n        filename,\n        data,\n        this.options.encoding as any,\n        (err) => {\n          if (err) {\n            reject(err)\n            return\n          }\n          resolve()\n        }\n      )\n    })\n  }\n\n  /**\n   * Wraps a mkdir command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} dir\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async mkdir (dir: string): Promise {\n    return await new Promise((resolve, reject) => {\n      mkdir(dir, (err) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Wraps a stat command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async stat (filename: string): Promise {\n    return await new Promise((resolve, reject) => {\n      stat(filename, (err, stats) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(stats)\n      })\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DefaultCsvFileWriterOptions.html":{"url":"interfaces/DefaultCsvFileWriterOptions.html","title":"interface - DefaultCsvFileWriterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DefaultCsvFileWriterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for standard implementation for a csv file writer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            createDir\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            delimiter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dir\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            encoding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            filename\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineEnding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            writeHeaders\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createDir\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createDir:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Determines if the dir for the metrics reporting should be created if it doesn't exist.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delimiter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delimiter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The delimiter between the fields.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dir\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dir:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async function determining the directory of the metricsfile.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The encoding of the file.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async function determining the filename of the metrics.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineEnding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineEnding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The line endings in the file.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        writeHeaders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        writeHeaders:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Determines if the column headers should be written at the top of each file.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as async from 'async'\nimport { appendFile, mkdir, stat, Stats } from 'fs'\nimport { join } from 'path'\n\nimport { Metric, SerializableMetric } from 'inspector-metrics'\nimport { CsvFileWriter } from './CsvMetricReporter'\nimport moment = require('moment');\n\n/**\n * Options for standard implementation for a csv file writer.\n *\n * @export\n * @interface DefaultCsvFileWriterOptions\n */\nexport interface DefaultCsvFileWriterOptions {\n\n  /**\n   * Determines if the column headers should be written at the top of each file.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly writeHeaders?: boolean\n  /**\n   * Determines if the dir for the metrics reporting should be created if it doesn't exist.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly createDir?: boolean\n  /**\n   * The delimiter between the fields.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly delimiter?: string\n  /**\n   * The encoding of the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly encoding?: string\n  /**\n   * The line endings in the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly lineEnding?: string\n  /**\n   * An async function determining the filename of the metrics.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly filename?: () => Promise\n  /**\n   * An async function determining the directory of the metricsfile.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly dir?: () => Promise\n}\n\n/**\n * Standard implementation for a csv file writer.\n *\n * @export\n * @class DefaultCsvFileWriter\n * @implements {CsvFileWriter}\n */\nexport class DefaultCsvFileWriter implements CsvFileWriter {\n  /**\n   * The options for the file writer.\n   *\n   * @private\n   * @type {DefaultCsvFileWriterOptions}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly options: DefaultCsvFileWriterOptions;\n  /**\n   * Holds the current file name to check if the filename has changed\n   * and the headers needs to be written.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentFilename: string;\n  /**\n   * Holds the current dir to check if dir has changed\n   * and a new one needs to be created as well as the file in it.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentDir: string;\n  /**\n   * Write queue to sync on file writes.\n   *\n   * @private\n   * @type {async.AsyncQueue}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly queue: async.AsyncQueue;\n\n  /**\n   * Creates an instance of DefaultCsvFileWriter.\n   *\n   * @param {DefaultCsvFileWriterOptions} options\n   * @memberof DefaultCsvFileWriter\n   */\n  public constructor ({\n    filename = async () => `${moment().format('YYYYMMDDHH00')}_metrics.csv`,\n    dir = async () => './metrics',\n    writeHeaders = true,\n    createDir = true,\n    delimiter = ',',\n    encoding = 'utf8',\n    lineEnding = '\\n'\n  }: DefaultCsvFileWriterOptions) {\n    this.options = {\n      createDir,\n      delimiter,\n      dir,\n      encoding,\n      filename,\n      lineEnding,\n      writeHeaders\n    }\n    this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n      task(callback)\n    }, 1)\n  }\n\n  /**\n   * Called on each metrics-report run to ensure the dir & file exist\n   * and the headers are written accordingly at the top of the file\n   * with respect to the given options.\n   *\n   * @param {string[]} header\n   * @memberof DefaultCsvFileWriter\n   */\n  public async init (header: string[]): Promise {\n    const dir = await this.options.dir()\n    const filename = await this.options.filename()\n\n    if (filename !== this.currentFilename || dir !== this.currentDir) {\n      let createDir = false\n      if (this.options.createDir) {\n        try {\n          const stats = await this.stat(dir)\n          createDir = !stats.isDirectory()\n        } catch (err) {\n          createDir = true\n        }\n      }\n      if (createDir) {\n        await this.mkdir(dir)\n      }\n\n      let writeHeader = false\n      const normalizedFilename = join(dir, filename)\n      if (this.options.writeHeaders) {\n        try {\n          const stats = await this.stat(normalizedFilename)\n          writeHeader = stats.size === 0\n        } catch (err) {\n          writeHeader = true\n        }\n      }\n      if (writeHeader) {\n        await this.write(\n          normalizedFilename,\n          header.join(this.options.delimiter) + this.options.lineEnding\n        )\n      }\n    }\n    this.currentDir = dir\n    this.currentFilename = filename\n  }\n\n  /**\n   * Schedules a new write command for the given row fields.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {string[]} values\n   * @memberof DefaultCsvFileWriter\n   */\n  public async writeRow (metric: Metric | SerializableMetric, values: string[]): Promise {\n    const normalizedFilename = join(this.currentDir, this.currentFilename)\n    this.queue.push(async (callback: () => void) => {\n      await this.write(\n        normalizedFilename,\n        values.join(this.options.delimiter) + this.options.lineEnding\n      )\n      callback()\n    })\n  }\n\n  /**\n   * Wraps a write command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @param {string} data\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async write (filename: string, data: string): Promise {\n    return await new Promise((resolve, reject) => {\n      appendFile(\n        filename,\n        data,\n        this.options.encoding as any,\n        (err) => {\n          if (err) {\n            reject(err)\n            return\n          }\n          resolve()\n        }\n      )\n    })\n  }\n\n  /**\n   * Wraps a mkdir command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} dir\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async mkdir (dir: string): Promise {\n    return await new Promise((resolve, reject) => {\n      mkdir(dir, (err) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Wraps a stat command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async stat (filename: string): Promise {\n    return await new Promise((resolve, reject) => {\n      stat(filename, (err, stats) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(stats)\n      })\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultPrometheusClusterOptions.html":{"url":"classes/DefaultPrometheusClusterOptions.html","title":"class - DefaultPrometheusClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultPrometheusClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n        \n\n\n            \n                Description\n            \n            \n                Default configuration for clustering support for the PrometheusMetricReporter.\n\n            \n\n\n            \n                Implements\n            \n            \n                            PrometheusClusterOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventReceiver\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendMetricsToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                workerResponseTimeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getWorkers\n                            \n                            \n                                    Public\n                                    Async\n                                sendToMaster\n                            \n                            \n                                    Public\n                                    Async\n                                sendToWorker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:48\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:34\n                        \n                    \n\n            \n                \n                    Set to true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        eventReceiver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportMessageReceiver\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:41\n                        \n                    \n\n            \n                \n                    Set to cluster module.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sendMetricsToMaster\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : defaultCluster.isWorker\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:48\n                        \n                    \n\n            \n                \n                    True for forked processes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        workerResponseTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 500\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:27\n                        \n                    \n\n            \n                \n                    Sets the timeout in which a forked process can respond to metric report requests.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getWorkers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWorkers()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:80\n                \n            \n\n\n            \n                \n                    Returns the values of 'workers'.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendToMaster\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendToMaster(message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:95\n                \n            \n\n\n            \n                \n                    Uses 'process.send' to send messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendToWorker\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendToWorker(worker: Worker, message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:69\n                \n            \n\n\n            \n                \n                    Uses 'worker.send' to send the specified message to the specified worker.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    worker\n                                    \n                                            Worker\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport {\n  Worker\n} from 'cluster'\n\nimport { ReportMessageReceiver } from 'inspector-metrics'\nimport { PrometheusClusterOptions } from './PrometheusClusterOptions'\n\nconst defaultCluster = (cluster.default || cluster) as any\n\n/**\n * Default configuration for clustering support for the {@link PrometheusMetricReporter}.\n *\n * @export\n * @class DefaultPrometheusClusterOptions\n * @implements {PrometheusClusterOptions}\n */\nexport class DefaultPrometheusClusterOptions implements PrometheusClusterOptions {\n  /**\n   * Sets the timeout in which a forked process can respond to metric report requests.\n   *\n   * @type {number}\n   * @memberof DefaultPrometheusClusterOptions\n   */\n  public readonly workerResponseTimeout: number = 500;\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = defaultCluster.isWorker;\n\n  public constructor () {\n    if (defaultCluster.isWorker) {\n      this.eventReceiver = {\n        on: (\n          messageType: any,\n          callback: (worker: Worker, message: any, handle: any) => void) => {\n          process.on(messageType, (message) => callback(null, message, null))\n        }\n      }\n    } else {\n      this.eventReceiver = defaultCluster\n    }\n  }\n\n  /**\n   * Uses 'worker.send' to send the specified message to the specified worker.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public async sendToWorker (worker: Worker, message: any): Promise {\n    if (worker) {\n      worker.send(message)\n    }\n  }\n\n  /**\n   * Returns the values of 'workers'.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public async getWorkers (): Promise {\n    const workers: Worker[] = []\n    if (workers) {\n      for (const key of Object.keys(workers)) {\n        workers.push(workers[key as any])\n      }\n    }\n    return workers\n  }\n\n  /**\n   * Uses 'process.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public async sendToMaster (message: any): Promise {\n    process.send(message)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultReservoir.html":{"url":"classes/DefaultReservoir.html","title":"class - DefaultReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/reservoir.ts\n        \n\n\n            \n                Description\n            \n            \n                Simple implementation of a reservoir.\nIt has a maximum number of values, if the maximum\nis reached old values are replaced by new values.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Reservoir\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:66\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:66\n                        \n                    \n\n            \n                \n                    The capacity of this reservoir.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:58\n                        \n                    \n\n            \n                \n                    The values.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        size\n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:84\n                \n            \n\n\n            \n                \n                    Gets the actual number of value, but at max the specified maximum.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        snapshot\n                        \n                    \n                \n            \n            \n                \n                    \n                    snapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:113\n                \n            \n\n\n            \n                \n                    Creates a new snapshot instance.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:97\n                \n            \n\n\n            \n                \n                    Adds the value to the array of numbers until the maximum number of\nvalues is reached. If the maximum number of values is reached\nan old value at a random position is replaced with the specified value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n  /**\n   * Gets the capacity of this reservoir.\n   *\n   * @returns {number}\n   * @memberof Reservoir\n   */\n  size(): number;\n\n  /**\n   * Adds a value to the reservoir.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Reservoir\n   */\n  update(value: number): this;\n\n  /**\n   * Creates a new snapshot of this reservoir.\n   *\n   * @returns {Snapshot}\n   * @memberof Reservoir\n   */\n  snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n  /**\n   * The values.\n   *\n   * @private\n   * @type {number[]}\n   * @memberof DefaultReservoir\n   */\n  private values: number[] = [];\n  /**\n   * The capacity of this reservoir.\n   *\n   * @private\n   * @type {number}\n   * @memberof DefaultReservoir\n   */\n  private maxSize: number;\n\n  /**\n   * Creates an instance of DefaultReservoir.\n   *\n   * @param {number} maxSize\n   * @memberof DefaultReservoir\n   */\n  public constructor(maxSize: number) {\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Gets the actual number of value, but at max the specified maximum.\n   *\n   * @returns {number}\n   * @memberof DefaultReservoir\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Adds the value to the array of numbers until the maximum number of\n   * values is reached. If the maximum number of values is reached\n   * an old value at a random position is replaced with the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof DefaultReservoir\n   */\n  public update(value: number): this {\n    if (this.values.length \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisabledClusterOptions.html":{"url":"classes/DisabledClusterOptions.html","title":"class - DisabledClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisabledClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Disables clustering.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ClusterOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventReceiver\n                            \n                            \n                                    Public\n                                    Readonly\n                                getWorkers\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendMetricsToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToWorker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:171\n                        \n                    \n\n            \n                \n                    Set to false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        eventReceiver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportMessageReceiver\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:178\n                        \n                    \n\n            \n                \n                    Set to null.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        getWorkers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:184\n                        \n                    \n\n            \n                \n                    Set to null.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sendMetricsToMaster\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:191\n                        \n                    \n\n            \n                \n                    Set to false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sendToMaster\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:203\n                        \n                    \n\n            \n                \n                    Set to null.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sendToWorker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:197\n                        \n                    \n\n            \n                \n                    Set to null.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport {\n  Worker\n} from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\nconst defaultCluster = (cluster.default || cluster) as any\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = defaultCluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!defaultCluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => defaultCluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ElasticsearchMetricReporterOption.html":{"url":"interfaces/ElasticsearchMetricReporterOption.html","title":"interface - ElasticsearchMetricReporterOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ElasticsearchMetricReporterOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for ElasticsearchMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            indexnameDeterminator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            log\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metricDocumentBuilder\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            typeDeterminator\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientOptions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Elasticsearch client options.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        indexnameDeterminator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        indexnameDeterminator:         MetricInfoDeterminator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricInfoDeterminator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used to get the name of the index.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metricDocumentBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metricDocumentBuilder:         MetricDocumentBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricDocumentBuilder\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used to build the document for a metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typeDeterminator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        typeDeterminator:         MetricInfoDeterminator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricInfoDeterminator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used to get the type of the metric instance.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Client } from '@elastic/elasticsearch'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Tags,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Interface for getting a certain information using the specified metric metadata -\n * e.g. name of the index, metric type, etc.\n */\nexport type MetricInfoDeterminator =\n  (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => string;\n\n/**\n * Interface for building a document for a metric.\n */\nexport type MetricDocumentBuilder = (\n  registry: MetricRegistry,\n  metric: Metric,\n  type: MetricType,\n  date: Date,\n  tags: Tags) => {};\n\n/**\n * Options for {@link ElasticsearchMetricReporter}.\n *\n * @export\n * @interface ElasticsearchMetricReporterOption\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface ElasticsearchMetricReporterOption extends ScheduledMetricReporterOptions {\n  /**\n   * Elasticsearch client options.\n   *\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly clientOptions: {}\n  /**\n   * Logger instance used to report errors.\n   *\n   * @type {Logger}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  log?: Logger\n  /**\n   * Used to get the name of the index.\n   *\n   * @type {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly indexnameDeterminator?: MetricInfoDeterminator\n  /**\n   * Used to get the type of the metric instance.\n   *\n   * @type {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly typeDeterminator?: MetricInfoDeterminator\n  /**\n   * Used to build the document for a metric.\n   *\n   * @type {MetricDocumentBuilder}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly metricDocumentBuilder?: MetricDocumentBuilder\n}\n\n/**\n * A MetricReporter extension used to publish metric values to elasticsearch.\n *\n * @export\n * @class ElasticsearchMetricReporter\n * @extends {MetricReporter}\n */\nexport class ElasticsearchMetricReporter extends ScheduledMetricReporter> {\n  /**\n   * Returns a {@link MetricInfoDeterminator} that returns 'metric' as type.\n   *\n   * @static\n   * @returns {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static defaultTypeDeterminator (): MetricInfoDeterminator {\n    return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => 'metric'\n  }\n\n  /**\n   * Returns a {@link MetricInfoDeterminator} that returns an indexname like '-yyyy-mm-dd'.\n   *\n   * @static\n   * @param {string} baseName The\n   * @returns {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static dailyIndex (baseName: string): MetricInfoDeterminator {\n    return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => {\n      const day = date.getDate()\n      const dayPrefix: string = (day >= 10) ? '' : '0'\n      const month = date.getMonth() + 1\n      const monthPrefix: string = (month >= 10) ? '' : '0'\n      return `${baseName}-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`\n    }\n  }\n\n  /**\n   * Returns a {@link MetricDocumentBuilder} that builds an object for a metric like this:\n   *\n   * {\n   *\n   *  name: ..., // name of metric\n   *\n   *  group: ..., // group of metric\n   *\n   *  timestamp: ..., // timestamp from parameter\n   *\n   *  tags: ..., // combined tags from this reporter and the metric\n   *\n   *  values..., // metric specific values\n   *\n   *  type..., // metric type\n   *\n   * }\n   *\n   * @static\n   * @returns {MetricDocumentBuilder}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static defaultDocumentBuilder (): MetricDocumentBuilder {\n    return (\n      registry: MetricRegistry,\n      metric: Metric,\n      type: MetricType,\n      timestamp: Date,\n      tags: Tags) => {\n      let values = null\n\n      if (metric instanceof MonotoneCounter) {\n        values = ElasticsearchMetricReporter.getMonotoneCounterValues(metric)\n      } else if (metric instanceof Counter) {\n        values = ElasticsearchMetricReporter.getCounterValues(metric)\n      } else if (metric instanceof Histogram) {\n        values = ElasticsearchMetricReporter.getHistogramValues(metric)\n      } else if (metric instanceof Meter) {\n        values = ElasticsearchMetricReporter.getMeterValues(metric)\n      } else if (metric instanceof Timer) {\n        values = ElasticsearchMetricReporter.getTimerValues(metric)\n      } else {\n        values = ElasticsearchMetricReporter.getGaugeValue(metric as Gauge)\n      }\n\n      if (values === null) {\n        return null\n      }\n\n      const name = metric.getName()\n      const group = metric.getGroup()\n      return { name, group, tags, timestamp, values, type }\n    }\n  }\n\n  /**\n   * Gets the values for the specified monotone counter metric.\n   *\n   * @static\n   * @param {MonotoneCounter} counter\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getMonotoneCounterValues (counter: MonotoneCounter): {} {\n    const count = counter.getCount()\n    if (!count || isNaN(count)) {\n      return null\n    }\n    return { count }\n  }\n\n  /**\n   * Gets the values for the specified counter metric.\n   *\n   * @static\n   * @param {Counter} counter\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getCounterValues (counter: Counter): {} {\n    const count = counter.getCount()\n    if (!count || isNaN(count)) {\n      return null\n    }\n    return { count }\n  }\n\n  /**\n   * Gets the values for the specified {Gauge} metric.\n   *\n   * @static\n   * @param {Gauge} gauge\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getGaugeValue (gauge: Gauge): {} {\n    const value = gauge.getValue()\n    if ((!value && value !== 0) || Number.isNaN(value)) {\n      return null\n    }\n    if (typeof value === 'object') {\n      return value\n    }\n    return { value }\n  }\n\n  /**\n   * Gets the values for the specified {Histogram} metric.\n   *\n   * @static\n   * @param {Histogram} histogram\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getHistogramValues (histogram: Histogram): {} {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const values: any = {}\n\n    values.count = value\n    values.max = this.getNumber(snapshot.getMax())\n    values.mean = this.getNumber(snapshot.getMean())\n    values.min = this.getNumber(snapshot.getMin())\n    values.p50 = this.getNumber(snapshot.getMedian())\n    values.p75 = this.getNumber(snapshot.get75thPercentile())\n    values.p95 = this.getNumber(snapshot.get95thPercentile())\n    values.p98 = this.getNumber(snapshot.get98thPercentile())\n    values.p99 = this.getNumber(snapshot.get99thPercentile())\n    values.p999 = this.getNumber(snapshot.get999thPercentile())\n    values.stddev = this.getNumber(snapshot.getStdDev())\n\n    return values\n  }\n\n  /**\n   * Gets the values for the specified {Meter} metric.\n   *\n   * @static\n   * @param {Meter} meter\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getMeterValues (meter: Meter): {} {\n    const value = meter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const values: any = {}\n\n    values.count = value\n    values.m15_rate = this.getNumber(meter.get15MinuteRate())\n    values.m1_rate = this.getNumber(meter.get1MinuteRate())\n    values.m5_rate = this.getNumber(meter.get5MinuteRate())\n    values.mean_rate = this.getNumber(meter.getMeanRate())\n\n    return values\n  }\n\n  /**\n   * Gets the values for the specified {Timer} metric.\n   *\n   * @static\n   * @param {Timer} timer\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getTimerValues (timer: Timer): {} {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const values: any = {}\n\n    values.count = value\n    values.m15_rate = this.getNumber(timer.get15MinuteRate())\n    values.m1_rate = this.getNumber(timer.get1MinuteRate())\n    values.m5_rate = this.getNumber(timer.get5MinuteRate())\n    values.max = this.getNumber(snapshot.getMax())\n    values.mean = this.getNumber(snapshot.getMean())\n    values.mean_rate = this.getNumber(timer.getMeanRate())\n    values.min = this.getNumber(snapshot.getMin())\n    values.p50 = this.getNumber(snapshot.getMedian())\n    values.p75 = this.getNumber(snapshot.get75thPercentile())\n    values.p95 = this.getNumber(snapshot.get95thPercentile())\n    values.p98 = this.getNumber(snapshot.get98thPercentile())\n    values.p99 = this.getNumber(snapshot.get99thPercentile())\n    values.p999 = this.getNumber(snapshot.get999thPercentile())\n    values.stddev = this.getNumber(snapshot.getStdDev())\n\n    return values\n  }\n\n  /**\n   * Either gets 0 or the specified value.\n   *\n   * @private\n   * @param {number} value\n   * @returns {number}\n   * @memberof ElasticsearchMetricReporter\n   */\n  private static getNumber (value: number): number {\n    if (isNaN(value)) {\n      return 0\n    }\n    return value\n  }\n\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof ElasticsearchMetricReporter\n   */\n  private readonly logMetadata: any;\n  /**\n   * Elasticsearch client used to do reporting.\n   *\n   * @private\n   * @type {Client}\n   * @memberof ElasticsearchMetricReporter\n   */\n  private readonly client: Client;\n\n  /**\n   * Creates an instance of ElasticsearchMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   */\n  public constructor (\n    {\n      clientOptions,\n      metricDocumentBuilder = ElasticsearchMetricReporter.defaultDocumentBuilder(),\n      indexnameDeterminator = ElasticsearchMetricReporter.dailyIndex('metric'),\n      typeDeterminator = ElasticsearchMetricReporter.defaultTypeDeterminator(),\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions()\n    }: ElasticsearchMetricReporterOption,\n    reporterType?: string) {\n    super({\n      clientOptions,\n      clock,\n      clusterOptions,\n      indexnameDeterminator,\n      log,\n      metricDocumentBuilder,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tags,\n      typeDeterminator,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n\n    this.client = new Client(clientOptions)\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {Logger} log\n   * @memberof ElasticsearchMetricReporter\n   */\n  public setLog (log: Logger): void {\n    this.options.log = log\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      await this.handleResults(null, null, event.getTime(), 'gauge', [{\n        metric: event,\n        result\n      }])\n    }\n\n    return event\n  }\n\n  /**\n   * Does nothing\n   *\n   * @returns {Promise}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Send the combinations of index and document to the elasticsearch cluster\n   * using the bulk method of the elasticsearch client.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const body = results\n      .map((result) => result.result)\n      .reduce((p, c) => p.concat(c), [])\n\n    if (!body || body.length === 0) {\n      return await Promise.resolve()\n    }\n\n    try {\n      const response = await this.client.bulk({ body })\n      if (this.options.log) {\n        const warnings = response.warnings\n        this.options.log.debug(\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          `wrote ${type} metrics - warnings ${warnings}`,\n          this.logMetadata\n        )\n      }\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing ${type} metrics - reason: ${message}`, reason, this.logMetadata)\n      }\n    }\n  }\n\n  /**\n   * Generalized reporting method of all types of metric instances.\n   * Builds the index configuration document and the metric document.\n   *\n   * @protected\n   * @param {Metric} metric\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportMetric (\n    metric: Metric, ctx: MetricSetReportContext): Array {\n    const document = this.options.metricDocumentBuilder(\n      ctx.registry, metric, ctx.type, ctx.date, this.buildTags(ctx.registry, metric))\n    if (document) {\n      const _index = this.options.indexnameDeterminator(ctx.registry, metric, ctx.type, ctx.date)\n      const _type = this.options.typeDeterminator(ctx.registry, metric, ctx.type, ctx.date)\n      return [\n        { index: { _index, _type } },\n        document\n      ]\n    }\n    return []\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(counter, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Array {\n    return this.reportMetric(gauge, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(histogram, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(meter, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(timer, ctx)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExponentiallyWeightedMovingAverage.html":{"url":"classes/ExponentiallyWeightedMovingAverage.html","title":"class - ExponentiallyWeightedMovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExponentiallyWeightedMovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/moving-average.ts\n        \n\n\n            \n                Description\n            \n            \n                Calculates the moving average with an exponential alpha value.\n\n            \n\n\n            \n                Implements\n            \n            \n                            MovingAverage\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alpha\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Private\n                                avg\n                            \n                            \n                                    Private\n                                interval\n                            \n                            \n                                    Private\n                                sum\n                            \n                            \n                                    Private\n                                timeUnitInNanoseconds\n                            \n                            \n                                    Private\n                                unit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAlpha\n                            \n                            \n                                    Public\n                                getAverage\n                            \n                            \n                                    Public\n                                getUnit\n                            \n                            \n                                    Public\n                                tick\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(alpha: number, interval: number, unit: TimeUnit)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:113\n                            \n                        \n\n                \n                    \n                            Creates an instance of ExponentiallyWeightedMovingAverage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alpha\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interval\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unit\n                                                  \n                                                        \n                                                                        TimeUnit\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        alpha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:73\n                        \n                    \n\n            \n                \n                    Alpha component (weight) of the moving average.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1 - Math.exp(-(1 / 60))\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1 - Math.exp(-(5 / 60))\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1 - Math.exp(-(1 / (60 * 15)))\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1 - Math.exp(-(5 / (60 * 15)))\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1 - Math.exp(-(1 / (60 * 5)))\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1 - Math.exp(-(5 / (60 * 5)))\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        avg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1.0\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:97\n                        \n                    \n\n            \n                \n                    The current average.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:81\n                        \n                    \n\n            \n                \n                    The sampling interval.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:89\n                        \n                    \n\n            \n                \n                    The sum of all values passed to the update function.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timeUnitInNanoseconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:105\n                        \n                    \n\n            \n                \n                    Multiplier of the time unit specified in the constructor in nanoseconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TimeUnit\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:113\n                        \n                    \n\n            \n                \n                    The time unit of the sampling rate.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAlpha\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAlpha()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:136\n                \n            \n\n\n            \n                \n                    Gets the alpha value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAverage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAverage(unit: TimeUnit)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:157\n                \n            \n\n\n            \n                \n                    Gets the average in the specified time unit.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                TimeUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getUnit\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnit()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:146\n                \n            \n\n\n            \n                \n                    Gets the time unit.\n\n\n                    \n                    \n                    \n                        Returns :         TimeUnit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        tick\n                        \n                    \n                \n            \n            \n                \n                    \n                    tick()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:187\n                \n            \n\n\n            \n                \n                    Updates the current average by multiplying the alpha value with the difference\nof the last average and the current average.\nAverages are calculated by dividing the sum through the sampling interval.\nIf the alpha value is high the last average has more weight and vice versa.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:171\n                \n            \n\n\n            \n                \n                    Adds the value to the current sum.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAlpha(): number;\n\n  /**\n   * Gets the average for the specified time unit -\n   * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAverage(unit: TimeUnit): number;\n\n  /**\n   * Adds the given value to the logic of the implementation.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  update(value: number): this;\n\n  /**\n   * Triggers the actual average to be updated.\n   * A tick represents an update event.\n   *\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  tick(): this;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n  public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n  public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n  public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n  public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n  public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n  public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n  /**\n   * Alpha component (weight) of the moving average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private alpha: number;\n  /**\n   * The sampling interval.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private interval: number;\n  /**\n   * The sum of all values passed to the update function.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private sum: number = 0;\n  /**\n   * The current average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private avg: number = -1.0;\n  /**\n   * Multiplier of the time unit specified in the constructor in nanoseconds.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private timeUnitInNanoseconds: number;\n  /**\n   * The time unit of the sampling rate.\n   *\n   * @private\n   * @type {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private unit: TimeUnit;\n\n  /**\n   * Creates an instance of ExponentiallyWeightedMovingAverage.\n   *\n   * @param {number} alpha\n   * @param {number} interval\n   * @param {TimeUnit} unit\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public constructor(alpha: number, interval: number, unit: TimeUnit) {\n    this.alpha = alpha;\n    this.interval = interval;\n    this.unit = unit;\n    this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n  }\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAlpha(): number {\n    return this.alpha;\n  }\n\n  /**\n   * Gets the time unit.\n   *\n   * @returns {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getUnit(): TimeUnit {\n    return this.unit;\n  }\n\n  /**\n   * Gets the average in the specified time unit.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAverage(unit: TimeUnit): number {\n    if (this.avg === -1.0) {\n      return 0;\n    }\n    return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n  }\n\n  /**\n   * Adds the value to the current sum.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public update(value: number): this {\n    this.sum += value;\n    return this;\n  }\n\n  /**\n   * Updates the current average by multiplying the alpha value with the difference\n   * of the last average and the current average.\n   *\n   * Averages are calculated by dividing the sum through the sampling interval.\n   *\n   * If the alpha value is high the last average has more weight and vice versa.\n   *\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public tick(): this {\n    const sum = this.sum;\n    const avg = sum / this.interval;\n    this.sum -= sum;\n\n    if (this.avg === -1.0) {\n      this.avg = avg;\n    } else {\n      this.avg += this.alpha * (avg - this.avg);\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fields.html":{"url":"interfaces/Fields.html","title":"interface - Fields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for Fields.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [field: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-csv/lib/metrics/CsvMetricReporter.ts:58\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  Histogram,\n  InterprocessReportMessage,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  SerializableMetric,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport * as moment from 'moment-timezone'\n\n/**\n * Lists all possible column types.\n */\nexport type ColumnType = 'date' | 'name' | 'field' | 'group' | 'description' | 'value' | 'tags' | 'type' | 'metadata';\n\n/**\n * Shortcut type for a row.\n */\nexport type Row = string[];\n\n/**\n * Shortcut type for many rows.\n */\nexport type Rows = Row[];\n\n/**\n * Type for a tag or metadata filter.\n */\nexport type Filter = (metric: Metric, key: string, value: string) => Promise;\n\n/**\n * Helper interface for Fields.\n *\n * @interface Fields\n */\ninterface Fields {\n  [field: string]: string\n}\n\n/**\n * Tags and metadata can be exported in one row or in separate rows.\n *\n * @export\n * @enum {number}\n */\nexport enum ExportMode {\n  ALL_IN_ONE_COLUMN,\n  EACH_IN_OWN_COLUMN,\n}\n\n/**\n * Delegation interface for writing the actual value to a file.\n *\n * @export\n * @interface CsvFileWriter\n */\nexport interface CsvFileWriter {\n\n  /**\n   * Called on every metrics-report run one time - behavior is implementation specific.\n   *\n   * @param {Row} header\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  init(header: Row): Promise\n\n  /**\n   * Called for each field of each metric and after init finished - behavior is implementation specific.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {Row} values\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  writeRow(metric: Metric | SerializableMetric, values: Row): Promise\n}\n\n/**\n * Options for {@link CsvMetricReporter}.\n *\n * @export\n * @interface CsvMetricReporterOptions\n */\nexport interface CsvMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The writer used to store the rows.\n   *\n   * @type {CsvFileWriter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly writer?: CsvFileWriter\n  /**\n   * Indicates that single quotes are used instead of double quotes.\n   *\n   * @type {boolean}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly useSingleQuotes?: boolean\n  /**\n   * ExportMode for tags.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagExportMode?: ExportMode\n  /**\n   * ExportMode for metadata.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataExportMode?: ExportMode\n  /**\n   * Prefix for tag columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagColumnPrefix?: string\n  /**\n   * Delimiter between the tags if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagDelimiter?: string\n  /**\n   * Prefix for metadata columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataColumnPrefix?: string\n  /**\n   * Delimiter between the metadata if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataDelimiter?: string\n  /**\n   * The columns to export.\n   *\n   * @type {ColumnType[]}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly columns?: ColumnType[]\n  /**\n   * The format for the date column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly dateFormat?: string\n  /**\n   * The timezone used to determine the date.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly timezone?: string\n  /**\n   * An async filter function used to filter out unwanted tags.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagFilter?: Filter\n  /**\n   * An async filter function used to filter out unwanted metadata.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataFilter?: Filter\n}\n\n/**\n * Metric reporter for csv files.\n *\n * @export\n * @class CsvMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CsvMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Header row.\n   *\n   * @private\n   * @type {Row}\n   * @memberof CsvMetricReporter\n   */\n  private header: Row;\n  /**\n   * All metadata names\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly metadataNames: string[] = [];\n  /**\n   * All tags names.\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly tagsNames: string[] = [];\n\n  /**\n   * Creates an instance of CsvMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CsvMetricReporter\n   */\n  public constructor ({\n    writer,\n    useSingleQuotes = false,\n    tagExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    metadataExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    tagColumnPrefix = 'tag_',\n    tagDelimiter = ';',\n    metadataColumnPrefix = 'meta_',\n    metadataDelimiter = ';',\n    columns = [],\n    dateFormat = 'YYYYMMDDHHmmss.SSSZ',\n    timezone = 'UTC',\n    tagFilter = async () => true,\n    metadataFilter = async () => true,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CsvMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      columns,\n      dateFormat,\n      metadataColumnPrefix,\n      metadataDelimiter,\n      metadataExportMode,\n      metadataFilter,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tagColumnPrefix,\n      tagDelimiter,\n      tagExportMode,\n      tagFilter,\n      tags,\n      timezone,\n      unit,\n      useSingleQuotes,\n      writer\n    }, reporterType)\n  }\n\n  /**\n   * Builds all headers and starts scheduling reporting runs.\n   * When call this method all metadata and tags in each metric\n   * in the application need to be set / known, otherwise it cannot be\n   * reported.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async start (): Promise {\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      // rebuild header on every call to start\n      this.header = await this.buildHeaders()\n      // only call init on master process\n      if (this.shouldCallInit()) {\n        await this.options.writer.init(this.header)\n      }\n      await super.start()\n    }\n    return this\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!this.header) {\n      this.header = await this.buildHeaders()\n    }\n\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      if (this.options.clusterOptions &&\n        this.options.clusterOptions.enabled &&\n        this.options.clusterOptions.sendMetricsToMaster) {\n        const message: InterprocessReportMessage = {\n          ctx: {},\n          date: event.getTime(),\n          metrics: {\n            counters: [],\n            gauges: [{\n              metric: event,\n              result\n            }],\n            histograms: [],\n            meters: [],\n            monotoneCounters: [],\n            timers: []\n          },\n          tags: this.buildTags(null, null),\n          targetReporterType: this.reporterType,\n          type: CsvMetricReporter.MESSAGE_TYPE\n        }\n        await this.options.clusterOptions.sendToMaster(message)\n      } else {\n        await this.options.writer.init(this.header)\n        await this.handleResults(null, null, event.getTime(), 'gauge', [{\n          metric: event,\n          result\n        }])\n      }\n    }\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Indicates if the init method of the writer instance should be called.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof CsvMetricReporter\n   */\n  protected shouldCallInit (): boolean {\n    return !this.options.clusterOptions ||\n      !this.options.clusterOptions.enabled ||\n      (this.options.clusterOptions.enabled && !this.options.clusterOptions.sendMetricsToMaster)\n  }\n\n  /**\n   * Makes sure the csv headers are built, written to the file to then\n   * call the parent class's implementation of this method.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof CsvMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n    if (this.canHandleMessage(message)) {\n      if (!this.header) {\n        this.header = await this.buildHeaders()\n      }\n      await this.options.writer.init(this.header)\n      await super.handleReportMessage(worker, message, handle)\n    }\n  }\n\n  /**\n   * Calls the init method of the writer instance if\n   * the metrics are not send to the master process\n   * (so probably only called by master-process if clustering is enabled).\n   *\n   * @protected\n   * @memberof CsvMetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    if (this.shouldCallInit()) {\n      await this.options.writer.init(this.header)\n    }\n  }\n\n  /**\n   * Writes the reporting results to the writer instance.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof CsvMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const dateStr = moment.tz(date, this.options.timezone).format(this.options.dateFormat)\n    for (const result of results) {\n      const fields = result.result\n      const metric = result.metric\n      if (fields) {\n        const rows: Rows = []\n        for (const field of Object.keys(fields)) {\n          const row = this.buildRow(registry, dateStr, metric, type, field, fields[field])\n          rows.push(row)\n        }\n        if (rows.length > 0) {\n          await this.writeRows(metric, rows, type)\n        }\n      }\n    }\n  }\n\n  /**\n   * Gathers the fields for a counter metric.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${counter.getCount()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a gauge metric.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Fields {\n    return {\n      value: `${gauge.getValue()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a histogram metric.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Fields {\n    const snapshot = histogram.getSnapshot()\n    const bucketFields: Fields = {}\n    histogram\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(histogram.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${this.getNumber(histogram.getCount())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: histogram.getSum().toString()\n    }\n  }\n\n  /**\n   * Gathers the fields for a meter metric.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${this.getNumber(meter.getCount())}`,\n      m15_rate: `${this.getNumber(meter.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(meter.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(meter.get5MinuteRate())}`,\n      mean_rate: `${this.getNumber(meter.getMeanRate())}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a timer metric.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Fields {\n    const snapshot = timer.getSnapshot()\n    const bucketFields: Fields = {}\n    timer\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(timer.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${timer.getCount() || 0}`,\n      m15_rate: `${this.getNumber(timer.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(timer.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(timer.get5MinuteRate())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      mean_rate: `${this.getNumber(timer.getMeanRate())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: timer.getSum().toString()\n    }\n  }\n\n  /**\n   * Builds a row / string array with all headers. Also updated the internal data of the reporter.\n   *\n   * @private\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  private async buildHeaders (): Promise {\n    const headers: Row = []\n\n    for (const columnType of this.options.columns) {\n      if (columnType === 'metadata' && this.options.metadataExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const metadataNames = this.getAllMetadataKeys()\n        const filteredNames = await this.filterKeys(metadataNames, this.options.metadataFilter)\n        filteredNames.forEach((metadataName) => {\n          headers.push(`${this.options.metadataColumnPrefix}${metadataName}`)\n          this.metadataNames.push(metadataName)\n        })\n      } else if (columnType === 'tags' && this.options.tagExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const tagNames = this.getAllTagKeys()\n        const filteredTags = await this.filterKeys(tagNames, this.options.tagFilter)\n        filteredTags.forEach((tag) => {\n          headers.push(`${this.options.tagColumnPrefix}${tag}`)\n          this.tagsNames.push(tag)\n        })\n      } else {\n        headers.push(columnType)\n      }\n    }\n\n    return headers\n  }\n\n  /**\n   * Filters the given set of strings using the given filter and returns the filtered set.\n   *\n   * @private\n   * @param {Set} keys\n   * @param {Filter} filter\n   * @returns {Promise>}\n   * @memberof CsvMetricReporter\n   */\n  private async filterKeys (keys: Set, filter: Filter): Promise> {\n    const filteredKeys = new Set()\n    const tasks: Array> = []\n    keys.forEach((key) => {\n      tasks.push((async () => {\n        if (!filter || await filter(null, key, null)) {\n          filteredKeys.add(key)\n        }\n      })())\n    })\n    await Promise.all(tasks)\n    return filteredKeys\n  }\n\n  /**\n   * Gets all metadata keys - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllMetadataKeys (): Set {\n    const metadataNames = new Set()\n    this.metricRegistries\n      .map((registry) => registry.getMetricList())\n      .map((metrics) => metrics.map((metric) => metric.getMetadataMap()))\n      .forEach((metadataMapArray) => {\n        metadataMapArray.forEach((metadataMap) => {\n          for (const metadataName of metadataMap.keys()) {\n            metadataNames.add(metadataName)\n          }\n        })\n      })\n    return metadataNames\n  }\n\n  /**\n   * Gets all tag names - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllTagKeys (): Set {\n    const tags = new Set()\n    this.options.tags.forEach((value, tag) => tags.add(tag))\n    this.metricRegistries\n      .map((registry) => ({\n        metrics: registry.getMetricList(),\n        registry\n      }))\n      .map((result) => result.metrics.map((metric) => this.buildTags(result.registry, metric)))\n      .forEach((metricTagsArray) => {\n        metricTagsArray.forEach((metricTags) => {\n          Object.keys(metricTags).forEach((tag) => tags.add(tag))\n        })\n      })\n    return tags\n  }\n\n  /**\n   * Builds the row of a single metric.\n   *\n   * @private\n   * @template T\n   * @param {MetricRegistry | null} registry\n   * @param {string} dateStr\n   * @param {T} metric\n   * @param {MetricType} type\n   * @param {string} field\n   * @param {string} value\n   * @returns {Row}\n   * @memberof CsvMetricReporter\n   */\n  private buildRow(\n    registry: MetricRegistry | null,\n    dateStr: string,\n    metric: T,\n    type: MetricType,\n    field: string,\n    value: string): Row {\n    const quote = this.options.useSingleQuotes ? \"'\" : '\"'\n    const row: Row = []\n    const tags = this.buildTags(registry, metric)\n\n    let metadataStr = ''\n    if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      const metadata: Metadata = getMetricMetadata(metric)\n      Object.keys(metadata).forEach((metadataName) => {\n        const metadataValue = metadata[metadataName]\n        metadataStr += `${metadataName}=${quote}${metadataValue}${quote}${this.options.metadataDelimiter}`\n      })\n      metadataStr = metadataStr.slice(0, -1)\n    }\n\n    let tagStr = ''\n    if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      tagStr = Object.keys(tags)\n        .map((tag) => `${tag}=${quote}${tags[tag]}${quote}`)\n        .join(this.options.tagDelimiter)\n    }\n\n    for (const columnType of this.options.columns) {\n      let tmpStr = ''\n      switch (columnType) {\n        case 'date':\n          row.push(dateStr)\n          break\n        case 'description':\n          tmpStr = encodeURIComponent(getMetricDescription(metric) || '')\n          if (quote === \"'\") {\n            tmpStr = tmpStr.replace(/'/g, \"\\\\'\")\n          }\n          row.push(`${quote}${tmpStr}${quote}`)\n          break\n        case 'field':\n          row.push(`${quote}${field || ''}${quote}`)\n          break\n        case 'group':\n          row.push(`${quote}${getMetricGroup(metric) || ''}${quote}`)\n          break\n        case 'metadata':\n          if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(metadataStr)\n          } else {\n            const metadata: Metadata = getMetricMetadata(metric)\n            for (const metadataName of this.metadataNames) {\n              row.push(`${quote}${metadata[metadataName] || ''}${quote}`)\n            }\n          }\n          break\n        case 'name':\n          row.push(`${quote}${getMetricName(metric) || ''}${quote}`)\n          break\n        case 'tags':\n          if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(tagStr)\n          } else {\n            for (const tag of this.tagsNames) {\n              row.push(`${quote}${tags[tag] || ''}${quote}`)\n            }\n          }\n          break\n        case 'type':\n          row.push(`${quote}${type || ''}${quote}`)\n          break\n        case 'value':\n          row.push(value || '')\n          break\n        default:\n      }\n    }\n\n    return row\n  }\n\n  /**\n   * Writes the rows by calling the corresponding {@link CsvFileWriter}.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {Rows} rows\n   * @param {MetricType} type\n   * @memberof CsvMetricReporter\n   */\n  private async writeRows(\n    metric: T,\n    rows: Rows,\n    type: MetricType\n  ): Promise {\n    for (const row of rows) {\n      await this.options.writer.writeRow(metric, row)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Gauge.html":{"url":"interfaces/Gauge.html","title":"interface - Gauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Gauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/gauge.ts\n        \n\n\n            \n                Description\n            \n            \n                A gauge can represent any value - regardless of the type.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getValue\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getValue\n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:22\n                \n            \n\n\n            \n                \n                    Gets the current value of the gauge.\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { BaseMetric, Metric, SerializableMetric } from './model/metric'\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @extends {SerializableMetric}\n * @template T\n */\nexport interface Gauge extends Metric, SerializableMetric {\n\n  /**\n   * Gets the current value of the gauge.\n   *\n   * @returns {T}\n   * @memberof Gauge\n   */\n  getValue(): T\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n  /**\n   * The value - initially set to 0.\n   *\n   * @private\n   * @type {number}\n   * @memberof SimpleGauge\n   */\n  private value: number = 0\n\n  /**\n   * Creates an instance of SimpleGauge with an optional name.\n   *\n   * @param {string} [name] optional metric name.\n   * @param {string} [description] optional metric description.\n   * @memberof SimpleGauge\n   */\n  public constructor (name?: string, description?: string) {\n    super()\n    this.name = name\n    this.description = description\n  }\n\n  /**\n   * Gets the current value.\n   *\n   * @returns {number}\n   * @memberof SimpleGauge\n   */\n  public getValue (): number {\n    return this.value\n  }\n\n  /**\n   * Sets the current value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof SimpleGauge\n   */\n  public setValue (value: number): this {\n    this.value = value\n    return this\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SimpleGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.value\n    return json\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Groupable.html":{"url":"interfaces/Groupable.html","title":"interface - Groupable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Groupable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/groupable.ts\n        \n\n\n            \n                Description\n            \n            \n                Name-based (string) grouping interface - the group as metadata\nof a metric is used in some metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getGroup\n                                    \n                                \n                                \n                                    \n                                        setGroup\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getGroup\n                        \n                    \n                \n            \n            \n                \ngetGroup()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/groupable.ts:18\n                \n            \n\n\n            \n                \n                    Gets the group name.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGroup\n                        \n                    \n                \n            \n            \n                \nsetGroup(group: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/groupable.ts:27\n                \n            \n\n\n            \n                \n                    Sets the group name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new group name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Name-based (string) grouping interface - the group as metadata\n * of a metric is used in some metric-reporter.\n *\n * @export\n * @interface Groupable\n */\nexport interface Groupable {\n\n  /**\n   * Gets the group name.\n   *\n   * @returns {string}\n   * @memberof Groupable\n   */\n  getGroup(): string;\n\n  /**\n   * Sets the group name.\n   *\n   * @param {string} group the new group name\n   * @returns {this}\n   * @memberof Groupable\n   */\n  setGroup(group: string): this;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HdrSnapshot.html":{"url":"classes/HdrSnapshot.html","title":"class - HdrSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HdrSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n        \n\n\n            \n                Description\n            \n            \n                Snapshot implementation for a HdrHistogram reference.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Snapshot\n                            SerializedSnapshot\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    values\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(reference: any)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of HdrSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reference\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get75thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get75thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:42\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 75th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get95thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get95thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:53\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 95th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get98thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get98thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:64\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 98th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get999thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get999thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:75\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99.9th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get99thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get99thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:86\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMax\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMax()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:108\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the max value - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMean\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMean()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:160\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the mean value - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMedian\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedian()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:97\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 50th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMin\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMin()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:119\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the min value - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStdDev\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStdDev()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:171\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the standard deviation - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue(quantile: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:182\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the given percentile.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quantile\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getValues\n                        \n                    \n                \n            \n            \n                \n                    \n                    getValues()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:139\n                \n            \n\n\n            \n                \n                    Always returns an empty array.\n\n\n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        size\n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:149\n                \n            \n\n\n            \n                \n                    Returns the count of all values recorded.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        values\n                    \n                \n\n                \n                    \n                        getvalues()\n                    \n                \n                            \n                                \n                                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:129\n                                \n                            \n                    \n                        \n                                Always returns an empty array.\n\n\n                                \n                                \n                                \n                                    Returns :     number[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Histogram } from './histogram'\nimport { BucketCounting, Buckets, Counting } from './model/counting'\nimport { Metric } from './model/metric'\nimport { Sampling } from './model/sampling'\nimport { SerializedSnapshot, Snapshot } from './model/snapshot'\nimport { Summarizing } from './model/summarizing'\n\n/**\n * The 'native-hdr-histogram' module (optional).\n */\nlet NativeHistogram: any = null\ntry {\n  NativeHistogram = require('native-hdr-histogram')\n} catch (e) {\n}\n\n/**\n * Snapshot implementation for a {@link HdrHistogram} reference.\n *\n * @export\n * @class HdrSnapshot\n * @implements {Snapshot}\n */\nexport class HdrSnapshot implements Snapshot, SerializedSnapshot {\n  /**\n   * Creates an instance of HdrSnapshot.\n   * @param {*} reference\n   * @memberof HdrSnapshot\n   */\n  public constructor (private readonly reference: any) {\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 75th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get75thPercentile (): number {\n    return this.reference.histogram.percentile(75)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 95th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get95thPercentile (): number {\n    return this.reference.histogram.percentile(95)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 98th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get98thPercentile (): number {\n    return this.reference.histogram.percentile(98)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 99.9th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get999thPercentile (): number {\n    return this.reference.histogram.percentile(99.9)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 99th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get99thPercentile (): number {\n    return this.reference.histogram.percentile(99)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 50th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMedian (): number {\n    return this.reference.histogram.percentile(50)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the max value - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMax (): number {\n    return this.reference.histogram.max() || 0\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the min value - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMin (): number {\n    return this.reference.histogram.min() || 0\n  }\n\n  /**\n   * Always returns an empty array.\n   *\n   * @returns {number[]}\n   * @memberof HdrSnapshot\n   */\n  public get values (): number[] {\n    return []\n  }\n\n  /**\n   * Always returns an empty array.\n   *\n   * @returns {number[]}\n   * @memberof HdrSnapshot\n   */\n  public getValues (): number[] {\n    return []\n  }\n\n  /**\n   * Returns the count of all values recorded.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public size (): number {\n    return this.reference.getCount()\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the mean value - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMean (): number {\n    return this.reference.histogram.mean() || 0\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the standard deviation - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getStdDev (): number {\n    return this.reference.histogram.stddev() || 0\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the given percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getValue (quantile: number): number {\n    return this.reference.histogram.percentile(quantile * 100.0)\n  }\n}\n\n/**\n * Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.\n *\n * @export\n * @class HdrHistogram\n * @extends {Histogram}\n * @implements {BucketCounting}\n * @implements {Counting}\n * @implements {Metric}\n * @implements {Sampling}\n * @implements {Summarizing}\n */\nexport class HdrHistogram extends Histogram implements BucketCounting, Counting, Metric, Sampling, Summarizing {\n  /**\n   * histogram instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof HdrHistogram\n   */\n  private readonly histogram: any\n  /**\n   * Snapshot instance.\n   *\n   * @private\n   * @type {HdrSnapshot}\n   * @memberof HdrHistogram\n   */\n  private readonly hdrSnapshot: HdrSnapshot\n\n  /**\n   * Creates an instance of HdrHistogram.\n   * Throws an error if the 'native-hdr-histogram' module is not installed.\n   *\n   * @param {number} [lowest=1] is the lowest possible number that can be recorded\n   * @param {number} [max=100] is the maximum number that can be recorded\n   * @param {number} [figures=3]\n   *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n   * @param {string} [name]\n   * @param {string} [description]\n   * @param {Buckets} [buckets=new Buckets()]\n   * @memberof HdrHistogram\n   */\n  public constructor (\n    lowest: number = 1,\n    max: number = 100,\n    figures: number = 3,\n    name?: string,\n    description?: string,\n    buckets: Buckets = new Buckets()) {\n    super(null, name, description, buckets)\n\n    if (!NativeHistogram) {\n      throw new Error(\"Module 'native-hdr-histogram' not found. \" +\n                            \"Please install the optional dependencies of 'inspector-metrics' module.\")\n    }\n\n    this.histogram = new NativeHistogram(lowest, max, figures)\n    this.hdrSnapshot = new HdrSnapshot(this)\n  }\n\n  /**\n   * Returns the internal instance of {@link HdrSnapshot}.\n   *\n   * @readonly\n   * @type {SerializedSnapshot}\n   * @memberof HdrHistogram\n   */\n  public get snapshot (): SerializedSnapshot {\n    return this.hdrSnapshot\n  }\n\n  /**\n   * Gets the snapshot instance.\n   *\n   * @returns {Snapshot}\n   * @memberof HdrHistogram\n   */\n  public getSnapshot (): Snapshot {\n    return this.hdrSnapshot\n  }\n\n  /**\n   * Updates the histogram, all counters and th overall sum with the given value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof HdrHistogram\n   */\n  public update (value: number): this {\n    this.count++\n    this.sumInternal.add(value)\n    for (const boundary of this.bucketsInternal.boundaries) {\n      if (value \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMetricReporter.html":{"url":"interfaces/IMetricReporter.html","title":"interface - IMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addMetricRegistry\n                                    \n                                \n                                \n                                    \n                                        flushEvents\n                                    \n                                \n                                \n                                    \n                                        getTags\n                                    \n                                \n                                \n                                    \n                                        removeMetricRegistry\n                                    \n                                \n                                \n                                    \n                                        reportEvent\n                                    \n                                \n                                \n                                    \n                                        setTags\n                                    \n                                \n                                \n                                    \n                                        start\n                                    \n                                \n                                \n                                    \n                                        stop\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMetricRegistry\n                        \n                    \n                \n            \n            \n                \naddMetricRegistry(metricRegistry: MetricRegistry)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:71\n                \n            \n\n\n            \n                \n                    Adds a new MetricRegistry to be reported.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metricRegistry\n                                    \n                                                MetricRegistry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flushEvents\n                        \n                    \n                \n            \n            \n                \nflushEvents()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:106\n                \n            \n\n\n            \n                \n                    Sends events remaining in the queue (if a queue is used in the implementation).\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTags\n                        \n                    \n                \n            \n            \n                \ngetTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:35\n                \n            \n\n\n            \n                \n                    Gets the reporter tags.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeMetricRegistry\n                        \n                    \n                \n            \n            \n                \nremoveMetricRegistry(metricRegistry: MetricRegistry)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:80\n                \n            \n\n\n            \n                \n                    Removes the given MetricRegistry if it was previously added.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metricRegistry\n                                    \n                                                MetricRegistry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportEvent\n                        \n                    \n                \n            \n            \n                \nreportEvent(event: TEvent)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:98\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TEventData\n                        TEvent\n                    \n                \n            \n\n            \n                \n                    Reports an Event.\nImplementations can choose how to process ad-hoc events, wether it's\nqueuing the events to the next call to report or sending events\nimmediately.\nAlso the usual reporting process of calling #beforeReport, do the reporting\nand call #afterReport may not be applied for ad-hoc events.\nThis implementation does nothing and always resolved the specified event.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                TEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTags\n                        \n                    \n                \n            \n            \n                \nsetTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:44\n                \n            \n\n\n            \n                \n                    Sets the reporter tags.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:53\n                \n            \n\n\n            \n                \n                    Implementations start reporting metrics when called.\n\n\n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stop\n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:62\n                \n            \n\n\n            \n                \n                    Implementations stop reporting metrics when called.\n\n\n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { getMetricTags, Metric } from \"../model/metric\";\nimport { Taggable, Tags, tagsToMap } from \"../model/taggable\";\nimport { MILLISECOND, MINUTE } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { InterprocessMessage, InterprocessReportMessage } from \"./interprocess-message\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricReporterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof IMetricReporter\n   */\n  getTags(): Map;\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  reportEvent>(event: TEvent): Promise;\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  flushEvents(): Promise;\n}\n\n/**\n * Pseudo-{@link MetricRegistry} used to provide an interface for registry tags.\n *\n * @class TagsOnlyMetricRegistry\n */\nclass TagsOnlyMetricRegistry {\n\n  /**\n   * private tags map.\n   *\n   * @private\n   * @type {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  private tags: Map;\n\n  /**\n   * Creates an instance of TagsOnlyMetricRegistry.\n   *\n   * @param {Tags} tags\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public constructor(tags: Tags) {\n      this.tags = tagsToMap(tags);\n  }\n\n  /**\n   * Gets the tags map.\n   *\n   * @returns {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public getTags(): Map {\n      return this.tags;\n  }\n\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-messages\n   * from reporter of forked processes.\n   *\n   * @static\n   * @memberof MetricReporter\n   */\n  public static readonly MESSAGE_TYPE = \"inspector-metrics:metric-reporter:report\";\n\n  /**\n   * {@link MetricRegistry} instances.\n   *\n   * @protected\n   * @readonly\n   * @type {MetricRegistry[]}\n   * @memberof MetricReporter\n   */\n  protected readonly metricRegistries: MetricRegistry[] = [];\n  /**\n   * options for this reporter instance.\n   *\n   * @protected\n   * @readonly\n   * @type {O}\n   * @memberof MetricReporter\n   */\n  protected readonly options: O;\n  /**\n   * Keeps track of the reporting states for each metric.\n   *\n   * @protected\n   * @readonly\n   * @type {Map}\n   * @memberof MetricReporter\n   */\n  protected readonly metricStates: Map = new Map();\n  /**\n   * The type of the reporter implementation - for internal use.\n   *\n   * @protected\n   * @readonly\n   * @type {string}\n   * @memberof MetricReporter\n   */\n  protected readonly reporterType: string;\n\n  /**\n   * Creates an instance of MetricReporter.\n   *\n   * @param {O} options\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof MetricReporter\n   */\n  public constructor(options: O, reporterType?: string) {\n      this.options = options;\n      this.reporterType = reporterType || this.constructor.name;\n      const clusterOptions = this.options.clusterOptions;\n      if (clusterOptions &&\n          clusterOptions.enabled &&\n          !clusterOptions.sendMetricsToMaster) {\n          clusterOptions.eventReceiver.on(\"message\", (worker, message, handle) =>\n              this.handleReportMessage(worker, message, handle));\n      }\n  }\n\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof MetricReporter\n   */\n  public getTags(): Map {\n      return this.options.tags;\n  }\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public setTags(tags: Map): this {\n      this.options.tags = tags;\n      return this;\n  }\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public addMetricRegistry(metricRegistry: MetricRegistry): this {\n      this.metricRegistries.push(metricRegistry);\n      return this;\n  }\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n      const index: number = this.metricRegistries.indexOf(metricRegistry);\n      if (index > -1) {\n          this.metricRegistries.splice(index, 1);\n      }\n      return this;\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      return event;\n  }\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async flushEvents(): Promise {\n  }\n\n  /**\n   * Checks if the specified message can be handle by this metric-reporter and is of the desired type.\n   *\n   * @protected\n   * @param {InterprocessMessage} message\n   * @param {string} [targetType=MetricReporter.MESSAGE_TYPE]\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected canHandleMessage(\n      message: InterprocessMessage,\n      targetType: string = MetricReporter.MESSAGE_TYPE): boolean {\n      return message &&\n          message.type && message.type === targetType &&\n          message.targetReporterType && message.targetReporterType === this.reporterType;\n  }\n\n  /**\n   * Handles messages from forked processes.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof MetricReporter\n   */\n  protected async handleReportMessage(worker: cluster.Worker, message: any, handle: any) {\n      if (this.canHandleMessage(message)) {\n          const report: InterprocessReportMessage = message;\n          const reg: MetricRegistry = (new TagsOnlyMetricRegistry(report.tags) as any) as MetricRegistry;\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.monotoneCounters);\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.counters);\n          await this.handleResults(report.ctx, reg, report.date, \"gauge\", report.metrics.gauges);\n          await this.handleResults(report.ctx, reg, report.date, \"histogram\", report.metrics.histograms);\n          await this.handleResults(report.ctx, reg, report.date, \"meter\", report.metrics.meters);\n          await this.handleResults(report.ctx, reg, report.date, \"timer\", report.metrics.timers);\n      }\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Called after each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async afterReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Run the reporting procedures. Calls {@link #beforeReport} before each\n   * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n   * afterwards.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async report(): Promise {\n      if (this.metricRegistries && this.metricRegistries.length > 0) {\n          const ctx = this.createOverallReportContext();\n          await this.beforeReport(ctx);\n          for (const registry of this.metricRegistries) {\n              await this.reportMetricRegistry(ctx, registry);\n          }\n          await this.afterReport(ctx);\n          return ctx;\n      }\n      return {};\n  }\n\n  /**\n   * Reporting function for a single {@link MetricRegistry}.\n   * Calls {@link #createReportingContext} for each metric type.\n   * Afterwards calls {@link #reportMetrics} for each of the\n   * registry's metrics - grouped by type.\n   * And finally calls {@link #handleResults} for each of the results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @memberof MetricReporter\n   */\n  protected async reportMetricRegistry(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null) {\n\n      const date: Date = new Date(this.options.clock.time().milliseconds);\n      const counterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"counter\");\n      const gaugeCtx: MetricSetReportContext> = this\n          .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n      const histogramCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n      const meterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"meter\");\n      const timerCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n      counterCtx.metrics = registry.getMonotoneCounterList();\n      const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n          (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n          (counter: MonotoneCounter) => counter.getCount());\n\n      counterCtx.metrics = registry.getCounterList();\n      const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n          (counter: Counter) => this.reportCounter(counter, counterCtx),\n          (counter: Counter) => counter.getCount());\n\n      gaugeCtx.metrics = registry.getGaugeList();\n      const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n          (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n          (gauge: Gauge) => gauge.getValue());\n\n      histogramCtx.metrics = registry.getHistogramList();\n      const histogramResults = this.reportMetrics(ctx, histogramCtx,\n          (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n          (histogram: Histogram) => histogram.getCount());\n\n      meterCtx.metrics = registry.getMeterList();\n      const meterResults = this.reportMetrics(ctx, meterCtx,\n          (meter: Meter) => this.reportMeter(meter, meterCtx),\n          (meter: Meter) => meter.getCount());\n\n      timerCtx.metrics = registry.getTimerList();\n      const timerResults = this.reportMetrics(ctx, timerCtx,\n          (timer: Timer) => this.reportTimer(timer, timerCtx),\n          (timer: Timer) => timer.getCount());\n\n      if (this.sendMetricsToMaster()) {\n          const message: InterprocessReportMessage = {\n              ctx,\n              date,\n              metrics: {\n                  counters: counterResults,\n                  gauges: gaugeResults,\n                  histograms: histogramResults,\n                  meters: meterResults,\n                  monotoneCounters: monotoneCounterResults,\n                  timers: timerResults,\n              },\n              tags: this.buildTags(registry, null),\n              targetReporterType: this.reporterType,\n              type: MetricReporter.MESSAGE_TYPE,\n          };\n          this.options.clusterOptions.sendToMaster(message);\n      } else {\n          await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n          await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n          await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n          await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n          await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n          await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n      }\n  }\n\n  /**\n   * Called in {@link #reportMetricRegistry} to determine to send a reporting-message to the master process.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected sendMetricsToMaster(): boolean {\n      return  this.options.clusterOptions &&\n              this.options.clusterOptions.enabled &&\n              this.options.clusterOptions.sendMetricsToMaster;\n  }\n\n  /**\n   * Creates an OverallReportContext.\n   *\n   * @protected\n   * @returns {OverallReportContext}\n   * @memberof MetricReporter\n   */\n  protected createOverallReportContext(): OverallReportContext {\n      return {\n      };\n  }\n\n  /**\n   * Creates a MetricSetReportContext with the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {MetricSetReportContext}\n   * @memberof MetricReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType): MetricSetReportContext {\n      return {\n          date,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Filters out each metric that does not necessarily need to be reported\n   * and calls the specified reporting function for the remaining.\n   *\n   * @protected\n   * @template M type of the metric\n   * @template C typed ReportingContext\n   * @param {C} ctx\n   * @param {(metric: M, ctx: C) => T} reportFunction\n   * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n   * @returns {Array>}\n   * @memberof MetricReporter\n   */\n  protected reportMetrics>(\n      overallCtx: OverallReportContext,\n      ctx: C,\n      reportFunction: (metric: M, ctx: C) => T,\n      lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n      return ctx.metrics\n          .filter((metric) => {\n              const metricId = (metric as any).id;\n              return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n          })\n          .map((metric) => ({\n              metric,\n              result: reportFunction(metric, ctx),\n          }))\n          .filter((result) => !!result.result);\n  }\n\n  /**\n   * Handles the reporting result for a group of metric instances.\n   *\n   * @protected\n   * @abstract\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  protected abstract handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>): Promise;\n\n  /**\n   * Does the reporting for a counter or monotone counter.\n   *\n   * @protected\n   * @abstract\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportCounter(\n      counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a gauge.\n   *\n   * @protected\n   * @abstract\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n  /**\n   * Does the reporting for a histogram.\n   *\n   * @protected\n   * @abstract\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a meter.\n   *\n   * @protected\n   * @abstract\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a timer.\n   *\n   * @protected\n   * @abstract\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n  /**\n   * Determines if a metric instance has changed it's value since the last check.\n   * This is always true if the minimal-reporting timeout was reached.\n   *\n   * @private\n   * @param {number} metricId\n   * @param {number} lastValue\n   * @param {number} date\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n      let changed = true;\n      let metricEntry = {\n          lastReport: 0,\n          lastValue,\n      };\n      if (this.metricStates.has(metricId)) {\n          metricEntry = this.metricStates.get(metricId);\n          changed = metricEntry.lastValue !== lastValue;\n          if (!changed) {\n              const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n              changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n      }\n      if (registry && registry.getTags()) {\n          registry.getTags().forEach((tag, key) => tags[key] = tag);\n      }\n      if (taggable) {\n          const customTags = getMetricTags(taggable);\n          Object.keys(customTags).forEach((key) => tags[key] = customTags[key]);\n      }\n      return tags;\n  }\n\n  /**\n   * Checks the number and gives it back or zero (0) if it's not a number.\n   *\n   * @protected\n   * @param {number} value\n   * @returns {number}\n   * @memberof MetricReporter\n   */\n  protected getNumber(value: number): number {\n      if (isNaN(value)) {\n          return 0;\n      }\n      return value;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InfluxMetricReporterOptions.html":{"url":"interfaces/InfluxMetricReporterOptions.html","title":"interface - InfluxMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InfluxMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for InfluxMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            log\n                                        \n                                \n                                \n                                        \n                                            sender\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        log:         Logger | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sender:         Sender\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Sender\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sender implementation used to send metrics to influx DB server.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * measurement point definition\n */\nexport interface MeasurementPoint {\n  /**\n   * Measurement is the Influx measurement name.\n   */\n  measurement: string;\n  /**\n   * Tags is the list of tag values to insert.\n   */\n  tags: {\n      [name: string]: string;\n  };\n  /**\n   * Fields is the list of field values to insert.\n   */\n  fields: {\n      [name: string]: any;\n  };\n  /**\n   * Timestamp tags this measurement with a date. This can be a Date object,\n   * in which case we'll adjust it to the desired precision, or a numeric\n   * string or number, in which case it gets passed directly to Influx.\n   */\n  timestamp: Date | string | number;\n}\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n  /**\n   * Indicates if the sender is ready to send data.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  isReady(): Promise\n\n  /**\n   * Triggers the initialization process.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  init(): Promise\n\n  /**\n   * Sends the given data points to influxdb.\n   *\n   * @param {T[]} points\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  send(points: MeasurementPoint[]): Promise\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * A logger instance used to report errors.\n   *\n   * @type {(Logger | null)}\n   * @memberof InfluxMetricReporterOptions\n   */\n  log: Logger | null\n  /**\n   * A sender implementation used to send metrics to influx DB server.\n   *\n   * @type {Sender}\n   * @memberof InfluxMetricReporterOptions\n   */\n  readonly sender: Sender\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof InfluxMetricReporter\n   */\n  private readonly logMetadata: any;\n\n  /**\n   * Creates an instance of InfluxMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof InfluxMetricReporter\n   */\n  public constructor ({\n    sender,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    clusterOptions = new DefaultClusterOptions(),\n    tags = new Map()\n  }: InfluxMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      sender,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof InfluxMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {(Logger | null)} log\n   * @memberof InfluxMetricReporter\n   */\n  public setLog (log: Logger | null): void {\n    this.options.log = log\n  }\n\n  /**\n   * Starts the sender and calls the super method to start scheduling.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async start (): Promise {\n    await this.options.sender.init()\n    return await super.start()\n  }\n\n  /**\n   * Sends an event directly to influxdb.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!(await this.options.sender.isReady())) {\n      throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\")\n    }\n\n    const value = event.getValue()\n    if (!value) {\n      return await Promise.reject(new Error('Invalid event value'))\n    }\n\n    const point = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: {},\n      registry: null,\n      type: 'gauge'\n    })\n    point.timestamp = event.getTime()\n\n    try {\n      await this.handleResults({}, null, null, 'gauge', [{\n        metric: event,\n        result: point\n      }])\n\n      if (this.options.log) {\n        this.options.log.debug('wrote event', this.logMetadata)\n      }\n      return event\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing event - reason: ${message}`, reason, this.logMetadata)\n      }\n      throw reason\n    }\n  }\n\n  /**\n   * Reports the data points for each registered {@link MetricRegistry}.\n   *\n   * @protected\n   * @memberof InfluxMetricReporter\n   */\n  protected async report (): Promise {\n    const senderReady = await this.options.sender.isReady()\n    if (senderReady) {\n      return await super.report()\n    }\n    return {}\n  }\n\n  /**\n   * Uses the sender to report the given data points.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const points = results.map((result) => result.result)\n    if (points.length === 0) {\n      return\n    }\n\n    try {\n      points.forEach((point) => {\n        if (!(point.timestamp instanceof Date)) {\n          point.timestamp = new Date(point.timestamp)\n        }\n      })\n\n      await this.options.sender.send(points)\n      if (this.options.log) {\n        this.options.log.debug(`wrote ${type} metrics`, this.logMetadata)\n      }\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing ${type} metrics - reason: ${message}`, reason, this.logMetadata)\n      }\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Counter} or  {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): MeasurementPoint {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(counter)\n    const measurement = this.getMeasurementName(counter)\n\n    fields[`${fieldNamePrefix}count`] = counter.getCount() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, counter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): MeasurementPoint {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(gauge)\n    const measurement = this.getMeasurementName(gauge)\n\n    fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(histogram)\n    const measurement = this.getMeasurementName(histogram)\n\n    fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, histogram),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = meter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(meter)\n    const measurement = this.getMeasurementName(meter)\n\n    fields[`${fieldNamePrefix}count`] = meter.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, meter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(timer)\n    const measurement = this.getMeasurementName(timer)\n\n    fields[`${fieldNamePrefix}count`] = timer.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, timer),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds the prefix for a field name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getFieldNamePrefix (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getName()}.`\n    }\n    return ''\n  }\n\n  /**\n   * Builds the prefix for the metric name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getMeasurementName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return metric.getGroup()\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Influxdb1Sender.html":{"url":"classes/Influxdb1Sender.html","title":"class - Influxdb1Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Influxdb1Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/Influxdb1Sender.ts\n        \n\n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Sender\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                db\n                            \n                            \n                                    Private\n                                    Readonly\n                                precision\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                            \n                                    Public\n                                    Async\n                                isReady\n                            \n                            \n                                    Public\n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig, precision: TimePrecision)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:45\n                            \n                        \n\n                \n                    \n                            Creates an instance of Influxdb1Sender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        TimePrecision\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                will be passed to write-options\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     IClusterConfig\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:29\n                        \n                    \n\n            \n                \n                    Influx client configuration object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InfluxDB\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:21\n                        \n                    \n\n            \n                \n                    The influxdb client instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TimePrecision\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:45\n                        \n                    \n\n            \n                \n                    Defines the precision for the write operations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ready\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:37\n                        \n                    \n\n            \n                \n                    Indicates if he sender is ready to report metrics.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:65\n                \n            \n\n\n            \n                \n                    Ensures that a database is existing before sending data.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        isReady\n                        \n                    \n                \n            \n            \n                \n                    \n                    isReady()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:83\n                \n            \n\n\n            \n                \n                    Gets the ready state.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(points: IPoint[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/Influxdb1Sender.ts:93\n                \n            \n\n\n            \n                \n                    Sends the specified data points to the DB.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                            IPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { IClusterConfig, InfluxDB, IPoint, TimePrecision } from 'influx'\nimport { Sender } from './InfluxMetricReporter'\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class Influxdb1Sender\n * @implements {Sender}\n */\nexport class Influxdb1Sender implements Sender {\n  /**\n   * The influxdb client instance.\n   *\n   * @private\n   * @type {InfluxDB}\n   * @memberof Influxdb1Sender\n   */\n  private readonly db: InfluxDB;\n  /**\n   * Influx client configuration object.\n   *\n   * @private\n   * @type {IClusterConfig}\n   * @memberof Influxdb1Sender\n   */\n  private readonly config: IClusterConfig;\n  /**\n   * Indicates if he sender is ready to report metrics.\n   *\n   * @private\n   * @type {boolean}\n   * @memberof Influxdb1Sender\n   */\n  private ready: boolean = false;\n  /**\n   * Defines the precision for the write operations.\n   *\n   * @private\n   * @type {TimePrecision}\n   * @memberof Influxdb1Sender\n   */\n  private readonly precision: TimePrecision;\n\n  /**\n   * Creates an instance of Influxdb1Sender.\n   *\n   * @param {IClusterConfig} config\n   * @param {TimePrecision} [precision=\"s\"] will be passed to write-options\n   * @memberof Influxdb1Sender\n   */\n  public constructor (config: IClusterConfig, precision: TimePrecision = 's') {\n    this.config = config\n    this.precision = precision\n    this.db = new InfluxDB(config)\n  }\n\n  /**\n   * Ensures that a database is existing before sending data.\n   *\n   * @memberof Influxdb1Sender\n   */\n  public async init (): Promise {\n    const database = this.config.database\n    const databases = await this.db.getDatabaseNames()\n    if ((databases instanceof String && databases.localeCompare(database) !== 0) ||\n      (databases instanceof Array &&\n        !databases.find((value: string, index: number, arr: string[]) =>\n          value.localeCompare(database) === 0))) {\n      await this.db.createDatabase(database)\n    }\n    this.ready = true\n  }\n\n  /**\n   * Gets the ready state.\n   *\n   * @returns {Promise}\n   * @memberof Influxdb1Sender\n   */\n  public async isReady (): Promise {\n    return this.ready\n  }\n\n  /**\n   * Sends the specified data points to the DB.\n   *\n   * @param {IPoint[]} points\n   * @memberof Influxdb1Sender\n   */\n  public async send (points: IPoint[]): Promise {\n    await this.db.writePoints(points, { precision: this.precision })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Influxdb2Sender.html":{"url":"classes/Influxdb2Sender.html","title":"class - Influxdb2Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Influxdb2Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/Influxdb2Sender.ts\n        \n\n\n            \n                Description\n            \n            \n                Implementation for influxdb2.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Sender\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bucket\n                            \n                            \n                                    Private\n                                    Readonly\n                                db\n                            \n                            \n                                    Private\n                                    Readonly\n                                org\n                            \n                            \n                                    Private\n                                ready\n                            \n                            \n                                    Private\n                                    Readonly\n                                retentionRules\n                            \n                            \n                                    Private\n                                    Readonly\n                                writeApi\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                            \n                                    Public\n                                    Async\n                                isReady\n                            \n                            \n                                    Public\n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: ClientOptions | string, org: string, bucket: string, retentionRules: RetentionRules, precision: WritePrecisionType, writeOptions?: Partial)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:62\n                            \n                        \n\n                \n                    \n                            Creates an instance of Influxdb2Sender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ClientOptions | string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        org\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        retentionRules\n                                                  \n                                                        \n                                                                    RetentionRules\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                    WritePrecisionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        writeOptions\n                                                  \n                                                        \n                                                                    Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:46\n                        \n                    \n\n            \n                \n                    Name of the bucket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InfluxDB\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:22\n                        \n                    \n\n            \n                \n                    The influxdb client instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        org\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:54\n                        \n                    \n\n            \n                \n                    Name of the organization.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ready\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:62\n                        \n                    \n\n            \n                \n                    Indicates if he sender is ready to report metrics.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        retentionRules\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RetentionRules\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:38\n                        \n                    \n\n            \n                \n                    Default setting for data retention.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        writeApi\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WriteApi\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:30\n                        \n                    \n\n            \n                \n                    Write Api instance.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:94\n                \n            \n\n\n            \n                \n                    Ensures that the organization and bucket exists before sending data.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        isReady\n                        \n                    \n                \n            \n            \n                \n                    \n                    isReady()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:128\n                \n            \n\n\n            \n                \n                    Gets the ready state.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(points: MeasurementPoint[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/Influxdb2Sender.ts:138\n                \n            \n\n\n            \n                \n                    Sends the specified data points to the DB and flushes the write-api instance.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                MeasurementPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { ClientOptions, InfluxDB, Point, WriteApi, WriteOptions, WritePrecisionType } from '@influxdata/influxdb-client'\nimport { BucketsAPI, OrgsAPI, RetentionRules } from '@influxdata/influxdb-client-apis'\nimport { MeasurementPoint, Sender } from './InfluxMetricReporter'\n\n/**\n * Implementation for influxdb2.\n *\n * @export\n * @class Influxdb2Sender\n * @implements {Sender}\n */\nexport class Influxdb2Sender implements Sender {\n  /**\n   * The influxdb client instance.\n   *\n   * @private\n   * @type {InfluxDB}\n   * @memberof Influxdb2Sender\n   */\n  private readonly db: InfluxDB;\n  /**\n   * Write Api instance.\n   *\n   * @private\n   * @type {WriteApi}\n   * @memberof Influxdb2Sender\n   */\n  private readonly writeApi: WriteApi;\n  /**\n   * Default setting for data retention.\n   *\n   * @private\n   * @type {RetentionRules}\n   * @memberof Influxdb2Sender\n   */\n  private readonly retentionRules: RetentionRules;\n  /**\n   * Name of the bucket.\n   *\n   * @private\n   * @type {string}\n   * @memberof Influxdb2Sender\n   */\n  private readonly bucket: string;\n  /**\n   * Name of the organization.\n   *\n   * @private\n   * @type {string}\n   * @memberof Influxdb2Sender\n   */\n   private readonly org: string;\n  /**\n   * Indicates if he sender is ready to report metrics.\n   *\n   * @private\n   * @type {boolean}\n   * @memberof Influxdb2Sender\n   */\n  private ready: boolean = false;\n\n  /**\n   * Creates an instance of Influxdb2Sender.\n   *\n   * @param {(ClientOptions | string)} config\n   * @param {string} org\n   * @param {string} bucket\n   * @param {RetentionRules} [retentionRules=[]]\n   * @param {WritePrecisionType} [precision='s']\n   * @param {Partial} [writeOptions]\n   * @memberof Influxdb2Sender\n   */\n  public constructor (\n    config: ClientOptions | string,\n    org: string,\n    bucket: string,\n    retentionRules: RetentionRules = [],\n    precision: WritePrecisionType = 's',\n    writeOptions?: Partial) {\n    this.org = org\n    this.bucket = bucket\n    this.retentionRules = retentionRules\n    this.db = new InfluxDB(config)\n    this.writeApi = this.db.getWriteApi(this.org, this.bucket, precision, writeOptions)\n  }\n\n  /**\n   * Ensures that the organization and bucket exists before sending data.\n   *\n   * @memberof Influxdb2Sender\n   */\n  public async init (): Promise {\n    const orgsAPI = new OrgsAPI(this.db)\n    const {\n      orgs: [org],\n    } = await orgsAPI.getOrgs({\n      org: this.org,\n    })\n\n    const bucketsAPI = new BucketsAPI(this.db)\n    const {\n      buckets: [bucket],\n    } = await bucketsAPI.getBuckets({\n      orgID: org.id,\n      name: this.bucket,\n    })\n\n    if (!bucket) {\n      await bucketsAPI.postBuckets({\n        body: {\n          retentionRules: this.retentionRules,\n          orgID: org.id,\n          name: this.bucket,\n        },\n      })\n    }\n    this.ready = true\n  }\n\n  /**\n   * Gets the ready state.\n   *\n   * @returns {Promise}\n   * @memberof Influxdb2Sender\n   */\n  public async isReady (): Promise {\n    return this.ready\n  }\n\n  /**\n   * Sends the specified data points to the DB and flushes the write-api instance.\n   *\n   * @param {MeasurementPoint[]} points\n   * @memberof Influxdb2Sender\n   */\n  public async send (points: MeasurementPoint[]): Promise {\n    await this.writeApi.writePoints(points.map(point => {\n        const newPoint = new Point(point.measurement)\n          .timestamp(point.timestamp)\n\n        for (const fieldName in point.fields) {\n          newPoint.fields[fieldName] = `${point.fields[fieldName]}`\n        }\n\n        for (const tag in point.tags) {\n          newPoint.tag(tag, point.tags[tag])\n        }\n\n        return newPoint\n      }))\n    await this.writeApi.flush()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Int64Wrapper.html":{"url":"classes/Int64Wrapper.html","title":"class - Int64Wrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Int64Wrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/int64.ts\n        \n\n\n            \n                Description\n            \n            \n                Wrapper class for a native int64_t value.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                num\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                toNumber\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(initial: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of Int64Wrapper.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        num\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:21\n                        \n                    \n\n            \n                \n                    int64_t value instance.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:40\n                \n            \n\n\n            \n                \n                    Adds the specified value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    toNumber()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:51\n                \n            \n\n\n            \n                \n                    Gets the 64bit value as javascript 32bit signed integer.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:61\n                \n            \n\n\n            \n                \n                    Converts the 64bit integer to it's string representation.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        const Int64 = require(\"node-cint64\").Int64;\n\n/**\n * Wrapper class for a native int64_t value.\n *\n * @export\n * @class Int64Wrapper\n */\nexport class Int64Wrapper {\n\n  /**\n   * int64_t value instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof Int64Wrapper\n   */\n  private num: any;\n\n  /**\n   * Creates an instance of Int64Wrapper.\n   *\n   * @param {number} [initial=0]\n   * @memberof Int64Wrapper\n   */\n  public constructor(initial: number = 0) {\n    this.num = new Int64(initial);\n  }\n\n  /**\n   * Adds the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Int64Wrapper\n   */\n  public add(value: number): this {\n    this.num = this.num.add(value);\n    return this;\n  }\n\n  /**\n   * Gets the 64bit value as javascript 32bit signed integer.\n   *\n   * @returns {number}\n   * @memberof Int64Wrapper\n   */\n  public toNumber(): number {\n    return this.num.toNumber();\n  }\n\n  /**\n   * Converts the 64bit integer to it's string representation.\n   *\n   * @returns {string}\n   * @memberof Int64Wrapper\n   */\n  public toString(): string {\n    return this.num.toString();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessMessage.html":{"url":"interfaces/InterprocessMessage.html","title":"interface - InterprocessMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterprocessMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for common inter-process messages.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            targetReporterType\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targetReporterType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetReporterType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the reported which sent the metrics to the master process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type property of the message sent to the master process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializableMetric } from \"../model/metric\";\nimport { Tags } from \"../model/taggable\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for common inter-process messages.\n *\n * @export\n * @interface InterprocessMessage\n */\nexport interface InterprocessMessage {\n  /**\n   * Type of the reported which sent the metrics to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  targetReporterType: string;\n  /**\n   * The type property of the message sent to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  type: string;\n}\n\n/**\n * Interface for reports from reporters in forked processes.\n *\n * @export\n * @interface InterprocessReportMessage\n * @template T\n */\nexport interface InterprocessReportMessage extends InterprocessMessage {\n  /**\n   * Reporting context from forked process.\n   *\n   * @type {OverallReportContext}\n   * @memberof InterprocessReportMessage\n   */\n  ctx: OverallReportContext;\n  /**\n   * Date from report function in forked process.\n   *\n   * @type {Date}\n   * @memberof InterprocessReportMessage\n   */\n  date: Date;\n  /**\n   * Tags from originating {@link MetricRegistry}.\n   *\n   * @type {Tags}\n   * @memberof InterprocessReportMessage\n   */\n  tags: Tags;\n  /**\n   * Collection of metric reporting results from forked process.\n   *\n   * @type {{\n   *         counters: Array>;\n   *         gauges: Array>;\n   *         histograms: Array>;\n   *         meters: Array>;\n   *         monotoneCounters: Array>;\n   *         timers: Array>;\n   *     }}\n   * @memberof InterprocessReportMessage\n   */\n  metrics: {\n      counters: Array>;\n      gauges: Array>;\n      histograms: Array>;\n      meters: Array>;\n      monotoneCounters: Array>;\n      timers: Array>;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessReportMessage.html":{"url":"interfaces/InterprocessReportMessage.html","title":"interface - InterprocessReportMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterprocessReportMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for reports from reporters in forked processes.\n\n            \n\n            \n                Extends\n            \n            \n                        InterprocessMessage\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ctx\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            metrics\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ctx:         OverallReportContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverallReportContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Reporting context from forked process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date from report function in forked process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metrics\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metrics:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Collection of metric reporting results from forked process.\n    counters: Array>;\n    gauges: Array>;\n    histograms: Array>;\n    meters: Array>;\n    monotoneCounters: Array>;\n    timers: Array>;\n}}\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:         Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tags from originating MetricRegistry.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializableMetric } from \"../model/metric\";\nimport { Tags } from \"../model/taggable\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for common inter-process messages.\n *\n * @export\n * @interface InterprocessMessage\n */\nexport interface InterprocessMessage {\n  /**\n   * Type of the reported which sent the metrics to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  targetReporterType: string;\n  /**\n   * The type property of the message sent to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  type: string;\n}\n\n/**\n * Interface for reports from reporters in forked processes.\n *\n * @export\n * @interface InterprocessReportMessage\n * @template T\n */\nexport interface InterprocessReportMessage extends InterprocessMessage {\n  /**\n   * Reporting context from forked process.\n   *\n   * @type {OverallReportContext}\n   * @memberof InterprocessReportMessage\n   */\n  ctx: OverallReportContext;\n  /**\n   * Date from report function in forked process.\n   *\n   * @type {Date}\n   * @memberof InterprocessReportMessage\n   */\n  date: Date;\n  /**\n   * Tags from originating {@link MetricRegistry}.\n   *\n   * @type {Tags}\n   * @memberof InterprocessReportMessage\n   */\n  tags: Tags;\n  /**\n   * Collection of metric reporting results from forked process.\n   *\n   * @type {{\n   *         counters: Array>;\n   *         gauges: Array>;\n   *         histograms: Array>;\n   *         meters: Array>;\n   *         monotoneCounters: Array>;\n   *         timers: Array>;\n   *     }}\n   * @memberof InterprocessReportMessage\n   */\n  metrics: {\n      counters: Array>;\n      gauges: Array>;\n      histograms: Array>;\n      meters: Array>;\n      monotoneCounters: Array>;\n      timers: Array>;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessReportRequest.html":{"url":"interfaces/InterprocessReportRequest.html","title":"interface - InterprocessReportRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterprocessReportRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/InterprocessReportRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                A message send from master process to forked processes in order\nto get a response message with a metrics-string.\n\n            \n\n            \n                Extends\n            \n            \n                        InterprocessMessage\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A unique id used to identify responses send back from forked processes.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { InterprocessMessage } from 'inspector-metrics'\n\n/**\n * A message send from master process to forked processes in order\n * to get a response message with a metrics-string.\n *\n * @export\n * @interface InterprocessReportRequest\n * @extends {InterprocessMessage}\n */\nexport interface InterprocessReportRequest extends InterprocessMessage {\n  /**\n   * A unique id used to identify responses send back from forked processes.\n   *\n   * @type {string}\n   * @memberof InterprocessReportRequest\n   */\n  readonly id: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessReportResponse.html":{"url":"interfaces/InterprocessReportResponse.html","title":"interface - InterprocessReportResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterprocessReportResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/InterprocessReportResponse.ts\n        \n\n\n            \n                Description\n            \n            \n                A message send from forked processes to the master process as response\nto a metric-request-message.\n\n            \n\n            \n                Extends\n            \n            \n                        InterprocessMessage\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            metricsStr\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Copy of the id from the request message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metricsStr\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metricsStr:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The rendered metrics-string.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { InterprocessMessage } from 'inspector-metrics'\n\n/**\n * A message send from forked processes to the master process as response\n * to a metric-request-message.\n *\n * @export\n * @interface InterprocessReportResponse\n * @extends {InterprocessMessage}\n */\nexport interface InterprocessReportResponse extends InterprocessMessage {\n  /**\n   * Copy of the id from the request message.\n   *\n   * @type {string}\n   * @memberof InterprocessReportResponse\n   */\n  readonly id: string\n  /**\n   * The rendered metrics-string.\n   *\n   * @type {string}\n   * @memberof InterprocessReportResponse\n   */\n  readonly metricsStr: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthAttributeInterface.html":{"url":"interfaces/LengthAttributeInterface.html","title":"interface - LengthAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LengthAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length\" attribute (e.g. Array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthMethodInterface.html":{"url":"interfaces/LengthMethodInterface.html","title":"interface - LengthMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LengthMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length()\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        length\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/size-gauge.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogLine.html":{"url":"interfaces/LogLine.html","title":"interface - LogLine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogLine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface to abstract a log-line.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message string passed to the logger instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Metadata passed to the logger instance as second parameter.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { DefaultClusterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n  /**\n   * Message string passed to the logger instance.\n   *\n   * @type {string}\n   * @memberof LogLine\n   */\n  message: string;\n  /**\n   * Metadata passed to the logger instance as second parameter.\n   *\n   * @type {*}\n   * @memberof LogLine\n   */\n  metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n  /**\n   * Common log metadata to extend.\n   *\n   * @type {*}\n   * @memberof LoggerReportingContext\n   */\n  readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The logger instance used to report metrics.\n   *\n   * @type {Logger}\n   * @memberof LoggerReporterOptions\n   */\n  log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n  /**\n   * The metadata object passed to the {@link Logger} instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof LoggerReporter\n   */\n  private logMetadata: any;\n\n  /**\n   * Creates an instance of LoggerReporter.\n   *\n   * @memberof LoggerReporter\n   */\n  public constructor({\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions(),\n  }: LoggerReporterOptions,\n                     reporterType?: string) {\n      super({\n          clock,\n          clusterOptions,\n          log,\n          minReportingTimeout,\n          reportInterval,\n          scheduler,\n          tags,\n          unit,\n      }, reporterType);\n      this.logMetadata = {\n          reportInterval,\n          tags,\n          unit,\n      };\n  }\n\n  /**\n   * Gets the {@link Logger} instance.\n   *\n   * @returns {Logger}\n   * @memberof LoggerReporter\n   */\n  public getLog(): Logger {\n      return this.options.log;\n  }\n\n  /**\n   * Sets the {@link Logger} instance.\n   *\n   * @param {Logger} log\n   * @returns {this}\n   * @memberof LoggerReporter\n   */\n  public setLog(log: Logger): this {\n      this.options.log = log;\n      return this;\n  }\n\n  /**\n   * Prints the specified event immediately to the logger at 'info' level.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof LoggerReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      const ctx: LoggerReportingContext = this\n          .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n      const logLine: LogLine = this.reportGauge(event, ctx);\n      if (logLine) {\n          this.options.log.info(logLine.message, logLine.metadata);\n      }\n      return event;\n  }\n\n  /**\n   * Creates a new {@link LoggerReportingContext} using the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {LoggerReportingContext}\n   * @memberof LoggerReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry,\n      date: Date,\n      type: MetricType): LoggerReportingContext {\n      const logMetadata = Object.assign({}, this.logMetadata, {\n          measurement: \"\",\n          measurement_type: type,\n          timestamp: date,\n      });\n      return {\n          date,\n          logMetadata,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Logs each result at 'info' level using the logger instance specified in the options.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof LoggerReporter\n   */\n  protected async handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>) {\n      for (const logLine of results) {\n          this.options.log.info(logLine.result.message, logLine.result.metadata);\n      }\n  }\n\n  /**\n   * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n   * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(LoggerReportingContext)} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportCounter(\n      counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(counter.getCount())) {\n          const name = counter.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = counter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n          return {\n              message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Gauge} if the gauge's\n   * value is a valid number.\n   *\n   * Reported fields:\n   * - value\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {LoggerReportingContext>} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n      if (!Number.isNaN(gauge.getValue())) {\n          const name = gauge.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = gauge.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n          return {\n              message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Histogram} if the value of\n   * {@link Histogram#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(histogram.getCount())) {\n          const name = histogram.getName();\n          const snapshot = histogram.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = histogram.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n          return {\n              message: `${ctx.date} - histogram ${name}\\\n                          \\n\\tcount: ${histogram.getCount()}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Meter} if the value of\n   * {@link Meter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(meter.getCount())) {\n          const name = meter.getName();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = meter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n          return {\n              message: `${ctx.date} - meter ${name}\\\n                          \\n\\tcount: ${meter.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Timer} if the value of\n   * {@link Timer#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(timer.getCount())) {\n          const name = timer.getName();\n          const snapshot = timer.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = timer.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n          return {\n              message: `${ctx.date} - timer ${name}\\\n                          \\n\\tcount: ${timer.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger.ts\n        \n\n\n            \n                Description\n            \n            \n                A logger abstraction used in this library.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            debug\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            info\n                                        \n                                \n                                \n                                        \n                                            trace\n                                        \n                                \n                                \n                                        \n                                            warn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debug:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"debug\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\navailable since node 8\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"error\" level:\n\nthe first argument passed is usually the log message\nusually logs to stderr stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        info:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"info\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trace:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"trace\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warn:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"warn\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A logger abstraction used in this library.\n *\n * @export\n * @interface Logger\n */\nexport interface Logger {\n  /**\n   * Logs at \"error\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stderr stream\n   */\n  error: (...args: any[]) => any;\n  /**\n   * Logs at \"warn\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   */\n  warn: (...args: any[]) => any;\n  /**\n   * Logs at \"info\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   */\n  info: (...args: any[]) => any;\n  /**\n   * Logs at \"debug\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   * - available since node 8\n   */\n  debug: (...args: any[]) => any;\n  /**\n   * Logs at \"trace\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   */\n  trace: (...args: any[]) => any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerReporterOptions.html":{"url":"interfaces/LoggerReporterOptions.html","title":"interface - LoggerReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for LoggerReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            log\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The logger instance used to report metrics.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { DefaultClusterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n  /**\n   * Message string passed to the logger instance.\n   *\n   * @type {string}\n   * @memberof LogLine\n   */\n  message: string;\n  /**\n   * Metadata passed to the logger instance as second parameter.\n   *\n   * @type {*}\n   * @memberof LogLine\n   */\n  metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n  /**\n   * Common log metadata to extend.\n   *\n   * @type {*}\n   * @memberof LoggerReportingContext\n   */\n  readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The logger instance used to report metrics.\n   *\n   * @type {Logger}\n   * @memberof LoggerReporterOptions\n   */\n  log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n  /**\n   * The metadata object passed to the {@link Logger} instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof LoggerReporter\n   */\n  private logMetadata: any;\n\n  /**\n   * Creates an instance of LoggerReporter.\n   *\n   * @memberof LoggerReporter\n   */\n  public constructor({\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions(),\n  }: LoggerReporterOptions,\n                     reporterType?: string) {\n      super({\n          clock,\n          clusterOptions,\n          log,\n          minReportingTimeout,\n          reportInterval,\n          scheduler,\n          tags,\n          unit,\n      }, reporterType);\n      this.logMetadata = {\n          reportInterval,\n          tags,\n          unit,\n      };\n  }\n\n  /**\n   * Gets the {@link Logger} instance.\n   *\n   * @returns {Logger}\n   * @memberof LoggerReporter\n   */\n  public getLog(): Logger {\n      return this.options.log;\n  }\n\n  /**\n   * Sets the {@link Logger} instance.\n   *\n   * @param {Logger} log\n   * @returns {this}\n   * @memberof LoggerReporter\n   */\n  public setLog(log: Logger): this {\n      this.options.log = log;\n      return this;\n  }\n\n  /**\n   * Prints the specified event immediately to the logger at 'info' level.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof LoggerReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      const ctx: LoggerReportingContext = this\n          .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n      const logLine: LogLine = this.reportGauge(event, ctx);\n      if (logLine) {\n          this.options.log.info(logLine.message, logLine.metadata);\n      }\n      return event;\n  }\n\n  /**\n   * Creates a new {@link LoggerReportingContext} using the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {LoggerReportingContext}\n   * @memberof LoggerReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry,\n      date: Date,\n      type: MetricType): LoggerReportingContext {\n      const logMetadata = Object.assign({}, this.logMetadata, {\n          measurement: \"\",\n          measurement_type: type,\n          timestamp: date,\n      });\n      return {\n          date,\n          logMetadata,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Logs each result at 'info' level using the logger instance specified in the options.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof LoggerReporter\n   */\n  protected async handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>) {\n      for (const logLine of results) {\n          this.options.log.info(logLine.result.message, logLine.result.metadata);\n      }\n  }\n\n  /**\n   * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n   * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(LoggerReportingContext)} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportCounter(\n      counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(counter.getCount())) {\n          const name = counter.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = counter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n          return {\n              message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Gauge} if the gauge's\n   * value is a valid number.\n   *\n   * Reported fields:\n   * - value\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {LoggerReportingContext>} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n      if (!Number.isNaN(gauge.getValue())) {\n          const name = gauge.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = gauge.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n          return {\n              message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Histogram} if the value of\n   * {@link Histogram#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(histogram.getCount())) {\n          const name = histogram.getName();\n          const snapshot = histogram.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = histogram.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n          return {\n              message: `${ctx.date} - histogram ${name}\\\n                          \\n\\tcount: ${histogram.getCount()}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Meter} if the value of\n   * {@link Meter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(meter.getCount())) {\n          const name = meter.getName();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = meter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n          return {\n              message: `${ctx.date} - meter ${name}\\\n                          \\n\\tcount: ${meter.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Timer} if the value of\n   * {@link Timer#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(timer.getCount())) {\n          const name = timer.getName();\n          const snapshot = timer.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = timer.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n          return {\n              message: `${ctx.date} - timer ${name}\\\n                          \\n\\tcount: ${timer.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerReportingContext.html":{"url":"interfaces/LoggerReportingContext.html","title":"interface - LoggerReportingContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerReportingContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for the reporting context.\n\n            \n\n            \n                Extends\n            \n            \n                        MetricSetReportContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            logMetadata\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        logMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logMetadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Common log metadata to extend.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { DefaultClusterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n  /**\n   * Message string passed to the logger instance.\n   *\n   * @type {string}\n   * @memberof LogLine\n   */\n  message: string;\n  /**\n   * Metadata passed to the logger instance as second parameter.\n   *\n   * @type {*}\n   * @memberof LogLine\n   */\n  metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n  /**\n   * Common log metadata to extend.\n   *\n   * @type {*}\n   * @memberof LoggerReportingContext\n   */\n  readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The logger instance used to report metrics.\n   *\n   * @type {Logger}\n   * @memberof LoggerReporterOptions\n   */\n  log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n  /**\n   * The metadata object passed to the {@link Logger} instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof LoggerReporter\n   */\n  private logMetadata: any;\n\n  /**\n   * Creates an instance of LoggerReporter.\n   *\n   * @memberof LoggerReporter\n   */\n  public constructor({\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions(),\n  }: LoggerReporterOptions,\n                     reporterType?: string) {\n      super({\n          clock,\n          clusterOptions,\n          log,\n          minReportingTimeout,\n          reportInterval,\n          scheduler,\n          tags,\n          unit,\n      }, reporterType);\n      this.logMetadata = {\n          reportInterval,\n          tags,\n          unit,\n      };\n  }\n\n  /**\n   * Gets the {@link Logger} instance.\n   *\n   * @returns {Logger}\n   * @memberof LoggerReporter\n   */\n  public getLog(): Logger {\n      return this.options.log;\n  }\n\n  /**\n   * Sets the {@link Logger} instance.\n   *\n   * @param {Logger} log\n   * @returns {this}\n   * @memberof LoggerReporter\n   */\n  public setLog(log: Logger): this {\n      this.options.log = log;\n      return this;\n  }\n\n  /**\n   * Prints the specified event immediately to the logger at 'info' level.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof LoggerReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      const ctx: LoggerReportingContext = this\n          .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n      const logLine: LogLine = this.reportGauge(event, ctx);\n      if (logLine) {\n          this.options.log.info(logLine.message, logLine.metadata);\n      }\n      return event;\n  }\n\n  /**\n   * Creates a new {@link LoggerReportingContext} using the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {LoggerReportingContext}\n   * @memberof LoggerReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry,\n      date: Date,\n      type: MetricType): LoggerReportingContext {\n      const logMetadata = Object.assign({}, this.logMetadata, {\n          measurement: \"\",\n          measurement_type: type,\n          timestamp: date,\n      });\n      return {\n          date,\n          logMetadata,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Logs each result at 'info' level using the logger instance specified in the options.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof LoggerReporter\n   */\n  protected async handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>) {\n      for (const logLine of results) {\n          this.options.log.info(logLine.result.message, logLine.result.metadata);\n      }\n  }\n\n  /**\n   * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n   * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(LoggerReportingContext)} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportCounter(\n      counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(counter.getCount())) {\n          const name = counter.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = counter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n          return {\n              message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Gauge} if the gauge's\n   * value is a valid number.\n   *\n   * Reported fields:\n   * - value\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {LoggerReportingContext>} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n      if (!Number.isNaN(gauge.getValue())) {\n          const name = gauge.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = gauge.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n          return {\n              message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Histogram} if the value of\n   * {@link Histogram#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(histogram.getCount())) {\n          const name = histogram.getName();\n          const snapshot = histogram.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = histogram.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n          return {\n              message: `${ctx.date} - histogram ${name}\\\n                          \\n\\tcount: ${histogram.getCount()}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Meter} if the value of\n   * {@link Meter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(meter.getCount())) {\n          const name = meter.getName();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = meter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n          return {\n              message: `${ctx.date} - meter ${name}\\\n                          \\n\\tcount: ${meter.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Timer} if the value of\n   * {@link Timer#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(timer.getCount())) {\n          const name = timer.getName();\n          const snapshot = timer.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = timer.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n          return {\n              message: `${ctx.date} - timer ${name}\\\n                          \\n\\tcount: ${timer.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MeasurementPoint.html":{"url":"interfaces/MeasurementPoint.html","title":"interface - MeasurementPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MeasurementPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                measurement point definition\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fields\n                                        \n                                \n                                \n                                        \n                                            measurement\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fields is the list of field values to insert.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        measurement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        measurement:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Measurement is the Influx measurement name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tags is the list of tag values to insert.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:     Date | string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Timestamp tags this measurement with a date. This can be a Date object,\nin which case we'll adjust it to the desired precision, or a numeric\nstring or number, in which case it gets passed directly to Influx.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * measurement point definition\n */\nexport interface MeasurementPoint {\n  /**\n   * Measurement is the Influx measurement name.\n   */\n  measurement: string;\n  /**\n   * Tags is the list of tag values to insert.\n   */\n  tags: {\n      [name: string]: string;\n  };\n  /**\n   * Fields is the list of field values to insert.\n   */\n  fields: {\n      [name: string]: any;\n  };\n  /**\n   * Timestamp tags this measurement with a date. This can be a Date object,\n   * in which case we'll adjust it to the desired precision, or a numeric\n   * string or number, in which case it gets passed directly to Influx.\n   */\n  timestamp: Date | string | number;\n}\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n  /**\n   * Indicates if the sender is ready to send data.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  isReady(): Promise\n\n  /**\n   * Triggers the initialization process.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  init(): Promise\n\n  /**\n   * Sends the given data points to influxdb.\n   *\n   * @param {T[]} points\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  send(points: MeasurementPoint[]): Promise\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * A logger instance used to report errors.\n   *\n   * @type {(Logger | null)}\n   * @memberof InfluxMetricReporterOptions\n   */\n  log: Logger | null\n  /**\n   * A sender implementation used to send metrics to influx DB server.\n   *\n   * @type {Sender}\n   * @memberof InfluxMetricReporterOptions\n   */\n  readonly sender: Sender\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof InfluxMetricReporter\n   */\n  private readonly logMetadata: any;\n\n  /**\n   * Creates an instance of InfluxMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof InfluxMetricReporter\n   */\n  public constructor ({\n    sender,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    clusterOptions = new DefaultClusterOptions(),\n    tags = new Map()\n  }: InfluxMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      sender,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof InfluxMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {(Logger | null)} log\n   * @memberof InfluxMetricReporter\n   */\n  public setLog (log: Logger | null): void {\n    this.options.log = log\n  }\n\n  /**\n   * Starts the sender and calls the super method to start scheduling.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async start (): Promise {\n    await this.options.sender.init()\n    return await super.start()\n  }\n\n  /**\n   * Sends an event directly to influxdb.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!(await this.options.sender.isReady())) {\n      throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\")\n    }\n\n    const value = event.getValue()\n    if (!value) {\n      return await Promise.reject(new Error('Invalid event value'))\n    }\n\n    const point = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: {},\n      registry: null,\n      type: 'gauge'\n    })\n    point.timestamp = event.getTime()\n\n    try {\n      await this.handleResults({}, null, null, 'gauge', [{\n        metric: event,\n        result: point\n      }])\n\n      if (this.options.log) {\n        this.options.log.debug('wrote event', this.logMetadata)\n      }\n      return event\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing event - reason: ${message}`, reason, this.logMetadata)\n      }\n      throw reason\n    }\n  }\n\n  /**\n   * Reports the data points for each registered {@link MetricRegistry}.\n   *\n   * @protected\n   * @memberof InfluxMetricReporter\n   */\n  protected async report (): Promise {\n    const senderReady = await this.options.sender.isReady()\n    if (senderReady) {\n      return await super.report()\n    }\n    return {}\n  }\n\n  /**\n   * Uses the sender to report the given data points.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const points = results.map((result) => result.result)\n    if (points.length === 0) {\n      return\n    }\n\n    try {\n      points.forEach((point) => {\n        if (!(point.timestamp instanceof Date)) {\n          point.timestamp = new Date(point.timestamp)\n        }\n      })\n\n      await this.options.sender.send(points)\n      if (this.options.log) {\n        this.options.log.debug(`wrote ${type} metrics`, this.logMetadata)\n      }\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing ${type} metrics - reason: ${message}`, reason, this.logMetadata)\n      }\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Counter} or  {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): MeasurementPoint {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(counter)\n    const measurement = this.getMeasurementName(counter)\n\n    fields[`${fieldNamePrefix}count`] = counter.getCount() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, counter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): MeasurementPoint {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(gauge)\n    const measurement = this.getMeasurementName(gauge)\n\n    fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(histogram)\n    const measurement = this.getMeasurementName(histogram)\n\n    fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, histogram),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = meter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(meter)\n    const measurement = this.getMeasurementName(meter)\n\n    fields[`${fieldNamePrefix}count`] = meter.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, meter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(timer)\n    const measurement = this.getMeasurementName(timer)\n\n    fields[`${fieldNamePrefix}count`] = timer.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, timer),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds the prefix for a field name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getFieldNamePrefix (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getName()}.`\n    }\n    return ''\n  }\n\n  /**\n   * Builds the prefix for the metric name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getMeasurementName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return metric.getGroup()\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metadata.html":{"url":"interfaces/Metadata.html","title":"interface - Metadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Metadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for handling metadata.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:56\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Interface for all classes that can associate metadata with instances.\n *\n * @export\n * @interface MetadataContainer\n */\nexport interface MetadataContainer {\n\n  /**\n   * Gets all the metadata associated with an instance.\n   * Future changes to the metadata of this instance may\n   * not be reflected in the map returned here.\n   *\n   * @returns {Map}\n   * @memberof MetadataContainer\n   */\n  getMetadataMap(): Map;\n\n  /**\n   * Gets the metadata associated with the specified name.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  getMetadata(name: string): T;\n\n  /**\n   * Removes the metadata associated with the specified name and returns it finally.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  removeMetadata(name: string): T;\n\n  /**\n   * Sets the metadata object to the name.\n   *\n   * @template T\n   * @param {string} name The key of the metadata\n   * @param {T} value any value\n   * @returns {this}\n   * @memberof MetadataContainer\n   */\n  setMetadata(name: string, value: T): this;\n}\n\n/**\n * Helper interface for handling metadata.\n */\nexport interface Metadata {\n  [key: string]: any;\n}\n\n/**\n * Transforms the {@link Metadata} object into a {@link Map} object.\n *\n * @export\n * @param {Metadata} metadata\n * @returns {Map}\n */\nexport function metadataToMap(metadata: Metadata): Map {\n  const metadataMap: Map = new Map();\n  if (metadata) {\n    Object.keys(metadata).forEach((key) => metadataMap.set(key, metadata[key]));\n  }\n  return metadataMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Metadata} object.\n *\n * @export\n * @param {Map} metadataMap\n * @returns {Metadata}\n */\nexport function mapToMetadata(metadataMap: Map): Metadata {\n  const metadata: Metadata = {};\n  if (metadataMap) {\n    metadataMap.forEach((value, name) => metadata[name] = value);\n  }\n  return metadata;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetadataContainer.html":{"url":"interfaces/MetadataContainer.html","title":"interface - MetadataContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetadataContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for all classes that can associate metadata with instances.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMetadata\n                                    \n                                \n                                \n                                    \n                                        getMetadataMap\n                                    \n                                \n                                \n                                    \n                                        removeMetadata\n                                    \n                                \n                                \n                                    \n                                        setMetadata\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMetadata\n                        \n                    \n                \n            \n            \n                \ngetMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Gets the metadata associated with the specified name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The metadata key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMetadataMap\n                        \n                    \n                \n            \n            \n                \ngetMetadataMap()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:19\n                \n            \n\n\n            \n                \n                    Gets all the metadata associated with an instance.\nFuture changes to the metadata of this instance may\nnot be reflected in the map returned here.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeMetadata\n                        \n                    \n                \n            \n            \n                \nremoveMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Removes the metadata associated with the specified name and returns it finally.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The metadata key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMetadata\n                        \n                    \n                \n            \n            \n                \nsetMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Sets the metadata object to the name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key of the metadata\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        any value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Interface for all classes that can associate metadata with instances.\n *\n * @export\n * @interface MetadataContainer\n */\nexport interface MetadataContainer {\n\n  /**\n   * Gets all the metadata associated with an instance.\n   * Future changes to the metadata of this instance may\n   * not be reflected in the map returned here.\n   *\n   * @returns {Map}\n   * @memberof MetadataContainer\n   */\n  getMetadataMap(): Map;\n\n  /**\n   * Gets the metadata associated with the specified name.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  getMetadata(name: string): T;\n\n  /**\n   * Removes the metadata associated with the specified name and returns it finally.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  removeMetadata(name: string): T;\n\n  /**\n   * Sets the metadata object to the name.\n   *\n   * @template T\n   * @param {string} name The key of the metadata\n   * @param {T} value any value\n   * @returns {this}\n   * @memberof MetadataContainer\n   */\n  setMetadata(name: string, value: T): this;\n}\n\n/**\n * Helper interface for handling metadata.\n */\nexport interface Metadata {\n  [key: string]: any;\n}\n\n/**\n * Transforms the {@link Metadata} object into a {@link Map} object.\n *\n * @export\n * @param {Metadata} metadata\n * @returns {Map}\n */\nexport function metadataToMap(metadata: Metadata): Map {\n  const metadataMap: Map = new Map();\n  if (metadata) {\n    Object.keys(metadata).forEach((key) => metadataMap.set(key, metadata[key]));\n  }\n  return metadataMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Metadata} object.\n *\n * @export\n * @param {Map} metadataMap\n * @returns {Metadata}\n */\nexport function mapToMetadata(metadataMap: Map): Metadata {\n  const metadata: Metadata = {};\n  if (metadataMap) {\n    metadataMap.forEach((value, name) => metadata[name] = value);\n  }\n  return metadata;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metered.html":{"url":"interfaces/Metered.html","title":"interface - Metered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Metered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metered.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get15MinuteRate\n                                    \n                                \n                                \n                                    \n                                        get1MinuteRate\n                                    \n                                \n                                \n                                    \n                                        get5MinuteRate\n                                    \n                                \n                                \n                                    \n                                        getCount\n                                    \n                                \n                                \n                                    \n                                        getMeanRate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get15MinuteRate\n                        \n                    \n                \n            \n            \n                \nget15MinuteRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:28\n                \n            \n\n\n            \n                \n                    Gets the rate of the last 15 minutes.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get1MinuteRate\n                        \n                    \n                \n            \n            \n                \nget1MinuteRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:44\n                \n            \n\n\n            \n                \n                    Gets the rate of the last minute.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get5MinuteRate\n                        \n                    \n                \n            \n            \n                \nget5MinuteRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:36\n                \n            \n\n\n            \n                \n                    Gets the rate of the last 5 minutes.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCount\n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:20\n                \n            \n\n\n            \n                \n                    Gets the total number of events.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMeanRate\n                        \n                    \n                \n            \n            \n                \ngetMeanRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:52\n                \n            \n\n\n            \n                \n                    Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n  /**\n   * Gets the total number of events.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getCount(): number;\n\n  /**\n   * Gets the rate of the last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get15MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get5MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last minute.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get1MinuteRate(): number;\n\n  /**\n   * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getMeanRate(): number;\n\n}\n\n/**\n * Helper interface for serialized {@link Meter} metrics - represents a snapshot of the rates of a {@link Meter}.\n *\n * @export\n * @interface MeteredRates\n */\nexport interface MeteredRates {\n  [rate: number]: number;\n}\n\n/**\n * Serializable version of a {@link Meter}.\n *\n * @export\n * @interface SerializableMetered\n * @extends {SerializableMetric}\n */\nexport interface SerializableMetered extends SerializableMetric {\n  /**\n   * Total count of events reported.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  count: number;\n  /**\n   * mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  meanRate: number;\n  /**\n   * Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n   *\n   * @type {MeteredRates}\n   * @memberof SerializableMetered\n   */\n  rates: MeteredRates;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MeteredRates.html":{"url":"interfaces/MeteredRates.html","title":"interface - MeteredRates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MeteredRates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metered.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for serialized Meter metrics - represents a snapshot of the rates of a Meter.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [rate: number]:        number\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:62\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n  /**\n   * Gets the total number of events.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getCount(): number;\n\n  /**\n   * Gets the rate of the last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get15MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get5MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last minute.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get1MinuteRate(): number;\n\n  /**\n   * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getMeanRate(): number;\n\n}\n\n/**\n * Helper interface for serialized {@link Meter} metrics - represents a snapshot of the rates of a {@link Meter}.\n *\n * @export\n * @interface MeteredRates\n */\nexport interface MeteredRates {\n  [rate: number]: number;\n}\n\n/**\n * Serializable version of a {@link Meter}.\n *\n * @export\n * @interface SerializableMetered\n * @extends {SerializableMetric}\n */\nexport interface SerializableMetered extends SerializableMetric {\n  /**\n   * Total count of events reported.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  count: number;\n  /**\n   * mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  meanRate: number;\n  /**\n   * Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n   *\n   * @type {MeteredRates}\n   * @memberof SerializableMetered\n   */\n  rates: MeteredRates;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metric.html":{"url":"interfaces/Metric.html","title":"interface - Metric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Metric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metric.ts\n        \n\n\n            \n                Description\n            \n            \n                Representation of a metric.\n\n            \n\n            \n                Extends\n            \n            \n                        Groupable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getDescription\n                                    \n                                \n                                \n                                    \n                                        getName\n                                    \n                                \n                                \n                                    \n                                        setDescription\n                                    \n                                \n                                \n                                    \n                                        setName\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDescription\n                        \n                    \n                \n            \n            \n                \ngetDescription()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:135\n                \n            \n\n\n            \n                \n                    Gets the description of the metric.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getName\n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:118\n                \n            \n\n\n            \n                \n                    Gets the name of the metric.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setDescription\n                        \n                    \n                \n            \n            \n                \nsetDescription(description: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:144\n                \n            \n\n\n            \n                \n                    Sets the description of the metric.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setName\n                        \n                    \n                \n            \n            \n                \nsetName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:127\n                \n            \n\n\n            \n                \n                    Sets the name of the metric.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { mapToMetadata, Metadata, MetadataContainer } from \"./metadata-container\";\nimport { mapToTags, Taggable, Tags } from \"./taggable\";\n\n/**\n * Determines if the metric passed is a {@link SerializableMetric} or not.\n *\n * @export\n * @param {(Groupable | MetadataContainer | Taggable | Metric | SerializableMetric)} metric\n * @returns {metric is SerializableMetric}\n */\nexport function isSerializableMetric(\n  metric: Groupable | MetadataContainer | Taggable | Metric | SerializableMetric): metric is SerializableMetric {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getGroup && typeof anyMetric.getGroup === \"function\") ||\n    (anyMetric.getMetadataMap && typeof anyMetric.getMetadataMap === \"function\") ||\n    (anyMetric.getTags && typeof anyMetric.getTags === \"function\") ||\n    (anyMetric.getName && typeof anyMetric.getName === \"function\")) {\n    return false;\n  }\n  return typeof anyMetric.name === \"string\";\n}\n\n/**\n * Convenience method the get the name of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricName(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.name;\n  } else {\n    return metric.getName();\n  }\n}\n\n/**\n * Convenience method the get the description of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricDescription(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.description;\n  } else {\n    return metric.getDescription();\n  }\n}\n\n/**\n * Convenience method the get the group of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Groupable | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricGroup(metric: Groupable | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.group;\n  } else {\n    return metric.getGroup();\n  }\n}\n\n/**\n * Convenience method the get the tags of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Taggable | SerializableMetric)} metric\n * @returns {Tags}\n */\nexport function getMetricTags(metric: Taggable | SerializableMetric): Tags {\n  if (isSerializableMetric(metric)) {\n    return (metric.tags as any) as Tags;\n  } else {\n    return mapToTags(metric.getTags());\n  }\n}\n\n/**\n * Convenience method the get the metadata of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(MetadataContainer | SerializableMetric)} metric\n * @returns {Metadata}\n */\nexport function getMetricMetadata(metric: MetadataContainer | SerializableMetric): Metadata {\n  if (isSerializableMetric(metric)) {\n    return metric.metadata;\n  } else {\n    return mapToMetadata(metric.getMetadataMap());\n  }\n}\n\n/**\n * Representation of a metric.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {MetadataContainer}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n  /**\n   * Gets the name of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getName(): string;\n\n  /**\n   * Sets the name of the metric.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Metric\n   */\n  setName(name: string): this;\n\n  /**\n   * Gets the description of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getDescription(): string;\n\n  /**\n   * Sets the description of the metric.\n   *\n   * @param {string} description\n   * @returns {this}\n   * @memberof Metric\n   */\n  setDescription(description: string): this;\n\n}\n\n/**\n * A {@link Metric} with public fields for convenient use after serialization.\n *\n * @export\n * @interface SerializableMetric\n * @extends {Metric}\n */\nexport interface SerializableMetric extends Metric {\n  /**\n   * Description of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  description: string;\n  /**\n   * Group of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  group: string;\n  /**\n   * Metadata map of the metric.\n   *\n   * @type {Metadata}\n   * @memberof SerializableMetric\n   */\n  metadata: Metadata;\n  /**\n   * name of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  name: string;\n  /**\n   * Tags of the metric.\n   *\n   * @type {Tags}\n   * @memberof SerializableMetric\n   */\n  tags: Tags;\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set description\n * - get / set tags\n * - get / set metadata\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n * @implements {SerializableMetric}\n */\nexport abstract class BaseMetric implements Metric, SerializableMetric {\n\n  /**\n   * A static number instance to give an unique id within an application instance.\n   * This counter is only unique per process, forked processes start from 0.\n   *\n   * @private\n   * @static\n   * @memberof BaseMetric\n   */\n  private static COUNTER = 0;\n\n  /**\n   * The unique id of this metric instance.\n   *\n   * @type {number}\n   * @memberof BaseMetric\n   */\n  public readonly id: number = BaseMetric.COUNTER++;\n  /**\n   * The group set to this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public group: string;\n  /**\n   * The name of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public name: string;\n  /**\n   * The description of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public description: string;\n  /**\n   * The metadata associated with an instance of class.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected metadataMap: Map = new Map();\n  /**\n   * Maps of tags for this metric.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected tagMap: Map = new Map();\n\n  public get metadata(): Metadata {\n    return mapToMetadata(this.metadataMap);\n  }\n\n  public get tags(): Tags {\n    return mapToTags(this.tagMap);\n  }\n\n  public getMetadataMap(): Map {\n    return this.metadataMap;\n  }\n\n  public getMetadata(name: string): T {\n    return this.metadataMap.get(name) as T;\n  }\n\n  public removeMetadata(name: string): T {\n    const value = this.metadataMap.get(name) as T;\n    this.metadataMap.delete(name);\n    return value;\n  }\n\n  public setMetadata(name: string, value: T): this {\n    this.metadataMap.set(name, value);\n    return this;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  public getGroup(): string {\n    return this.group;\n  }\n\n  public setGroup(group: string): this {\n    this.group = group;\n    return this;\n  }\n\n  public getTags(): Map {\n    return this.tagMap;\n  }\n\n  public getTag(name: string): string {\n    return this.tagMap.get(name);\n  }\n\n  public setTag(name: string, value: string): this {\n    this.tagMap.set(name, value);\n    return this;\n  }\n\n  public setTags(tags: Map): this {\n    this.tagMap = tags;\n    return this;\n  }\n\n  public addTags(tags: Map): this {\n    tags.forEach((value, key) => this.tagMap.set(key, value));\n    return this;\n  }\n\n  public removeTag(name: string): this {\n    this.tagMap.delete(name);\n    return this;\n  }\n\n  public removeTags(...names: string[]): this {\n    names.forEach((name) => this.removeTag(name));\n    return this;\n  }\n\n  public toString(): string {\n    if (this.group) {\n      return `${this.group}.${this.name}`;\n    }\n    return this.name;\n  }\n\n  /**\n   * Generates a serialized version of this metric.\n   *\n   * @returns {*}\n   * @memberof BaseMetric\n   */\n  public toJSON(): any {\n    return {\n      description: this.getDescription(),\n      group: this.getGroup(),\n      metadata: this.metadata,\n      name: this.getName(),\n      tags: this.tags,\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-entry.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility interface to track report-timestamps and -values of metric instances.\nThis is directly linked to the minimum-reporting timeout of the BaseReporter,\nwhich ensures that a certain value gets reported at least in a certain amount of time\ne.g. every minute without the value having changed. And on the other hand\nto not report / include values that haven't changed.\nAn example for this is the health status of an application (a gauge: 1 means healthy, 0 means unhealthy)\nwhich you normally want to report every minute for your graphs but should not\nnecessarily be included in every reporting run with the same value.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastReport\n                                        \n                                \n                                \n                                        \n                                            lastValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastReport:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp of the latest report.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    value that got reported as latest.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Utility interface to track report-timestamps and -values of metric instances.\n * This is directly linked to the minimum-reporting timeout of the {@link BaseReporter},\n * which ensures that a certain value gets reported at least in a certain amount of time\n * e.g. every minute without the value having changed. And on the other hand\n * to not report / include values that haven't changed.\n *\n * An example for this is the health status of an application (a gauge: 1 means healthy, 0 means unhealthy)\n * which you normally want to report every minute for your graphs but should not\n * necessarily be included in every reporting run with the same value.\n *\n * @interface MetricEntry\n */\nexport interface MetricEntry {\n  /**\n   * timestamp of the latest report.\n   *\n   * @type {number}\n   * @memberof MetricEntry\n   */\n  lastReport: number;\n  /**\n   * value that got reported as latest.\n   *\n   * @type {number}\n   * @memberof MetricEntry\n   */\n  lastValue: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistration.html":{"url":"classes/MetricRegistration.html","title":"class - MetricRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-registry.ts\n        \n\n\n            \n                Description\n            \n            \n                Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                metricRef\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(metricRef: T)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:68\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRef\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metricRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:61\n                        \n                    \n\n            \n                \n                    The metric instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:68\n                        \n                    \n\n            \n                \n                    The name the metric is registered with.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Clock, StdClock } from './clock'\nimport { Counter, MonotoneCounter } from './counter'\nimport { Gauge } from './gauge'\nimport { HdrHistogram } from './hdr-histogram'\nimport { Histogram } from './histogram'\nimport { Meter } from './meter'\nimport { MetricRegistryListener } from './metric-registry-listener'\nimport { MetricSet } from './metric-set'\nimport { Buckets } from './model/counting'\nimport { BaseMetric, Metric } from './model/metric'\nimport { Reservoir, SlidingWindowReservoir } from './model/reservoir'\nimport { Timer } from './timer'\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n  /**\n   * Creates an instance of MetricRegistryListenerRegistration.\n   *\n   * @param {MetricRegistryListener} listener\n   * @param {MetricRegistry} registry\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public constructor (private readonly listener: MetricRegistryListener, private readonly registry: MetricRegistry) {}\n\n  /**\n   * Removes the managed listener from the metric registry.\n   *\n   * @returns {this}\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public remove (): this {\n    this.registry.removeListener(this.listener)\n    return this\n  }\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n  /**\n   * The metric instance.\n   *\n   * @type {T}\n   * @memberof MetricRegistration\n   */\n  public metricRef: T\n  /**\n   * The name the metric is registered with.\n   *\n   * @type {string}\n   * @memberof MetricRegistration\n   */\n  public name: string\n\n  /**\n   * Creates an instance of MetricRegistration.\n   *\n   * @param {T} metricRef\n   * @memberof MetricRegistration\n   */\n  public constructor (metricRef: T) {\n    this.metricRef = metricRef\n    this.name = metricRef.getName()\n  }\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n  /**\n   * Determines if the specified object is a {@link Counter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Counter}\n   * @memberof MetricRegistry\n   */\n  public static isCounter (instance: any): instance is Counter {\n    return instance instanceof Counter || instance.metricRef instanceof Counter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isPureMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance)\n  }\n\n  /**\n   * Determines if the specified object is a {@link Histogram} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Histogram}\n   * @memberof MetricRegistry\n   */\n  public static isHistogram (instance: any): instance is Histogram {\n    return instance instanceof Histogram || instance.metricRef instanceof Histogram\n  }\n\n  /**\n   * Determines if the specified object is a {@link Meter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Meter}\n   * @memberof MetricRegistry\n   */\n  public static isMeter (instance: any): instance is Meter {\n    return instance instanceof Meter || instance.metricRef instanceof Meter\n  }\n\n  /**\n   * Determines if the specified object is a {@link Timer} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Timer}\n   * @memberof MetricRegistry\n   */\n  public static isTimer (instance: any): instance is Timer {\n    return instance instanceof Timer || instance.metricRef instanceof Timer\n  }\n\n  /**\n   * Determines if the specified object is a {@link Gauge} or references one.\n   *\n   * @static\n   * @template T\n   * @param {*} instance\n   * @returns {instance is Gauge}\n   * @memberof MetricRegistry\n   */\n  public static isGauge (instance: any): instance is Gauge {\n    const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function\n    const gaugeRegistration = !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function\n    return directGauge || gaugeRegistration\n  }\n\n  /**\n   * Determines if the specified object is a {@link MetricSet}.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MetricSet}\n   * @memberof MetricRegistry\n   */\n  public static isMetricSet (instance: any): instance is MetricSet {\n    return !!instance.getMetrics && instance.getMetrics instanceof Function\n  }\n\n  /**\n   * Standard function to generate the name for a metric.\n   *\n   * @private\n   * @static\n   * @param {string} baseName\n   * @param {string} metricName\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private static defaultNameFactory (baseName: string, metricName: string, metric: Metric): string {\n    return baseName + '.' + metricName\n  }\n\n  /**\n   * Default clock instance if no clock instance if provided.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof MetricRegistry\n   */\n  private defaultClock: Clock = new StdClock()\n  /**\n   * A collection metric references.\n   *\n   * @private\n   * @type {Array>}\n   * @memberof MetricRegistry\n   */\n  private readonly metrics: Array> = []\n  /**\n   * The name factory to build metric names.\n   *\n   * @private\n   * @type {NameFactory}\n   * @memberof MetricRegistry\n   */\n  private nameFactory: NameFactory = MetricRegistry.defaultNameFactory\n  /**\n   * A collection of metric listeners.\n   *\n   * @private\n   * @type {MetricRegistryListener[]}\n   * @memberof MetricRegistry\n   */\n  private readonly listeners: MetricRegistryListener[] = []\n\n  /**\n   * Adds the specified listener and returns the corresponding\n   * registration object.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {MetricRegistryListenerRegistration}\n   * @memberof MetricRegistry\n   */\n  public addListener (listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n    this.listeners.push(listener)\n    return new MetricRegistryListenerRegistration(listener, this)\n  }\n\n  /**\n   * Removes a listener manually.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeListener (listener: MetricRegistryListener): this {\n    const index = this.listeners.indexOf(listener)\n    if (index > -1) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.listeners[index]\n    }\n    return this\n  }\n\n  /**\n   * Sets the default name factory for metric instances.\n   *\n   * @param {NameFactory} nameFactory\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setNameFactory (nameFactory: NameFactory): this {\n    this.nameFactory = nameFactory\n    return this\n  }\n\n  /**\n   * Gets the default clock.\n   *\n   * @returns {Clock}\n   * @memberof MetricRegistry\n   */\n  public getDefaultClock (): Clock {\n    return this.defaultClock\n  }\n\n  /**\n   * Sets the default clock.\n   *\n   * @param {Clock} defaultClock\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setDefaultClock (defaultClock: Clock): this {\n    this.defaultClock = defaultClock\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCounterList} instead\n   */\n  public getCounters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isCounter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Counter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugeList} instead\n   */\n  public getGauges (): Map> {\n    const map: Map> = new Map()\n    this.metrics\n      .filter(MetricRegistry.isGauge)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramList} instead\n   */\n  public getHistograms (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMeterList} instead\n   */\n  public getMeters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isMeter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Meter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimerList} instead\n   */\n  public getTimers (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isTimer)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Timer))\n    return map\n  }\n\n  /**\n   * Gets the list of all managed counter instances.\n   *\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCounterList (): Counter[] {\n    return this.metrics\n      .filter(MetricRegistry.isCounter)\n      .map((registration) => registration.metricRef as Counter)\n  }\n\n  /**\n   * Gets the list of all managed monotone counter instances.\n   *\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCounterList (): MonotoneCounter[] {\n    return this.metrics\n      .filter(MetricRegistry.isPureMonotoneCounter)\n      .map((registration) => registration.metricRef as MonotoneCounter)\n  }\n\n  /**\n   * Gets the list of all managed gauge instances.\n   *\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugeList (): Array> {\n    return this.metrics\n      .filter(MetricRegistry.isGauge)\n      .map((registration) => registration.metricRef as Gauge)\n  }\n\n  /**\n   * Gets the list of all managed histogram instances.\n   *\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramList (): Histogram[] {\n    return this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .map((registration) => registration.metricRef as Histogram)\n  }\n\n  /**\n   * Gets the list of all managed meter instances.\n   *\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMeterList (): Meter[] {\n    return this.metrics\n      .filter(MetricRegistry.isMeter)\n      .map((registration) => registration.metricRef as Meter)\n  }\n\n  /**\n   * Gets the list of all managed timer instances.\n   *\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimerList (): Timer[] {\n    return this.metrics\n      .filter(MetricRegistry.isTimer)\n      .map((registration) => registration.metricRef as Timer)\n  }\n\n  /**\n   * Gets a mapping of all managed metric instances regardless of the type.\n   *\n   * @returns {Map}\n   * @memberof MetricRegistry\n   */\n  public getMetrics (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .forEach((registration) => map.set(registration.name, registration.metricRef))\n    return map\n  }\n\n  /**\n   * Gets a list of all managed metric instances regardless of the type.\n   *\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricList (): Metric[] {\n    return this.metrics.map((metric) => metric.metricRef)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n   */\n  public getMetric (name: string): Metric {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCountersByName} instead\n   */\n  public getCounter (name: string): Counter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n   */\n  public getGauge (name: string): Gauge {\n    return this.getFirstByName>(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n   */\n  public getHistogram (name: string): Histogram {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetersByName} instead\n   */\n  public getMeter (name: string): Meter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimersByName} instead\n   */\n  public getTimer (name: string): Timer {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * Gets all managed metric instance by name.\n   *\n   * @param {string} name\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricsByName (name: string): Metric[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed counter instances by name.\n   *\n   * @param {string} name\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCountersByName (name: string): Counter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed monotone counter instances by name.\n   *\n   * @param {string} name\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCountersByName (name: string): MonotoneCounter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed gauge instances by name.\n   *\n   * @param {string} name\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugesByName (name: string): Array> {\n    return this.getByName>(name)\n  }\n\n  /**\n   * Gets all managed histogram instances by name.\n   *\n   * @param {string} name\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramsByName (name: string): Histogram[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed meter instances by name.\n   *\n   * @param {string} name\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMetersByName (name: string): Meter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed timer instances by name.\n   *\n   * @param {string} name\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimersByName (name: string): Timer[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMetric (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    if (metrics.length > 0) {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metrics[0], 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metrics[0])\n    }\n    return this\n  }\n\n  /**\n   * Removes all managed metric instances by name regardless of the type.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeMetrics (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    metrics.forEach((metric) => {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metric, 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metric)\n    })\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeCounter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeGauge (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeHistogram (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMeter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeTimer (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * Builds a new counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {Counter}\n   * @memberof MetricRegistry\n   */\n  public newCounter (name: string, group: string = null, description: string = null): Counter {\n    const counter = new Counter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new monotone counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public newMonotoneCounter (name: string, group: string = null, description: string = null): MonotoneCounter {\n    const counter = new MonotoneCounter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new meter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {number} [sampleRate=1]\n   * @param {string} [description=null]\n   * @returns {Meter}\n   * @memberof MetricRegistry\n   */\n  public newMeter (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    sampleRate: number = 1,\n    description: string = null): Meter {\n    const meter = new Meter(clock, sampleRate, name, description)\n    this.registerMetric(meter, group, description)\n    return meter\n  }\n\n  /**\n   * Builds a new hdr-histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {number} [lowest=1] is the lowest possible number that can be recorded\n   * @param {number} [max=100] is the maximum number that can be recorded\n   * @param {number} [figures=3]\n   *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {HdrHistogram}\n   * @memberof MetricRegistry\n   */\n  public newHdrHistogram (\n    name: string,\n    lowest: number = 1,\n    max: number = 100,\n    figures: number = 3,\n    group: string = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): HdrHistogram {\n    const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Histogram}\n   * @memberof MetricRegistry\n   */\n  public newHistogram (\n    name: string,\n    group: string = null,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Histogram {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const histogram = new Histogram(reservoir, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new timer with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Timer}\n   * @memberof MetricRegistry\n   */\n  public newTimer (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Timer {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const timer = new Timer(clock, reservoir, name, description, buckets)\n    this.registerMetric(timer, group, description)\n    return timer\n  }\n\n  /**\n   * Registers the given metric under it's name in this registry.\n   *\n   * If the metric is a metric-set the child-metrics are\n   * registered using their names the name of the metric-set is set as group.\n   *\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public registerMetric (metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(metric.getName(), metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetricList().forEach((m: Metric) => {\n        m.setGroup(metric.getName())\n        this.registerMetric(m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Registers a metric by name\n   *\n   * @param {string} name\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @deprecated since version 1.5 - use {@link registerMetric} instead\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public register (name: string, metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    metric.setName(this.generateName(name, metric))\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(name, metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetrics().forEach((m: Metric) => {\n        const metricName = this.nameFactory(name, m.getName(), m)\n        this.register(metricName, m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Finds the first metric instance by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T}\n   * @memberof MetricRegistry\n   */\n  private getFirstByName (name: string): T {\n    const arr: Metric[] = this.getByName(name)\n    if (arr.length === 0) {\n      return null\n    }\n    return arr[0] as T\n  }\n\n  /**\n   * Gets all metric instances by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T[]}\n   * @memberof MetricRegistry\n   */\n  private getByName (name: string): T[] {\n    return this.metrics\n      .filter((metric) => metric.name === name)\n      .map((metric) => metric.metricRef) as T[]\n  }\n\n  /**\n   * Builds the name of the metric.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private generateName (name: string, metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${name}`\n    }\n    return name\n  }\n\n  /**\n   * Invokes all metric listeners when a new metric was added.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricAdded (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricAdded(name, metric))\n  }\n\n  /**\n   * Invokes all metric listeners when a metric was removed.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricRemoved (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricRemoved(name, metric))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricRegistryListener.html":{"url":"interfaces/MetricRegistryListener.html","title":"interface - MetricRegistryListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetricRegistryListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-registry-listener.ts\n        \n\n\n            \n                Description\n            \n            \n                A listener interface to keep track of metric insertion / removal.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        metricAdded\n                                    \n                                \n                                \n                                    \n                                        metricRemoved\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        metricAdded\n                        \n                    \n                \n            \n            \n                \nmetricAdded(name: string, metric: Metric)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-registry-listener.ts:19\n                \n            \n\n\n            \n                \n                    Called when a metric was added to a MetricRegistry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the metric\n\n                                    \n                                \n                                \n                                    metric\n                                    \n                                                Metric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        metric object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metricRemoved\n                        \n                    \n                \n            \n            \n                \nmetricRemoved(name: string, metric: Metric)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-registry-listener.ts:28\n                \n            \n\n\n            \n                \n                    Called when a metric was removed from a MetricRegistry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metric\n                                    \n                                                Metric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Metric } from './model/metric'\n\n/**\n * A listener interface to keep track of metric insertion / removal.\n *\n * @export\n * @interface MetricRegistryListener\n */\nexport interface MetricRegistryListener {\n  /**\n   * Called when a metric was added to a {@link MetricRegistry}.\n   *\n   * @param {string} name name of the metric\n   * @param {Metric} metric metric object\n   * @memberof MetricRegistryListener\n   */\n  metricAdded(name: string, metric: Metric): void\n\n  /**\n   * Called when a metric was removed from a {@link MetricRegistry}.\n   *\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistryListener\n   */\n  metricRemoved(name: string, metric: Metric): void\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistryListenerRegistration.html":{"url":"classes/MetricRegistryListenerRegistration.html","title":"class - MetricRegistryListenerRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistryListenerRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-registry.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a registration of a MetricRegistryListener.\nThis instance can be used to safely remove the listener from registry again.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(listener: MetricRegistryListener, registry: MetricRegistry)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistryListenerRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listener\n                                                  \n                                                        \n                                                                        MetricRegistryListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registry\n                                                  \n                                                        \n                                                                        MetricRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:41\n                \n            \n\n\n            \n                \n                    Removes the managed listener from the metric registry.\n\n\n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Clock, StdClock } from './clock'\nimport { Counter, MonotoneCounter } from './counter'\nimport { Gauge } from './gauge'\nimport { HdrHistogram } from './hdr-histogram'\nimport { Histogram } from './histogram'\nimport { Meter } from './meter'\nimport { MetricRegistryListener } from './metric-registry-listener'\nimport { MetricSet } from './metric-set'\nimport { Buckets } from './model/counting'\nimport { BaseMetric, Metric } from './model/metric'\nimport { Reservoir, SlidingWindowReservoir } from './model/reservoir'\nimport { Timer } from './timer'\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n  /**\n   * Creates an instance of MetricRegistryListenerRegistration.\n   *\n   * @param {MetricRegistryListener} listener\n   * @param {MetricRegistry} registry\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public constructor (private readonly listener: MetricRegistryListener, private readonly registry: MetricRegistry) {}\n\n  /**\n   * Removes the managed listener from the metric registry.\n   *\n   * @returns {this}\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public remove (): this {\n    this.registry.removeListener(this.listener)\n    return this\n  }\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n  /**\n   * The metric instance.\n   *\n   * @type {T}\n   * @memberof MetricRegistration\n   */\n  public metricRef: T\n  /**\n   * The name the metric is registered with.\n   *\n   * @type {string}\n   * @memberof MetricRegistration\n   */\n  public name: string\n\n  /**\n   * Creates an instance of MetricRegistration.\n   *\n   * @param {T} metricRef\n   * @memberof MetricRegistration\n   */\n  public constructor (metricRef: T) {\n    this.metricRef = metricRef\n    this.name = metricRef.getName()\n  }\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n  /**\n   * Determines if the specified object is a {@link Counter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Counter}\n   * @memberof MetricRegistry\n   */\n  public static isCounter (instance: any): instance is Counter {\n    return instance instanceof Counter || instance.metricRef instanceof Counter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isPureMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance)\n  }\n\n  /**\n   * Determines if the specified object is a {@link Histogram} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Histogram}\n   * @memberof MetricRegistry\n   */\n  public static isHistogram (instance: any): instance is Histogram {\n    return instance instanceof Histogram || instance.metricRef instanceof Histogram\n  }\n\n  /**\n   * Determines if the specified object is a {@link Meter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Meter}\n   * @memberof MetricRegistry\n   */\n  public static isMeter (instance: any): instance is Meter {\n    return instance instanceof Meter || instance.metricRef instanceof Meter\n  }\n\n  /**\n   * Determines if the specified object is a {@link Timer} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Timer}\n   * @memberof MetricRegistry\n   */\n  public static isTimer (instance: any): instance is Timer {\n    return instance instanceof Timer || instance.metricRef instanceof Timer\n  }\n\n  /**\n   * Determines if the specified object is a {@link Gauge} or references one.\n   *\n   * @static\n   * @template T\n   * @param {*} instance\n   * @returns {instance is Gauge}\n   * @memberof MetricRegistry\n   */\n  public static isGauge (instance: any): instance is Gauge {\n    const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function\n    const gaugeRegistration = !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function\n    return directGauge || gaugeRegistration\n  }\n\n  /**\n   * Determines if the specified object is a {@link MetricSet}.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MetricSet}\n   * @memberof MetricRegistry\n   */\n  public static isMetricSet (instance: any): instance is MetricSet {\n    return !!instance.getMetrics && instance.getMetrics instanceof Function\n  }\n\n  /**\n   * Standard function to generate the name for a metric.\n   *\n   * @private\n   * @static\n   * @param {string} baseName\n   * @param {string} metricName\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private static defaultNameFactory (baseName: string, metricName: string, metric: Metric): string {\n    return baseName + '.' + metricName\n  }\n\n  /**\n   * Default clock instance if no clock instance if provided.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof MetricRegistry\n   */\n  private defaultClock: Clock = new StdClock()\n  /**\n   * A collection metric references.\n   *\n   * @private\n   * @type {Array>}\n   * @memberof MetricRegistry\n   */\n  private readonly metrics: Array> = []\n  /**\n   * The name factory to build metric names.\n   *\n   * @private\n   * @type {NameFactory}\n   * @memberof MetricRegistry\n   */\n  private nameFactory: NameFactory = MetricRegistry.defaultNameFactory\n  /**\n   * A collection of metric listeners.\n   *\n   * @private\n   * @type {MetricRegistryListener[]}\n   * @memberof MetricRegistry\n   */\n  private readonly listeners: MetricRegistryListener[] = []\n\n  /**\n   * Adds the specified listener and returns the corresponding\n   * registration object.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {MetricRegistryListenerRegistration}\n   * @memberof MetricRegistry\n   */\n  public addListener (listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n    this.listeners.push(listener)\n    return new MetricRegistryListenerRegistration(listener, this)\n  }\n\n  /**\n   * Removes a listener manually.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeListener (listener: MetricRegistryListener): this {\n    const index = this.listeners.indexOf(listener)\n    if (index > -1) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.listeners[index]\n    }\n    return this\n  }\n\n  /**\n   * Sets the default name factory for metric instances.\n   *\n   * @param {NameFactory} nameFactory\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setNameFactory (nameFactory: NameFactory): this {\n    this.nameFactory = nameFactory\n    return this\n  }\n\n  /**\n   * Gets the default clock.\n   *\n   * @returns {Clock}\n   * @memberof MetricRegistry\n   */\n  public getDefaultClock (): Clock {\n    return this.defaultClock\n  }\n\n  /**\n   * Sets the default clock.\n   *\n   * @param {Clock} defaultClock\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setDefaultClock (defaultClock: Clock): this {\n    this.defaultClock = defaultClock\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCounterList} instead\n   */\n  public getCounters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isCounter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Counter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugeList} instead\n   */\n  public getGauges (): Map> {\n    const map: Map> = new Map()\n    this.metrics\n      .filter(MetricRegistry.isGauge)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramList} instead\n   */\n  public getHistograms (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMeterList} instead\n   */\n  public getMeters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isMeter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Meter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimerList} instead\n   */\n  public getTimers (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isTimer)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Timer))\n    return map\n  }\n\n  /**\n   * Gets the list of all managed counter instances.\n   *\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCounterList (): Counter[] {\n    return this.metrics\n      .filter(MetricRegistry.isCounter)\n      .map((registration) => registration.metricRef as Counter)\n  }\n\n  /**\n   * Gets the list of all managed monotone counter instances.\n   *\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCounterList (): MonotoneCounter[] {\n    return this.metrics\n      .filter(MetricRegistry.isPureMonotoneCounter)\n      .map((registration) => registration.metricRef as MonotoneCounter)\n  }\n\n  /**\n   * Gets the list of all managed gauge instances.\n   *\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugeList (): Array> {\n    return this.metrics\n      .filter(MetricRegistry.isGauge)\n      .map((registration) => registration.metricRef as Gauge)\n  }\n\n  /**\n   * Gets the list of all managed histogram instances.\n   *\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramList (): Histogram[] {\n    return this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .map((registration) => registration.metricRef as Histogram)\n  }\n\n  /**\n   * Gets the list of all managed meter instances.\n   *\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMeterList (): Meter[] {\n    return this.metrics\n      .filter(MetricRegistry.isMeter)\n      .map((registration) => registration.metricRef as Meter)\n  }\n\n  /**\n   * Gets the list of all managed timer instances.\n   *\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimerList (): Timer[] {\n    return this.metrics\n      .filter(MetricRegistry.isTimer)\n      .map((registration) => registration.metricRef as Timer)\n  }\n\n  /**\n   * Gets a mapping of all managed metric instances regardless of the type.\n   *\n   * @returns {Map}\n   * @memberof MetricRegistry\n   */\n  public getMetrics (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .forEach((registration) => map.set(registration.name, registration.metricRef))\n    return map\n  }\n\n  /**\n   * Gets a list of all managed metric instances regardless of the type.\n   *\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricList (): Metric[] {\n    return this.metrics.map((metric) => metric.metricRef)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n   */\n  public getMetric (name: string): Metric {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCountersByName} instead\n   */\n  public getCounter (name: string): Counter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n   */\n  public getGauge (name: string): Gauge {\n    return this.getFirstByName>(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n   */\n  public getHistogram (name: string): Histogram {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetersByName} instead\n   */\n  public getMeter (name: string): Meter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimersByName} instead\n   */\n  public getTimer (name: string): Timer {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * Gets all managed metric instance by name.\n   *\n   * @param {string} name\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricsByName (name: string): Metric[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed counter instances by name.\n   *\n   * @param {string} name\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCountersByName (name: string): Counter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed monotone counter instances by name.\n   *\n   * @param {string} name\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCountersByName (name: string): MonotoneCounter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed gauge instances by name.\n   *\n   * @param {string} name\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugesByName (name: string): Array> {\n    return this.getByName>(name)\n  }\n\n  /**\n   * Gets all managed histogram instances by name.\n   *\n   * @param {string} name\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramsByName (name: string): Histogram[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed meter instances by name.\n   *\n   * @param {string} name\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMetersByName (name: string): Meter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed timer instances by name.\n   *\n   * @param {string} name\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimersByName (name: string): Timer[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMetric (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    if (metrics.length > 0) {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metrics[0], 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metrics[0])\n    }\n    return this\n  }\n\n  /**\n   * Removes all managed metric instances by name regardless of the type.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeMetrics (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    metrics.forEach((metric) => {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metric, 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metric)\n    })\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeCounter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeGauge (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeHistogram (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMeter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeTimer (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * Builds a new counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {Counter}\n   * @memberof MetricRegistry\n   */\n  public newCounter (name: string, group: string = null, description: string = null): Counter {\n    const counter = new Counter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new monotone counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public newMonotoneCounter (name: string, group: string = null, description: string = null): MonotoneCounter {\n    const counter = new MonotoneCounter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new meter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {number} [sampleRate=1]\n   * @param {string} [description=null]\n   * @returns {Meter}\n   * @memberof MetricRegistry\n   */\n  public newMeter (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    sampleRate: number = 1,\n    description: string = null): Meter {\n    const meter = new Meter(clock, sampleRate, name, description)\n    this.registerMetric(meter, group, description)\n    return meter\n  }\n\n  /**\n   * Builds a new hdr-histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {number} [lowest=1] is the lowest possible number that can be recorded\n   * @param {number} [max=100] is the maximum number that can be recorded\n   * @param {number} [figures=3]\n   *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {HdrHistogram}\n   * @memberof MetricRegistry\n   */\n  public newHdrHistogram (\n    name: string,\n    lowest: number = 1,\n    max: number = 100,\n    figures: number = 3,\n    group: string = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): HdrHistogram {\n    const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Histogram}\n   * @memberof MetricRegistry\n   */\n  public newHistogram (\n    name: string,\n    group: string = null,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Histogram {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const histogram = new Histogram(reservoir, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new timer with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Timer}\n   * @memberof MetricRegistry\n   */\n  public newTimer (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Timer {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const timer = new Timer(clock, reservoir, name, description, buckets)\n    this.registerMetric(timer, group, description)\n    return timer\n  }\n\n  /**\n   * Registers the given metric under it's name in this registry.\n   *\n   * If the metric is a metric-set the child-metrics are\n   * registered using their names the name of the metric-set is set as group.\n   *\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public registerMetric (metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(metric.getName(), metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetricList().forEach((m: Metric) => {\n        m.setGroup(metric.getName())\n        this.registerMetric(m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Registers a metric by name\n   *\n   * @param {string} name\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @deprecated since version 1.5 - use {@link registerMetric} instead\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public register (name: string, metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    metric.setName(this.generateName(name, metric))\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(name, metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetrics().forEach((m: Metric) => {\n        const metricName = this.nameFactory(name, m.getName(), m)\n        this.register(metricName, m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Finds the first metric instance by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T}\n   * @memberof MetricRegistry\n   */\n  private getFirstByName (name: string): T {\n    const arr: Metric[] = this.getByName(name)\n    if (arr.length === 0) {\n      return null\n    }\n    return arr[0] as T\n  }\n\n  /**\n   * Gets all metric instances by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T[]}\n   * @memberof MetricRegistry\n   */\n  private getByName (name: string): T[] {\n    return this.metrics\n      .filter((metric) => metric.name === name)\n      .map((metric) => metric.metricRef) as T[]\n  }\n\n  /**\n   * Builds the name of the metric.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private generateName (name: string, metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${name}`\n    }\n    return name\n  }\n\n  /**\n   * Invokes all metric listeners when a new metric was added.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricAdded (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricAdded(name, metric))\n  }\n\n  /**\n   * Invokes all metric listeners when a metric was removed.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricRemoved (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricRemoved(name, metric))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricReporterOptions.html":{"url":"interfaces/MetricReporterOptions.html","title":"interface - MetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for the MetricReporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            clock\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            clusterOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            minReportingTimeout\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tags\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clock\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clock:         Clock\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Clock\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clusterOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clusterOptions:         ClusterOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ClusterOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Options for clustering support.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minReportingTimeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minReportingTimeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Timeout in minutes a metric need to be included in the report without having changed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     Map\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Map\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport {\n  Worker\n} from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\nconst defaultCluster = (cluster.default || cluster) as any\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = defaultCluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!defaultCluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => defaultCluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSet.html":{"url":"interfaces/MetricSet.html","title":"interface - MetricSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetricSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-set.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a collection of metric instances as a single metric.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMetricList\n                                    \n                                \n                                \n                                    \n                                        getMetrics\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMetricList\n                        \n                    \n                \n            \n            \n                \ngetMetricList()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-set.ts:29\n                \n            \n\n\n            \n                \n                    Gets a list of all Metric instances.\n\n\n                    \n                    \n                    \n                        Returns :         Metric[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMetrics\n                        \n                    \n                \n            \n            \n                \n                    [object Object],[object Object],[object Object]\n                \n            \n            \n                \ngetMetrics()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-set.ts:21\n                \n            \n\n\n            \n                \n                    Gets a mapping from names to metric instances.\n\n\n                    \n                    \n                    \n                        Returns :         Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Metric } from './model/metric'\n\n/**\n * Represents a collection of metric instances as a single metric.\n *\n * @export\n * @interface MetricSet\n * @extends {Metric}\n */\nexport interface MetricSet extends Metric {\n\n  /**\n   * Gets a mapping from names to metric instances.\n   *\n   * @deprecated since version 1.3 - use {@link getMetricList} instead\n   * @returns {Map}\n   * @memberof MetricSet\n   */\n  getMetrics(): Map\n\n  /**\n   * Gets a list of all {@link Metric} instances.\n   *\n   * @returns {Metric[]}\n   * @memberof MetricSet\n   */\n  getMetricList(): Metric[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSetReportContext.html":{"url":"interfaces/MetricSetReportContext.html","title":"interface - MetricSetReportContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetricSetReportContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-set-report-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for reporting runs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            metrics\n                                        \n                                \n                                \n                                        \n                                            overallCtx\n                                        \n                                \n                                \n                                        \n                                            registry\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current date.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metrics\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metrics:     M[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     M[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The array of metric instance that is currently reported.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overallCtx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        overallCtx:         OverallReportContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverallReportContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The OverallReportContext this context is running in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        registry\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        registry:         MetricRegistry | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricRegistry | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The registry the metric are registered in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         MetricType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the metrics in the #metrics array.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n  /**\n   * The OverallReportContext this context is running in.\n   *\n   * @type {OverallReportContext}\n   * @memberof ReportingContext\n   */\n  overallCtx: OverallReportContext;\n  /**\n   * The array of metric instance that is currently reported.\n   *\n   * @type {M[]}\n   * @memberof ReportingContext\n   */\n  metrics: M[];\n  /**\n   * The registry the metric are registered in.\n   *\n   * @type {MetricRegistry | null}\n   * @memberof ReportingContext\n   */\n  readonly registry: MetricRegistry | null;\n  /**\n   * The current date.\n   *\n   * @type {Date}\n   * @memberof ReportingContext\n   */\n  readonly date: Date;\n  /**\n   * The type of the metrics in the {@link #metrics} array.\n   *\n   * @type {MetricType}\n   * @memberof ReportingContext\n   */\n  readonly type: MetricType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MonotoneCounter.html":{"url":"classes/MonotoneCounter.html","title":"class - MonotoneCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MonotoneCounter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/counter.ts\n        \n\n\n            \n                Description\n            \n            \n                A monotonically increasing number.\nThe initial value is 0.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseMetric\n            \n\n            \n                Implements\n            \n            \n                            Counting\n                            Metric\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                count\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadataMap\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Protected\n                                tagMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getCount\n                            \n                            \n                                    Public\n                                increment\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/counter.ts:24\n                            \n                        \n\n                \n                    \n                            Creates an instance of MonotoneCounter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional name of the counter\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional description of the counter\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/counter.ts:24\n                        \n                    \n\n            \n                \n                    Holds the current value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        COUNTER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:217\n\n                        \n                    \n\n            \n                \n                    A static number instance to give an unique id within an application instance.\nThis counter is only unique per process, forked processes start from 0.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:249\n\n                        \n                    \n\n            \n                \n                    The description of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:233\n\n                        \n                    \n\n            \n                \n                    The group set to this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : BaseMetric.COUNTER++\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:225\n\n                        \n                    \n\n            \n                \n                    The unique id of this metric instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        metadataMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:257\n\n                        \n                    \n\n            \n                \n                    The metadata associated with an instance of class.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:241\n\n                        \n                    \n\n            \n                \n                    The name of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        tagMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:265\n\n                        \n                    \n\n            \n                \n                    Maps of tags for this metric.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCount\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCount()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:60\n                \n            \n\n\n            \n                \n                    Gets the current count.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        increment\n                        \n                    \n                \n            \n            \n                \n                    \n                    increment(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:46\n                \n            \n\n\n            \n                \n                    Increases the current count by the given value - a negative value is causing an error.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:70\n                \n            \n\n\n            \n                \n                    Sets the current count to 0.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:81\n\n                \n            \n\n\n            \n                \n                    Same as BaseMetric, also adding count property.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:339\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDescription()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:303\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:312\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:279\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadataMap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadataMap()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:275\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:325\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:321\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:283\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:344\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:349\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDescription(description: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:307\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroup(group: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:316\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:289\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setName\n                        \n                    \n                \n            \n            \n                \n                    \n                    setName(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:329\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:334\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:354\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Counting } from './model/counting'\nimport { BaseMetric, Metric } from './model/metric'\n\n/**\n * A monotonically increasing number.\n * The initial value is 0.\n *\n * @export\n * @class MonotoneCounter\n * @extends {BaseMetric}\n * @implements {Counting}\n * @implements {Metric}\n */\nexport class MonotoneCounter extends BaseMetric implements Counting, Metric {\n  /**\n   * Holds the current value.\n   *\n   * @private\n   * @type {number}\n   * @memberof MonotoneCounter\n   */\n  protected count: number = 0\n\n  /**\n   * Creates an instance of MonotoneCounter.\n   *\n   * @param {string} [name] optional name of the counter\n   * @param {string} [description] optional description of the counter\n   * @memberof MonotoneCounter\n   */\n  public constructor (name?: string, description?: string) {\n    super()\n    this.name = name\n    this.description = description\n  }\n\n  /**\n   * Increases the current count by the given value - a negative value is causing an error.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof MonotoneCounter\n   */\n  public increment (value: number): this {\n    if (value \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovingAverage.html":{"url":"interfaces/MovingAverage.html","title":"interface - MovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/moving-average.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an average value which depends on an alpha factor.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAlpha\n                                    \n                                \n                                \n                                    \n                                        getAverage\n                                    \n                                \n                                \n                                    \n                                        tick\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlpha\n                        \n                    \n                \n            \n            \n                \ngetAlpha()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:19\n                \n            \n\n\n            \n                \n                    Gets the alpha value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAverage\n                        \n                    \n                \n            \n            \n                \ngetAverage(unit: TimeUnit)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:29\n                \n            \n\n\n            \n                \n                    Gets the average for the specified time unit -\ne.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                TimeUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tick\n                        \n                    \n                \n            \n            \n                \ntick()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:47\n                \n            \n\n\n            \n                \n                    Triggers the actual average to be updated.\nA tick represents an update event.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:38\n                \n            \n\n\n            \n                \n                    Adds the given value to the logic of the implementation.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAlpha(): number;\n\n  /**\n   * Gets the average for the specified time unit -\n   * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAverage(unit: TimeUnit): number;\n\n  /**\n   * Adds the given value to the logic of the implementation.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  update(value: number): this;\n\n  /**\n   * Triggers the actual average to be updated.\n   * A tick represents an update event.\n   *\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  tick(): this;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n  public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n  public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n  public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n  public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n  public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n  public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n  /**\n   * Alpha component (weight) of the moving average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private alpha: number;\n  /**\n   * The sampling interval.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private interval: number;\n  /**\n   * The sum of all values passed to the update function.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private sum: number = 0;\n  /**\n   * The current average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private avg: number = -1.0;\n  /**\n   * Multiplier of the time unit specified in the constructor in nanoseconds.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private timeUnitInNanoseconds: number;\n  /**\n   * The time unit of the sampling rate.\n   *\n   * @private\n   * @type {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private unit: TimeUnit;\n\n  /**\n   * Creates an instance of ExponentiallyWeightedMovingAverage.\n   *\n   * @param {number} alpha\n   * @param {number} interval\n   * @param {TimeUnit} unit\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public constructor(alpha: number, interval: number, unit: TimeUnit) {\n    this.alpha = alpha;\n    this.interval = interval;\n    this.unit = unit;\n    this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n  }\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAlpha(): number {\n    return this.alpha;\n  }\n\n  /**\n   * Gets the time unit.\n   *\n   * @returns {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getUnit(): TimeUnit {\n    return this.unit;\n  }\n\n  /**\n   * Gets the average in the specified time unit.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAverage(unit: TimeUnit): number {\n    if (this.avg === -1.0) {\n      return 0;\n    }\n    return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n  }\n\n  /**\n   * Adds the value to the current sum.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public update(value: number): this {\n    this.sum += value;\n    return this;\n  }\n\n  /**\n   * Updates the current average by multiplying the alpha value with the difference\n   * of the last average and the current average.\n   *\n   * Averages are calculated by dividing the sum through the sampling interval.\n   *\n   * If the alpha value is high the last average has more weight and vice versa.\n   *\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public tick(): this {\n    const sum = this.sum;\n    const avg = sum / this.interval;\n    this.sum -= sum;\n\n    if (this.avg === -1.0) {\n      this.avg = avg;\n    } else {\n      this.avg += this.alpha * (avg - this.avg);\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OverallReportContext.html":{"url":"interfaces/OverallReportContext.html","title":"interface - OverallReportContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OverallReportContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/overall-report-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for a reporting run.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/overall-report-context.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n  [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Percentiles.html":{"url":"classes/Percentiles.html","title":"class - Percentiles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percentiles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/Percentiles.ts\n        \n\n\n            \n                Description\n            \n            \n                List of values between 0 and 1 representing the percent boundaries for reporting.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                boundaries\n                            \n                            \n                                    Static\n                                    Readonly\n                                METADATA_NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-prometheus/lib/metrics/Percentiles.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of Percentiles.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        boundaries\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-prometheus/lib/metrics/Percentiles.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        METADATA_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'quantiles'\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-prometheus/lib/metrics/Percentiles.ts:16\n                        \n                    \n\n            \n                \n                    Name constant for assigning an instance of this class as metadata to a metric instance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support'\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n  /**\n   * Name constant for assigning an instance of this class as metadata to a metric instance.\n   *\n   * @static\n   * @memberof Percentiles\n   */\n  public static readonly METADATA_NAME = 'quantiles';\n  /**\n   * Creates an instance of Percentiles.\n   *\n   * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n   * @memberof Percentiles\n   */\n  constructor (public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]) {\n    boundaries.sort((a: number, b: number) => a - b)\n    boundaries.forEach((boundary) => {\n      if (boundary = 1.0) {\n        throw new Error('boundaries cannot be greater or equal to 1.0')\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusClusterOptions.html":{"url":"interfaces/PrometheusClusterOptions.html","title":"interface - PrometheusClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrometheusClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusClusterOptions.ts\n        \n\n\n            \n                Description\n            \n            \n                Extends the standard ClusterOptions with a timeout for worker processes\nto response to metric report requests.\n\n            \n\n            \n                Extends\n            \n            \n                        ClusterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            workerResponseTimeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        workerResponseTimeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workerResponseTimeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets the timeout in which a forked process can respond to metric report requests.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { ClusterOptions } from 'inspector-metrics'\n\n/**\n * Extends the standard {@link ClusterOptions} with a timeout for worker processes\n * to response to metric report requests.\n *\n * @export\n * @interface PrometheusClusterOptions\n * @extends {ClusterOptions}\n * @template Worker\n */\nexport interface PrometheusClusterOptions extends ClusterOptions {\n  /**\n   * Sets the timeout in which a forked process can respond to metric report requests.\n   *\n   * @type {number}\n   * @memberof PrometheusClusterOptions\n   */\n  readonly workerResponseTimeout: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusFields.html":{"url":"interfaces/PrometheusFields.html","title":"interface - PrometheusFields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrometheusFields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for reported fields.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | string\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts:58\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport { randomBytes } from 'crypto'\nimport { EventEmitter } from 'events'\nimport {\n  BucketCounting,\n  Buckets,\n  BucketToCountMap,\n  Counter,\n  Event,\n  Gauge,\n  getMetricBuckets,\n  getMetricCounts,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  getMetricTags,\n  getSnapshot,\n  Histogram,\n  mapToTags,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricReporter,\n  MetricSetReportContext,\n  MetricType,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  Sampling,\n  SerializableBucketCounting,\n  SerializableMetric,\n  SerializableSampling,\n  StdClock,\n  Taggable,\n  Tags,\n  Timer\n} from 'inspector-metrics'\nimport { DefaultPrometheusClusterOptions } from './DefaultPrometheusClusterOptions'\nimport { InterprocessReportRequest } from './InterprocessReportRequest'\nimport { InterprocessReportResponse } from './InterprocessReportResponse'\nimport { Percentiles } from './Percentiles'\nimport { PrometheusReporterOptions } from './PrometheusReporterOptions'\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = 'counter' | 'gauge' | 'histogram' | 'summary' | 'untyped';\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n  /**\n   * Type of the metrics in fields property.\n   *\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricResult\n   */\n  readonly type: PrometheusMetricType\n  /**\n   * Contains field-name to value mapping of this metric-result.\n   *\n   * @type {PrometheusFields}\n   * @memberof PrometheusMetricResult\n   */\n  readonly fields: PrometheusFields\n  /**\n   * Indicates if this result can be handle by the reporter.\n   *\n   * @type {boolean}\n   * @memberof PrometheusMetricResult\n   */\n  readonly canBeReported: boolean\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-request-messages\n   * from master process.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_REQUEST = 'inspector-prometheus:metric-reporter:request-metrics';\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-response-messages\n   * from forked processes.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_RESPONSE = 'inspector-prometheus:metric-reporter:response-metrics';\n  /**\n   * Used to replace unsupported characters from label name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_]', 'g');\n\n  /**\n   * used to replace the first character of a label name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_START_EXCLUSION = ['_', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Used to replace unsupported characters from metric name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_:]', 'g');\n\n  /**\n   * used to replace the first character of a metric name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_START_EXCLUSION = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Checks if a given string is empty.\n   *\n   * @private\n   * @static\n   * @param {string} value\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isEmpty (value: string): boolean {\n    return !value || value.trim() === ''\n  }\n\n  /**\n   * Checks if a given value is a number.\n   *\n   * @private\n   * @static\n   * @param {*} value\n   * @returns {value is number}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isNumber (value: any): value is number {\n    return typeof (value) === 'number'\n  }\n\n  /**\n   * The prometheus counter type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly counterType: PrometheusMetricType = 'counter';\n  /**\n   * The prometheus gauge type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly gaugeType: PrometheusMetricType = 'gauge';\n  /**\n   * The prometheus histogram type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly histogramType: PrometheusMetricType = 'histogram';\n  /**\n   * The prometheus summary type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly summaryType: PrometheusMetricType = 'summary';\n  /**\n   * Internal eventbus used to forward received messages from forked metric reporters.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly internalEventbus: EventEmitter;\n\n  /**\n   * Creates an instance of PrometheusMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof PrometheusMetricReporter\n   */\n  public constructor ({\n    clock = new StdClock(),\n    emitComments = true,\n    includeTimestamp = false,\n    log = console,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    useUntyped = false,\n    clusterOptions = new DefaultPrometheusClusterOptions()\n  }: PrometheusReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      emitComments,\n      includeTimestamp,\n      log,\n      minReportingTimeout,\n      tags,\n      useUntyped\n    }, reporterType)\n    const co = this.options.clusterOptions\n    if (co?.enabled) {\n      this.internalEventbus = new EventEmitter()\n      if (co.sendMetricsToMaster) {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportRequest(message)\n        })\n      } else {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportResponse(message)\n        })\n      }\n    }\n  }\n\n  /**\n   * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n   *\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getMetricsString (): Promise {\n    const workerPromises: Array> = []\n    const clusterOptions = this.options.clusterOptions\n    if (this.canSendMessagesToWorkers()) {\n      const workers = await clusterOptions.getWorkers()\n      for (const worker of workers) {\n        const message: InterprocessReportRequest = {\n          id: this.generateRandomId(),\n          targetReporterType: this.reporterType,\n          type: PrometheusMetricReporter.MESSAGE_TYPE_REQUEST\n        }\n        const workerPromise: Promise = new Promise((resolve) => {\n          this.internalEventbus.once(message.id, (response: InterprocessReportResponse) => {\n            resolve(response.metricsStr)\n          })\n        })\n        const workerTimeout: Promise = new Promise((resolve) => setTimeout(() => {\n          resolve('')\n          this.internalEventbus.removeAllListeners(message.id)\n        }, clusterOptions.workerResponseTimeout))\n        clusterOptions\n          .sendToWorker(worker, message)\n          .catch((error) => console.log(error))\n        workerPromises.push(Promise.race([workerPromise, workerTimeout]))\n      }\n    }\n    const workerResponses = await Promise.all(workerPromises)\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      const ctx = await this.report()\n      return `${ctx.result}${workerResponses.join('\\n')}`\n    }\n    return workerResponses.join('\\n') + '\\n'\n  }\n\n  /**\n   * Builds the text representation of the event specified.\n   *\n   * @param {MetricRegistry} event\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getEventString>(event: TEvent): Promise {\n    const overallCtx: OverallReportContext = {\n      result: ''\n    }\n\n    const result = this.reportGauge(event, {\n      date: null,\n      metrics: [],\n      overallCtx,\n      registry: null,\n      type: 'gauge'\n    })\n\n    await this.handleResults(\n      overallCtx,\n      null,\n      event.getTime(),\n      'gauge',\n      [{\n        metric: event,\n        result\n      }]\n    )\n\n    return overallCtx.result\n  }\n\n  /**\n   * Use {@link #getEventString} instead.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async start (): Promise {\n    return this\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async stop (): Promise {\n    return this\n  }\n\n  /**\n   * Always returns false, since the Prometheus reporter implements it's own messaging mechanism.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected sendMetricsToMaster (): boolean {\n    return false\n  }\n\n  /**\n   * Checks if the clustering support is enabled and the 'getWorkers' and 'sendToWorker'\n   * method is not null.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected canSendMessagesToWorkers (): boolean {\n    const clusterOptions = this.options.clusterOptions\n    return clusterOptions.enabled &&\n      !!clusterOptions.getWorkers &&\n      !!clusterOptions.sendToWorker\n  }\n\n  /**\n   * Generates a randomId used to identify worker report responses.\n   *\n   * @protected\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  protected generateRandomId (): string {\n    return randomBytes(32).toString('hex')\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_REQUEST},\n   * generates a response using {@link #getMetricsString} and sends it back to the master process\n   * with the id given through the request.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportRequest (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_REQUEST)) {\n      const request: InterprocessReportRequest = message\n      const metricsStr = await this.getMetricsString()\n      const response: InterprocessReportResponse = {\n        id: request.id,\n        metricsStr,\n        targetReporterType: request.targetReporterType,\n        type: PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE\n      }\n      if (this.options.clusterOptions.sendToMaster) {\n        this.options.clusterOptions.sendToMaster(response)\n          .catch((cause) => this.options.log?.error(\n            'could not send metrics to master process',\n            cause\n          ))\n      }\n    }\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_RESPONSE}\n   * and forwards the message to the internal eventbus using the messages id as message and the message\n   * object as argument.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportResponse (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE)) {\n      const response: InterprocessReportResponse = message\n      this.internalEventbus.emit(response.id, response)\n    }\n  }\n\n  /**\n   * Ignores common report-messages.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    ctx.result = ''\n  }\n\n  protected async handleResults (\n    overallCtx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const lines: string[] = []\n    const registryTags = registry ? mapToTags(registry.getTags()) : null\n    for (const result of results) {\n      const metric = result.metric\n      const ctx = result.result\n      const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields, registryTags)\n      lines.push(line)\n    }\n    overallCtx.result = `${overallCtx.result}${lines.join('\\n')}`\n  }\n\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): PrometheusMetricResult {\n    if (counter instanceof Counter) {\n      return {\n        canBeReported: true,\n        fields: {\n          '': counter.getCount() || 0\n        },\n        type: this.gaugeType\n      }\n    }\n    return {\n      canBeReported: true,\n      fields: {\n        '': counter.getCount() || 0\n      },\n      type: this.counterType\n    }\n  }\n\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n    return {\n      canBeReported: true,\n      fields: {\n        '': gauge.getValue()\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(histogram.getCount()),\n      fields: {\n        count: histogram.getCount() || 0,\n        sum: histogram.getSum().toString() || 0\n      },\n      type: this.histogramType\n    }\n  }\n\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(meter.getCount()),\n      fields: {\n        '': meter.getCount() || 0\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(timer.getCount()),\n      fields: {\n        count: timer.getCount() || 0,\n        sum: timer.getSum().toString() || 0\n      },\n      type: this.summaryType\n    }\n  }\n\n  /**\n   * Gets the mapping of tags with normalized names and filtered for reserved tags.\n   *\n   * @protected\n   * @param {Taggable | SerializableMetric} taggable\n   * @param {string[]} exclude\n   * @param {Tags} [registryTags]\n   * @returns {Tags}\n   * @memberof PrometheusMetricReporter\n   */\n  protected buildPrometheusTags (\n    taggable: Taggable | SerializableMetric,\n    exclude: string[],\n    registryTags?: Tags\n  ): Tags {\n    exclude.sort((a: string, b: string) => a.localeCompare(b))\n\n    const tags: { [x: string]: string } = {}\n    this.options.tags.forEach((value, key) => {\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    if (registryTags) {\n      Object.keys(registryTags).forEach((key) => {\n        const value = registryTags[key]\n        const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n        if (!exclude.includes(normalizedKey) &&\n          !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n          tags[normalizedKey] = value\n        }\n      })\n    }\n    const customTags = getMetricTags(taggable)\n    Object.keys(customTags).forEach((key) => {\n      const value = customTags[key]\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    return tags\n  }\n\n  /**\n   * Builds the metric string based on the specified type of the metric instance.\n   * Returns an empty string if the metric can't be reported - determined with the\n   * specified function.\n   *\n   * @private\n   * @template T\n   * @param {Date} now\n   * @param {T} metric\n   * @param {PrometheusMetricType} metricType\n   * @param {boolean} canReport\n   * @param {PrometheusFields} fields\n   * @param {Tags} [registryTags]\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricString(\n    now: Date,\n    metric: T,\n    metricType: PrometheusMetricType,\n    canReport: boolean,\n    fields: PrometheusFields,\n    registryTags?: Tags\n  ): string {\n    if (!canReport) {\n      return ''\n    }\n\n    const metricName = this.getMetricName(metric)\n    const description = this.getDescription(metric, metricName)\n    const timestamp = this.getTimestamp(now)\n    const tags = this.buildPrometheusTags(metric, ['le', 'quantile'], registryTags)\n    const tagStr = Object\n      .keys(tags)\n      .map((tag) => `${tag}=\"${tags[tag]}\"`)\n      .join(',')\n    let additionalFields = ''\n\n    if (metricType === 'histogram') {\n      additionalFields = this.getBuckets(metric as any, metricName, fields.count as number, tagStr, timestamp)\n    } else if (metricType === 'summary') {\n      additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp)\n    }\n\n    if (this.options.useUntyped) {\n      metricType = 'untyped'\n    }\n\n    let comments = ''\n    if (this.options.emitComments) {\n      comments = `# HELP ${metricName} ${description}\\n` +\n        `# TYPE ${metricName} ${metricType}\\n`\n    }\n\n    return comments + additionalFields + Object\n      .keys(fields)\n      .map((field) => {\n        const fieldStr = PrometheusMetricReporter.isEmpty(field) ? '' : `_${field}`\n        const valueStr = this.getValue(fields[field])\n\n        return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`\n      })\n      .join('')\n  }\n\n  /**\n   * Builds the description for a metric instance based on the description property.\n   * If no description was specified this function returns ' description'.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getDescription(metric: T, metricName: string): string {\n    let description = getMetricDescription(metric)\n    if (PrometheusMetricReporter.isEmpty(description)) {\n      description = `${metricName} description`\n    }\n    return description\n  }\n\n  /**\n   * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n   *\n   * @private\n   * @param {*} value\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getValue (value: any): string {\n    let valueStr = `${value}`\n\n    if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n      if (value === -Infinity) {\n        valueStr = '-Inf'\n      } else if (value === Infinity) {\n        valueStr = '+Inf'\n      }\n    }\n\n    return valueStr\n  }\n\n  /**\n   * Gets the UTC timestamp.\n   *\n   * @private\n   * @param {Date} now\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getTimestamp (now: Date): string {\n    return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : ''\n  }\n\n  /**\n   * Builds the string for bucket data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {number} count\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getBuckets(\n    metric: T,\n    metricName: string,\n    count: number,\n    tagStr: string,\n    timestamp: string): string {\n    const buckets: Buckets = getMetricBuckets(metric)\n    if (buckets) {\n      const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n      const bucketStrings: string[] = []\n      const counts: BucketToCountMap = getMetricCounts(metric)\n\n      for (const boundary of Object.keys(counts)) {\n        const bucketCount: number = counts[boundary as any]\n        bucketStrings.push(\n          `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`\n        )\n      }\n\n      return bucketStrings.join('\\n') +\n        `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`\n    }\n\n    return ''\n  }\n\n  /**\n   * Builds the string for percentile data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getQuantiles(\n    metric: T,\n    metricName: string,\n    tagStr: string,\n    timestamp: string): string {\n    const metadata: Metadata = getMetricMetadata(metric)\n    let quantiles: Percentiles | null = metadata[Percentiles.METADATA_NAME]\n    if (!quantiles) {\n      quantiles = new Percentiles()\n    }\n    const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n    const snapshot = getSnapshot(metric)\n\n    return quantiles\n      .boundaries\n      .map((boundary) => {\n        const value = snapshot.getValue(boundary)\n        return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`\n      })\n      .join('\\n') + '\\n'\n  }\n\n  /**\n   * Gets the normalized metric name.\n   *\n   * @private\n   * @param {Metric | SerializableMetric} metric\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricName (metric: Metric | SerializableMetric): string {\n    let name = getMetricName(metric)\n    const group = getMetricGroup(metric)\n    if (group) {\n      name = `${group}:${name}`\n    }\n\n    name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, '_')\n    if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.includes(name.charAt(0))) {\n      name = '_' + name.slice(1)\n    }\n    return name\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusMetricResult.html":{"url":"interfaces/PrometheusMetricResult.html","title":"interface - PrometheusMetricResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrometheusMetricResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for a report result.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            canBeReported\n                                        \n                                \n                                \n                                        \n                                            fields\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canBeReported\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canBeReported:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates if this result can be handle by the reporter.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fields:         PrometheusFields\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PrometheusFields\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Contains field-name to value mapping of this metric-result.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         PrometheusMetricType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PrometheusMetricType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the metrics in fields property.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport { randomBytes } from 'crypto'\nimport { EventEmitter } from 'events'\nimport {\n  BucketCounting,\n  Buckets,\n  BucketToCountMap,\n  Counter,\n  Event,\n  Gauge,\n  getMetricBuckets,\n  getMetricCounts,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  getMetricTags,\n  getSnapshot,\n  Histogram,\n  mapToTags,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricReporter,\n  MetricSetReportContext,\n  MetricType,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  Sampling,\n  SerializableBucketCounting,\n  SerializableMetric,\n  SerializableSampling,\n  StdClock,\n  Taggable,\n  Tags,\n  Timer\n} from 'inspector-metrics'\nimport { DefaultPrometheusClusterOptions } from './DefaultPrometheusClusterOptions'\nimport { InterprocessReportRequest } from './InterprocessReportRequest'\nimport { InterprocessReportResponse } from './InterprocessReportResponse'\nimport { Percentiles } from './Percentiles'\nimport { PrometheusReporterOptions } from './PrometheusReporterOptions'\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = 'counter' | 'gauge' | 'histogram' | 'summary' | 'untyped';\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n  /**\n   * Type of the metrics in fields property.\n   *\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricResult\n   */\n  readonly type: PrometheusMetricType\n  /**\n   * Contains field-name to value mapping of this metric-result.\n   *\n   * @type {PrometheusFields}\n   * @memberof PrometheusMetricResult\n   */\n  readonly fields: PrometheusFields\n  /**\n   * Indicates if this result can be handle by the reporter.\n   *\n   * @type {boolean}\n   * @memberof PrometheusMetricResult\n   */\n  readonly canBeReported: boolean\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-request-messages\n   * from master process.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_REQUEST = 'inspector-prometheus:metric-reporter:request-metrics';\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-response-messages\n   * from forked processes.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_RESPONSE = 'inspector-prometheus:metric-reporter:response-metrics';\n  /**\n   * Used to replace unsupported characters from label name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_]', 'g');\n\n  /**\n   * used to replace the first character of a label name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_START_EXCLUSION = ['_', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Used to replace unsupported characters from metric name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_:]', 'g');\n\n  /**\n   * used to replace the first character of a metric name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_START_EXCLUSION = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Checks if a given string is empty.\n   *\n   * @private\n   * @static\n   * @param {string} value\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isEmpty (value: string): boolean {\n    return !value || value.trim() === ''\n  }\n\n  /**\n   * Checks if a given value is a number.\n   *\n   * @private\n   * @static\n   * @param {*} value\n   * @returns {value is number}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isNumber (value: any): value is number {\n    return typeof (value) === 'number'\n  }\n\n  /**\n   * The prometheus counter type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly counterType: PrometheusMetricType = 'counter';\n  /**\n   * The prometheus gauge type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly gaugeType: PrometheusMetricType = 'gauge';\n  /**\n   * The prometheus histogram type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly histogramType: PrometheusMetricType = 'histogram';\n  /**\n   * The prometheus summary type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly summaryType: PrometheusMetricType = 'summary';\n  /**\n   * Internal eventbus used to forward received messages from forked metric reporters.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly internalEventbus: EventEmitter;\n\n  /**\n   * Creates an instance of PrometheusMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof PrometheusMetricReporter\n   */\n  public constructor ({\n    clock = new StdClock(),\n    emitComments = true,\n    includeTimestamp = false,\n    log = console,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    useUntyped = false,\n    clusterOptions = new DefaultPrometheusClusterOptions()\n  }: PrometheusReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      emitComments,\n      includeTimestamp,\n      log,\n      minReportingTimeout,\n      tags,\n      useUntyped\n    }, reporterType)\n    const co = this.options.clusterOptions\n    if (co?.enabled) {\n      this.internalEventbus = new EventEmitter()\n      if (co.sendMetricsToMaster) {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportRequest(message)\n        })\n      } else {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportResponse(message)\n        })\n      }\n    }\n  }\n\n  /**\n   * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n   *\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getMetricsString (): Promise {\n    const workerPromises: Array> = []\n    const clusterOptions = this.options.clusterOptions\n    if (this.canSendMessagesToWorkers()) {\n      const workers = await clusterOptions.getWorkers()\n      for (const worker of workers) {\n        const message: InterprocessReportRequest = {\n          id: this.generateRandomId(),\n          targetReporterType: this.reporterType,\n          type: PrometheusMetricReporter.MESSAGE_TYPE_REQUEST\n        }\n        const workerPromise: Promise = new Promise((resolve) => {\n          this.internalEventbus.once(message.id, (response: InterprocessReportResponse) => {\n            resolve(response.metricsStr)\n          })\n        })\n        const workerTimeout: Promise = new Promise((resolve) => setTimeout(() => {\n          resolve('')\n          this.internalEventbus.removeAllListeners(message.id)\n        }, clusterOptions.workerResponseTimeout))\n        clusterOptions\n          .sendToWorker(worker, message)\n          .catch((error) => console.log(error))\n        workerPromises.push(Promise.race([workerPromise, workerTimeout]))\n      }\n    }\n    const workerResponses = await Promise.all(workerPromises)\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      const ctx = await this.report()\n      return `${ctx.result}${workerResponses.join('\\n')}`\n    }\n    return workerResponses.join('\\n') + '\\n'\n  }\n\n  /**\n   * Builds the text representation of the event specified.\n   *\n   * @param {MetricRegistry} event\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getEventString>(event: TEvent): Promise {\n    const overallCtx: OverallReportContext = {\n      result: ''\n    }\n\n    const result = this.reportGauge(event, {\n      date: null,\n      metrics: [],\n      overallCtx,\n      registry: null,\n      type: 'gauge'\n    })\n\n    await this.handleResults(\n      overallCtx,\n      null,\n      event.getTime(),\n      'gauge',\n      [{\n        metric: event,\n        result\n      }]\n    )\n\n    return overallCtx.result\n  }\n\n  /**\n   * Use {@link #getEventString} instead.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async start (): Promise {\n    return this\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async stop (): Promise {\n    return this\n  }\n\n  /**\n   * Always returns false, since the Prometheus reporter implements it's own messaging mechanism.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected sendMetricsToMaster (): boolean {\n    return false\n  }\n\n  /**\n   * Checks if the clustering support is enabled and the 'getWorkers' and 'sendToWorker'\n   * method is not null.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected canSendMessagesToWorkers (): boolean {\n    const clusterOptions = this.options.clusterOptions\n    return clusterOptions.enabled &&\n      !!clusterOptions.getWorkers &&\n      !!clusterOptions.sendToWorker\n  }\n\n  /**\n   * Generates a randomId used to identify worker report responses.\n   *\n   * @protected\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  protected generateRandomId (): string {\n    return randomBytes(32).toString('hex')\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_REQUEST},\n   * generates a response using {@link #getMetricsString} and sends it back to the master process\n   * with the id given through the request.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportRequest (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_REQUEST)) {\n      const request: InterprocessReportRequest = message\n      const metricsStr = await this.getMetricsString()\n      const response: InterprocessReportResponse = {\n        id: request.id,\n        metricsStr,\n        targetReporterType: request.targetReporterType,\n        type: PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE\n      }\n      if (this.options.clusterOptions.sendToMaster) {\n        this.options.clusterOptions.sendToMaster(response)\n          .catch((cause) => this.options.log?.error(\n            'could not send metrics to master process',\n            cause\n          ))\n      }\n    }\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_RESPONSE}\n   * and forwards the message to the internal eventbus using the messages id as message and the message\n   * object as argument.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportResponse (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE)) {\n      const response: InterprocessReportResponse = message\n      this.internalEventbus.emit(response.id, response)\n    }\n  }\n\n  /**\n   * Ignores common report-messages.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    ctx.result = ''\n  }\n\n  protected async handleResults (\n    overallCtx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const lines: string[] = []\n    const registryTags = registry ? mapToTags(registry.getTags()) : null\n    for (const result of results) {\n      const metric = result.metric\n      const ctx = result.result\n      const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields, registryTags)\n      lines.push(line)\n    }\n    overallCtx.result = `${overallCtx.result}${lines.join('\\n')}`\n  }\n\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): PrometheusMetricResult {\n    if (counter instanceof Counter) {\n      return {\n        canBeReported: true,\n        fields: {\n          '': counter.getCount() || 0\n        },\n        type: this.gaugeType\n      }\n    }\n    return {\n      canBeReported: true,\n      fields: {\n        '': counter.getCount() || 0\n      },\n      type: this.counterType\n    }\n  }\n\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n    return {\n      canBeReported: true,\n      fields: {\n        '': gauge.getValue()\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(histogram.getCount()),\n      fields: {\n        count: histogram.getCount() || 0,\n        sum: histogram.getSum().toString() || 0\n      },\n      type: this.histogramType\n    }\n  }\n\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(meter.getCount()),\n      fields: {\n        '': meter.getCount() || 0\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(timer.getCount()),\n      fields: {\n        count: timer.getCount() || 0,\n        sum: timer.getSum().toString() || 0\n      },\n      type: this.summaryType\n    }\n  }\n\n  /**\n   * Gets the mapping of tags with normalized names and filtered for reserved tags.\n   *\n   * @protected\n   * @param {Taggable | SerializableMetric} taggable\n   * @param {string[]} exclude\n   * @param {Tags} [registryTags]\n   * @returns {Tags}\n   * @memberof PrometheusMetricReporter\n   */\n  protected buildPrometheusTags (\n    taggable: Taggable | SerializableMetric,\n    exclude: string[],\n    registryTags?: Tags\n  ): Tags {\n    exclude.sort((a: string, b: string) => a.localeCompare(b))\n\n    const tags: { [x: string]: string } = {}\n    this.options.tags.forEach((value, key) => {\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    if (registryTags) {\n      Object.keys(registryTags).forEach((key) => {\n        const value = registryTags[key]\n        const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n        if (!exclude.includes(normalizedKey) &&\n          !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n          tags[normalizedKey] = value\n        }\n      })\n    }\n    const customTags = getMetricTags(taggable)\n    Object.keys(customTags).forEach((key) => {\n      const value = customTags[key]\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    return tags\n  }\n\n  /**\n   * Builds the metric string based on the specified type of the metric instance.\n   * Returns an empty string if the metric can't be reported - determined with the\n   * specified function.\n   *\n   * @private\n   * @template T\n   * @param {Date} now\n   * @param {T} metric\n   * @param {PrometheusMetricType} metricType\n   * @param {boolean} canReport\n   * @param {PrometheusFields} fields\n   * @param {Tags} [registryTags]\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricString(\n    now: Date,\n    metric: T,\n    metricType: PrometheusMetricType,\n    canReport: boolean,\n    fields: PrometheusFields,\n    registryTags?: Tags\n  ): string {\n    if (!canReport) {\n      return ''\n    }\n\n    const metricName = this.getMetricName(metric)\n    const description = this.getDescription(metric, metricName)\n    const timestamp = this.getTimestamp(now)\n    const tags = this.buildPrometheusTags(metric, ['le', 'quantile'], registryTags)\n    const tagStr = Object\n      .keys(tags)\n      .map((tag) => `${tag}=\"${tags[tag]}\"`)\n      .join(',')\n    let additionalFields = ''\n\n    if (metricType === 'histogram') {\n      additionalFields = this.getBuckets(metric as any, metricName, fields.count as number, tagStr, timestamp)\n    } else if (metricType === 'summary') {\n      additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp)\n    }\n\n    if (this.options.useUntyped) {\n      metricType = 'untyped'\n    }\n\n    let comments = ''\n    if (this.options.emitComments) {\n      comments = `# HELP ${metricName} ${description}\\n` +\n        `# TYPE ${metricName} ${metricType}\\n`\n    }\n\n    return comments + additionalFields + Object\n      .keys(fields)\n      .map((field) => {\n        const fieldStr = PrometheusMetricReporter.isEmpty(field) ? '' : `_${field}`\n        const valueStr = this.getValue(fields[field])\n\n        return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`\n      })\n      .join('')\n  }\n\n  /**\n   * Builds the description for a metric instance based on the description property.\n   * If no description was specified this function returns ' description'.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getDescription(metric: T, metricName: string): string {\n    let description = getMetricDescription(metric)\n    if (PrometheusMetricReporter.isEmpty(description)) {\n      description = `${metricName} description`\n    }\n    return description\n  }\n\n  /**\n   * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n   *\n   * @private\n   * @param {*} value\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getValue (value: any): string {\n    let valueStr = `${value}`\n\n    if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n      if (value === -Infinity) {\n        valueStr = '-Inf'\n      } else if (value === Infinity) {\n        valueStr = '+Inf'\n      }\n    }\n\n    return valueStr\n  }\n\n  /**\n   * Gets the UTC timestamp.\n   *\n   * @private\n   * @param {Date} now\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getTimestamp (now: Date): string {\n    return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : ''\n  }\n\n  /**\n   * Builds the string for bucket data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {number} count\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getBuckets(\n    metric: T,\n    metricName: string,\n    count: number,\n    tagStr: string,\n    timestamp: string): string {\n    const buckets: Buckets = getMetricBuckets(metric)\n    if (buckets) {\n      const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n      const bucketStrings: string[] = []\n      const counts: BucketToCountMap = getMetricCounts(metric)\n\n      for (const boundary of Object.keys(counts)) {\n        const bucketCount: number = counts[boundary as any]\n        bucketStrings.push(\n          `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`\n        )\n      }\n\n      return bucketStrings.join('\\n') +\n        `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`\n    }\n\n    return ''\n  }\n\n  /**\n   * Builds the string for percentile data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getQuantiles(\n    metric: T,\n    metricName: string,\n    tagStr: string,\n    timestamp: string): string {\n    const metadata: Metadata = getMetricMetadata(metric)\n    let quantiles: Percentiles | null = metadata[Percentiles.METADATA_NAME]\n    if (!quantiles) {\n      quantiles = new Percentiles()\n    }\n    const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n    const snapshot = getSnapshot(metric)\n\n    return quantiles\n      .boundaries\n      .map((boundary) => {\n        const value = snapshot.getValue(boundary)\n        return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`\n      })\n      .join('\\n') + '\\n'\n  }\n\n  /**\n   * Gets the normalized metric name.\n   *\n   * @private\n   * @param {Metric | SerializableMetric} metric\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricName (metric: Metric | SerializableMetric): string {\n    let name = getMetricName(metric)\n    const group = getMetricGroup(metric)\n    if (group) {\n      name = `${group}:${name}`\n    }\n\n    name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, '_')\n    if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.includes(name.charAt(0))) {\n      name = '_' + name.slice(1)\n    }\n    return name\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusReporterOptions.html":{"url":"interfaces/PrometheusReporterOptions.html","title":"interface - PrometheusReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrometheusReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusReporterOptions.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration object for PrometheusMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        MetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            clusterOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emitComments\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includeTimestamp\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            log\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useUntyped\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clusterOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clusterOptions:     PrometheusClusterOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrometheusClusterOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Options for clustering support.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emitComments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitComments:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if comments like HELP and TYPE should be emitted\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeTimestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includeTimestamp:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if UTC converted timestamps should be appended to each metric data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useUntyped\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useUntyped:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if the untyped should always be used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { MetricReporterOptions, Logger } from 'inspector-metrics'\nimport { PrometheusClusterOptions } from './PrometheusClusterOptions'\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @interface PrometheusReporterOptions\n */\nexport interface PrometheusReporterOptions extends MetricReporterOptions {\n  /**\n   * indicates if UTC converted timestamps should be appended to each metric data\n   *\n   * @type {boolean}\n   * @memberof PrometheusReporterOptions\n   */\n  readonly includeTimestamp?: boolean\n  /**\n   * indicates if comments like HELP and TYPE should be emitted\n   *\n   * @type {boolean}\n   * @memberof PrometheusReporterOptions\n   */\n  readonly emitComments?: boolean\n  /**\n   * indicates if the untyped should always be used\n   *\n   * @type {boolean}\n   * @memberof PrometheusReporterOptions\n   */\n  readonly useUntyped?: boolean\n  /**\n   * Options for clustering support.\n   *\n   * @type {PrometheusClusterOptions}\n   * @memberof PrometheusReporterOptions\n   */\n  clusterOptions?: PrometheusClusterOptions\n  /**\n   * Minimal logger interface to report failures.\n   *\n   * @type {Logger}\n   * @memberof PrometheusReporterOptions\n   */\n  log?: Logger\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PushgatewayReporterOptions.html":{"url":"interfaces/PushgatewayReporterOptions.html","title":"interface - PushgatewayReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PushgatewayReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration object for PushgatewayMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            host\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            instance\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            job\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            log\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            reporter\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The hostname or ip address of the pushgateway\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        instance:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The id of this instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        job\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        job:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The id of the job.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A simplified logger interface to log response code and message of the pushgateway.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The port of the pushgateway.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reporter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reporter:         PrometheusMetricReporter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PrometheusMetricReporter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The reporter use ot generate the metrics string.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as http from 'http'\nimport {\n  Counter,\n  DisabledClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport { PrometheusMetricReporter } from './PrometheusMetricReporter'\n\n/**\n * Configuration object for {@link PushgatewayMetricReporter}.\n *\n * @export\n * @interface PushgatewayReporterOptions\n */\nexport interface PushgatewayReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The hostname or ip address of the pushgateway\n   *\n   * @type {string}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly host?: string\n  /**\n   * The port of the pushgateway.\n   *\n   * @type {number}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly port?: number\n  /**\n   * The id of the job.\n   *\n   * @type {string}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly job?: string\n  /**\n   * The id of this instance.\n   *\n   * @type {string}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly instance?: string\n  /**\n   * The reporter use ot generate the metrics string.\n   *\n   * @type {PrometheusMetricReporter}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly reporter?: PrometheusMetricReporter\n  /**\n   * A simplified logger interface to log response code and message of the pushgateway.\n   *\n   * @type {Logger}\n   * @memberof PushgatewayReporterOptions\n   */\n  log?: Logger\n}\n\n/**\n * Metric reporter for prometheus's pushgateway.\n * Simply sends the output of the provided {@link PrometheusMetricReporter}\n * to the configured pushgateway using the text format.\n *\n * Clustering support is not implemented and disabled by default.\n *\n * @see https://github.com/prometheus/pushgateway\n * @export\n * @class PushgatewayMetricReporter\n * @extends {MetricReporter}\n */\nexport class PushgatewayMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Creates an instance of PushgatewayMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof PushgatewayMetricReporter\n   */\n  public constructor ({\n    clock = new StdClock(),\n    host = '',\n    instance = '',\n    job = '',\n    log = console,\n    minReportingTimeout = 1,\n    port = 9091,\n    reporter,\n    reportInterval = 1000,\n    scheduler = setInterval,\n    tags = new Map(),\n    unit = MILLISECOND,\n    clusterOptions = new DisabledClusterOptions()\n  }: PushgatewayReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      host,\n      instance,\n      job,\n      log,\n      minReportingTimeout,\n      port,\n      reportInterval,\n      reporter,\n      scheduler,\n      tags,\n      unit\n    }, reporterType)\n  }\n\n  /**\n   * Uses {@link PrometheusMetricReporter#getEventString} to build the string and sends the event\n   * straight to the pushgateway.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof PushgatewayMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const payload = await this.options.reporter.getEventString(event)\n\n    this.sendPayload(payload)\n\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof PushgatewayMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Calls the {@link PrometheusMetricReporter} to generate the metrics in a valid prometheus text format.\n   * Sends the metrics via 'PUT' to the configured pushgateway.\n   * The {@link #beforeReport} and {@link #afterReport} methods are not invoked.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected async report (): Promise {\n    const ctx = this.createOverallReportContext()\n    const payload = await this.options.reporter.getMetricsString()\n\n    this.sendPayload(payload)\n\n    ctx.result = payload\n    return ctx\n  }\n\n  /**\n   * Sends the specified payload to the prometheus pushgateway.\n   *\n   * @protected\n   * @param {string} payload\n   * @memberof PushgatewayMetricReporter\n   */\n  protected sendPayload (payload: string): void {\n    const options = {\n      headers: {\n        'Content-Length': payload.length,\n        'Content-Type': 'text/plain'\n      },\n      host: this.options.host,\n      method: 'PUT',\n      path: `/metrics/job/${this.options.job}/instance/${this.options.instance}`,\n      port: `${this.options.port}`\n    }\n\n    const req = http.request(options, (res) => {\n      if (this.options.log) {\n        this.options.log.trace(`${res.statusCode} ${res.statusMessage}`)\n      }\n    })\n    req.write(payload)\n    req.end()\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): void {\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReportMessageReceiver.html":{"url":"interfaces/ReportMessageReceiver.html","title":"interface - ReportMessageReceiver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReportMessageReceiver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/report-message-receiver.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for abstracting event-emitter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        on\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        on\n                        \n                    \n                \n            \n            \n                \non(messageType: string, callback: (worker: Worker,message: any,handle: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/report-message-receiver.ts:21\n                \n            \n\n\n            \n                \n                    Receives an event with a message-type-id and payload. The specified callback gets\ninvoked if a message is received.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    messageType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nusually 'message'\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Worker } from \"cluster\";\n\n/**\n * Interface for abstracting event-emitter.\n *\n * @export\n * @interface ReportMessageReceiver\n */\nexport interface ReportMessageReceiver {\n  /**\n   * Receives an event with a message-type-id and payload. The specified callback gets\n   * invoked if a message is received.\n   *\n   * @param {string} messageType - usually 'message'\n   * @param {(worker: Worker, message: any, handle: any) => any} callback\n   * @returns {*}\n   * @memberof ReportMessageReceiver\n   */\n  on(messageType: string, callback: (worker: Worker, message: any, handle: any) => any): any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReportingResult.html":{"url":"interfaces/ReportingResult.html","title":"interface - ReportingResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReportingResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/reporting-result.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for reporting results.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            metric\n                                        \n                                \n                                \n                                        \n                                            result\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        metric\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metric:     M\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     M\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The metric the result refers to.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The reporting result - implementation specific.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"../model/metric\";\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n  /**\n   * The metric the result refers to.\n   *\n   * @type {M}\n   * @memberof ReportingResult\n   */\n  readonly metric: M;\n  /**\n   * The reporting result - implementation specific.\n   *\n   * @type {T}\n   * @memberof ReportingResult\n   */\n  readonly result: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reservoir.html":{"url":"interfaces/Reservoir.html","title":"interface - Reservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Reservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/reservoir.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        size\n                                    \n                                \n                                \n                                    \n                                        snapshot\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n            \n                \nsize()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:19\n                \n            \n\n\n            \n                \n                    Gets the capacity of this reservoir.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        snapshot\n                        \n                    \n                \n            \n            \n                \nsnapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:36\n                \n            \n\n\n            \n                \n                    Creates a new snapshot of this reservoir.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:28\n                \n            \n\n\n            \n                \n                    Adds a value to the reservoir.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n  /**\n   * Gets the capacity of this reservoir.\n   *\n   * @returns {number}\n   * @memberof Reservoir\n   */\n  size(): number;\n\n  /**\n   * Adds a value to the reservoir.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Reservoir\n   */\n  update(value: number): this;\n\n  /**\n   * Creates a new snapshot of this reservoir.\n   *\n   * @returns {Snapshot}\n   * @memberof Reservoir\n   */\n  snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n  /**\n   * The values.\n   *\n   * @private\n   * @type {number[]}\n   * @memberof DefaultReservoir\n   */\n  private values: number[] = [];\n  /**\n   * The capacity of this reservoir.\n   *\n   * @private\n   * @type {number}\n   * @memberof DefaultReservoir\n   */\n  private maxSize: number;\n\n  /**\n   * Creates an instance of DefaultReservoir.\n   *\n   * @param {number} maxSize\n   * @memberof DefaultReservoir\n   */\n  public constructor(maxSize: number) {\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Gets the actual number of value, but at max the specified maximum.\n   *\n   * @returns {number}\n   * @memberof DefaultReservoir\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Adds the value to the array of numbers until the maximum number of\n   * values is reached. If the maximum number of values is reached\n   * an old value at a random position is replaced with the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof DefaultReservoir\n   */\n  public update(value: number): this {\n    if (this.values.length \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sampling.html":{"url":"interfaces/Sampling.html","title":"interface - Sampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Sampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/sampling.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for all metric classes that can build a snapshot of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getSnapshot\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getSnapshot\n                        \n                    \n                \n            \n            \n                \ngetSnapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/sampling.ts:19\n                \n            \n\n\n            \n                \n                    Gets the snapshot of values.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializedSnapshot, SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Interface for all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n  /**\n   * Gets the snapshot of values.\n   *\n   * @returns {Snapshot}\n   * @memberof Sampling\n   */\n  getSnapshot(): Snapshot;\n\n}\n\n/**\n * The serialized version of {@link Sampling}.\n *\n * @export\n * @interface SerializableSampling\n */\nexport interface SerializableSampling {\n\n  /**\n   * Gets the serialized, sorted collection of samples.\n   *\n   * @returns {SerializedSnapshot}\n   * @memberof SerializableSampling\n   */\n  snapshot: SerializedSnapshot;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableSampling} or not.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {metric is SerializableSampling}\n */\nexport function isSerializableSampling(metric: Sampling | SerializableSampling): metric is SerializableSampling {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getSnapshot && typeof anyMetric.getSnapshot === \"function\")) {\n    return false;\n  }\n  return anyMetric.hasOwnProperty(\"snapshot\");\n}\n\n/**\n * Convenience method to get the snapshot of a {@link Sampling} or a {@link SerializableSampling}.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {Snapshot}\n */\nexport function getSnapshot(metric: Sampling | SerializableSampling): Snapshot {\n  if (isSerializableSampling(metric)) {\n    return new SimpleSnapshot(metric.snapshot.values);\n  } else {\n    return metric.getSnapshot();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScheduledMetricReporterOptions.html":{"url":"interfaces/ScheduledMetricReporterOptions.html","title":"interface - ScheduledMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScheduledMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for the ScheduledMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        MetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            reportInterval\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scheduler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            unit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        reportInterval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reportInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The reporting interval in the time-unit specified in #unit.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheduler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheduler:         Scheduler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scheduler\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The scheduler function used to trigger reporting runs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unit:         TimeUnit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimeUnit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time unit for the reporting interval.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MILLISECOND, TimeUnit } from \"../model/time-unit\";\nimport { MetricReporter } from \"./metric-reporter\";\nimport { MetricReporterOptions } from \"./metric-reporter-options\";\n\n/**\n * Scheduler function type definition.\n */\nexport type Scheduler = (prog: () => Promise, interval: number) => NodeJS.Timer;\n\n/**\n * Options for the {@link ScheduledMetricReporter}.\n *\n * @export\n * @interface ScheduledMetricReporterOptions\n * @extends {MetricReporterOptions}\n */\nexport interface ScheduledMetricReporterOptions extends MetricReporterOptions {\n  /**\n   * The reporting interval in the time-unit specified in {@link #unit}.\n   *\n   * @type {number}\n   * @memberof ScheduledMetricReporterOptions\n   */\n  readonly reportInterval?: number;\n  /**\n   * Time unit for the reporting interval.\n   *\n   * @type {TimeUnit}\n   * @memberof ScheduledMetricReporterOptions\n   */\n  readonly unit?: TimeUnit;\n  /**\n   * The scheduler function used to trigger reporting runs.\n   *\n   * @type {Scheduler}\n   * @memberof ScheduledMetricReporterOptions\n   */\n  readonly scheduler?: Scheduler;\n}\n\n/**\n * Base-class for scheduled metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class ScheduledMetricReporter\n */\nexport abstract class ScheduledMetricReporter\n  extends MetricReporter {\n\n  /**\n   * Timer instance returned by the scheduler function.\n   *\n   * @private\n   * @type {NodeJS.Timer}\n   * @memberof ScheduledMetricReporter\n   */\n  private timer: NodeJS.Timer;\n\n  /**\n   * Creates an instance of ScheduledMetricReporter.\n   *\n   * @param {O} options\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof ScheduledMetricReporter\n   */\n  public constructor(options: O, reporterType?: string) {\n    super(options, reporterType);\n  }\n\n  /**\n   * Uses the scheduler function to call the {@link #report} function\n   * in the interval specified. The interval is converted into {@link MILLISECOND}s.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async start(): Promise {\n    const interval: number = this.options.unit.convertTo(this.options.reportInterval, MILLISECOND);\n    this.timer = this.options.scheduler(async () => this.report(), interval);\n    return this;\n  }\n\n  /**\n   * Stops reporting metrics.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async stop(): Promise {\n    if (this.timer) {\n        this.timer.unref();\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        init\n                                    \n                                \n                                \n                                    \n                                        isReady\n                                    \n                                \n                                \n                                    \n                                        send\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts:75\n                \n            \n\n\n            \n                \n                    Triggers the initialization process.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isReady\n                        \n                    \n                \n            \n            \n                \nisReady()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts:67\n                \n            \n\n\n            \n                \n                    Indicates if the sender is ready to send data.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        send\n                        \n                    \n                \n            \n            \n                \nsend(points: MeasurementPoint[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts:84\n                \n            \n\n\n            \n                \n                    Sends the given data points to influxdb.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                MeasurementPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * measurement point definition\n */\nexport interface MeasurementPoint {\n  /**\n   * Measurement is the Influx measurement name.\n   */\n  measurement: string;\n  /**\n   * Tags is the list of tag values to insert.\n   */\n  tags: {\n      [name: string]: string;\n  };\n  /**\n   * Fields is the list of field values to insert.\n   */\n  fields: {\n      [name: string]: any;\n  };\n  /**\n   * Timestamp tags this measurement with a date. This can be a Date object,\n   * in which case we'll adjust it to the desired precision, or a numeric\n   * string or number, in which case it gets passed directly to Influx.\n   */\n  timestamp: Date | string | number;\n}\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n  /**\n   * Indicates if the sender is ready to send data.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  isReady(): Promise\n\n  /**\n   * Triggers the initialization process.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  init(): Promise\n\n  /**\n   * Sends the given data points to influxdb.\n   *\n   * @param {T[]} points\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  send(points: MeasurementPoint[]): Promise\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * A logger instance used to report errors.\n   *\n   * @type {(Logger | null)}\n   * @memberof InfluxMetricReporterOptions\n   */\n  log: Logger | null\n  /**\n   * A sender implementation used to send metrics to influx DB server.\n   *\n   * @type {Sender}\n   * @memberof InfluxMetricReporterOptions\n   */\n  readonly sender: Sender\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof InfluxMetricReporter\n   */\n  private readonly logMetadata: any;\n\n  /**\n   * Creates an instance of InfluxMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof InfluxMetricReporter\n   */\n  public constructor ({\n    sender,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    clusterOptions = new DefaultClusterOptions(),\n    tags = new Map()\n  }: InfluxMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      sender,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof InfluxMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {(Logger | null)} log\n   * @memberof InfluxMetricReporter\n   */\n  public setLog (log: Logger | null): void {\n    this.options.log = log\n  }\n\n  /**\n   * Starts the sender and calls the super method to start scheduling.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async start (): Promise {\n    await this.options.sender.init()\n    return await super.start()\n  }\n\n  /**\n   * Sends an event directly to influxdb.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!(await this.options.sender.isReady())) {\n      throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\")\n    }\n\n    const value = event.getValue()\n    if (!value) {\n      return await Promise.reject(new Error('Invalid event value'))\n    }\n\n    const point = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: {},\n      registry: null,\n      type: 'gauge'\n    })\n    point.timestamp = event.getTime()\n\n    try {\n      await this.handleResults({}, null, null, 'gauge', [{\n        metric: event,\n        result: point\n      }])\n\n      if (this.options.log) {\n        this.options.log.debug('wrote event', this.logMetadata)\n      }\n      return event\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing event - reason: ${message}`, reason, this.logMetadata)\n      }\n      throw reason\n    }\n  }\n\n  /**\n   * Reports the data points for each registered {@link MetricRegistry}.\n   *\n   * @protected\n   * @memberof InfluxMetricReporter\n   */\n  protected async report (): Promise {\n    const senderReady = await this.options.sender.isReady()\n    if (senderReady) {\n      return await super.report()\n    }\n    return {}\n  }\n\n  /**\n   * Uses the sender to report the given data points.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const points = results.map((result) => result.result)\n    if (points.length === 0) {\n      return\n    }\n\n    try {\n      points.forEach((point) => {\n        if (!(point.timestamp instanceof Date)) {\n          point.timestamp = new Date(point.timestamp)\n        }\n      })\n\n      await this.options.sender.send(points)\n      if (this.options.log) {\n        this.options.log.debug(`wrote ${type} metrics`, this.logMetadata)\n      }\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing ${type} metrics - reason: ${message}`, reason, this.logMetadata)\n      }\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Counter} or  {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): MeasurementPoint {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(counter)\n    const measurement = this.getMeasurementName(counter)\n\n    fields[`${fieldNamePrefix}count`] = counter.getCount() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, counter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): MeasurementPoint {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(gauge)\n    const measurement = this.getMeasurementName(gauge)\n\n    fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(histogram)\n    const measurement = this.getMeasurementName(histogram)\n\n    fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, histogram),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = meter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(meter)\n    const measurement = this.getMeasurementName(meter)\n\n    fields[`${fieldNamePrefix}count`] = meter.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, meter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds a measure point (type T) instance for the given {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): MeasurementPoint {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(timer)\n    const measurement = this.getMeasurementName(timer)\n\n    fields[`${fieldNamePrefix}count`] = timer.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, timer),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds the prefix for a field name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getFieldNamePrefix (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getName()}.`\n    }\n    return ''\n  }\n\n  /**\n   * Builds the prefix for the metric name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getMeasurementName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return metric.getGroup()\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableBucketCounting.html":{"url":"interfaces/SerializableBucketCounting.html","title":"interface - SerializableBucketCounting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializableBucketCounting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n\n            \n                Description\n            \n            \n                Serialized version of BucketCounting.\n\n            \n\n            \n                Extends\n            \n            \n                        SerializableMetric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buckets\n                                        \n                                \n                                \n                                        \n                                            counts\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buckets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buckets:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The boundaries used to do the counting.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        counts:         BucketToCountMap\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BucketToCountMap\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mapping: boundary to the count of events within boundary.\nThe meaning of the count is implementation specific.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableMetered.html":{"url":"interfaces/SerializableMetered.html","title":"interface - SerializableMetered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializableMetered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metered.ts\n        \n\n\n            \n                Description\n            \n            \n                Serializable version of a Meter.\n\n            \n\n            \n                Extends\n            \n            \n                        SerializableMetric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            meanRate\n                                        \n                                \n                                \n                                        \n                                            rates\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total count of events reported.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meanRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meanRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rates:         MeteredRates\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MeteredRates\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n  /**\n   * Gets the total number of events.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getCount(): number;\n\n  /**\n   * Gets the rate of the last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get15MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get5MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last minute.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get1MinuteRate(): number;\n\n  /**\n   * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getMeanRate(): number;\n\n}\n\n/**\n * Helper interface for serialized {@link Meter} metrics - represents a snapshot of the rates of a {@link Meter}.\n *\n * @export\n * @interface MeteredRates\n */\nexport interface MeteredRates {\n  [rate: number]: number;\n}\n\n/**\n * Serializable version of a {@link Meter}.\n *\n * @export\n * @interface SerializableMetered\n * @extends {SerializableMetric}\n */\nexport interface SerializableMetered extends SerializableMetric {\n  /**\n   * Total count of events reported.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  count: number;\n  /**\n   * mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  meanRate: number;\n  /**\n   * Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n   *\n   * @type {MeteredRates}\n   * @memberof SerializableMetered\n   */\n  rates: MeteredRates;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableMetric.html":{"url":"interfaces/SerializableMetric.html","title":"interface - SerializableMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializableMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metric.ts\n        \n\n\n            \n                Description\n            \n            \n                A Metric with public fields for convenient use after serialization.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            group\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Description of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        group:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Group of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         Metadata\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Metadata\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Metadata map of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    name of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:         Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tags of the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { mapToMetadata, Metadata, MetadataContainer } from \"./metadata-container\";\nimport { mapToTags, Taggable, Tags } from \"./taggable\";\n\n/**\n * Determines if the metric passed is a {@link SerializableMetric} or not.\n *\n * @export\n * @param {(Groupable | MetadataContainer | Taggable | Metric | SerializableMetric)} metric\n * @returns {metric is SerializableMetric}\n */\nexport function isSerializableMetric(\n  metric: Groupable | MetadataContainer | Taggable | Metric | SerializableMetric): metric is SerializableMetric {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getGroup && typeof anyMetric.getGroup === \"function\") ||\n    (anyMetric.getMetadataMap && typeof anyMetric.getMetadataMap === \"function\") ||\n    (anyMetric.getTags && typeof anyMetric.getTags === \"function\") ||\n    (anyMetric.getName && typeof anyMetric.getName === \"function\")) {\n    return false;\n  }\n  return typeof anyMetric.name === \"string\";\n}\n\n/**\n * Convenience method the get the name of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricName(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.name;\n  } else {\n    return metric.getName();\n  }\n}\n\n/**\n * Convenience method the get the description of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricDescription(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.description;\n  } else {\n    return metric.getDescription();\n  }\n}\n\n/**\n * Convenience method the get the group of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Groupable | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricGroup(metric: Groupable | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.group;\n  } else {\n    return metric.getGroup();\n  }\n}\n\n/**\n * Convenience method the get the tags of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Taggable | SerializableMetric)} metric\n * @returns {Tags}\n */\nexport function getMetricTags(metric: Taggable | SerializableMetric): Tags {\n  if (isSerializableMetric(metric)) {\n    return (metric.tags as any) as Tags;\n  } else {\n    return mapToTags(metric.getTags());\n  }\n}\n\n/**\n * Convenience method the get the metadata of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(MetadataContainer | SerializableMetric)} metric\n * @returns {Metadata}\n */\nexport function getMetricMetadata(metric: MetadataContainer | SerializableMetric): Metadata {\n  if (isSerializableMetric(metric)) {\n    return metric.metadata;\n  } else {\n    return mapToMetadata(metric.getMetadataMap());\n  }\n}\n\n/**\n * Representation of a metric.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {MetadataContainer}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n  /**\n   * Gets the name of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getName(): string;\n\n  /**\n   * Sets the name of the metric.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Metric\n   */\n  setName(name: string): this;\n\n  /**\n   * Gets the description of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getDescription(): string;\n\n  /**\n   * Sets the description of the metric.\n   *\n   * @param {string} description\n   * @returns {this}\n   * @memberof Metric\n   */\n  setDescription(description: string): this;\n\n}\n\n/**\n * A {@link Metric} with public fields for convenient use after serialization.\n *\n * @export\n * @interface SerializableMetric\n * @extends {Metric}\n */\nexport interface SerializableMetric extends Metric {\n  /**\n   * Description of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  description: string;\n  /**\n   * Group of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  group: string;\n  /**\n   * Metadata map of the metric.\n   *\n   * @type {Metadata}\n   * @memberof SerializableMetric\n   */\n  metadata: Metadata;\n  /**\n   * name of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  name: string;\n  /**\n   * Tags of the metric.\n   *\n   * @type {Tags}\n   * @memberof SerializableMetric\n   */\n  tags: Tags;\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set description\n * - get / set tags\n * - get / set metadata\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n * @implements {SerializableMetric}\n */\nexport abstract class BaseMetric implements Metric, SerializableMetric {\n\n  /**\n   * A static number instance to give an unique id within an application instance.\n   * This counter is only unique per process, forked processes start from 0.\n   *\n   * @private\n   * @static\n   * @memberof BaseMetric\n   */\n  private static COUNTER = 0;\n\n  /**\n   * The unique id of this metric instance.\n   *\n   * @type {number}\n   * @memberof BaseMetric\n   */\n  public readonly id: number = BaseMetric.COUNTER++;\n  /**\n   * The group set to this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public group: string;\n  /**\n   * The name of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public name: string;\n  /**\n   * The description of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public description: string;\n  /**\n   * The metadata associated with an instance of class.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected metadataMap: Map = new Map();\n  /**\n   * Maps of tags for this metric.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected tagMap: Map = new Map();\n\n  public get metadata(): Metadata {\n    return mapToMetadata(this.metadataMap);\n  }\n\n  public get tags(): Tags {\n    return mapToTags(this.tagMap);\n  }\n\n  public getMetadataMap(): Map {\n    return this.metadataMap;\n  }\n\n  public getMetadata(name: string): T {\n    return this.metadataMap.get(name) as T;\n  }\n\n  public removeMetadata(name: string): T {\n    const value = this.metadataMap.get(name) as T;\n    this.metadataMap.delete(name);\n    return value;\n  }\n\n  public setMetadata(name: string, value: T): this {\n    this.metadataMap.set(name, value);\n    return this;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  public getGroup(): string {\n    return this.group;\n  }\n\n  public setGroup(group: string): this {\n    this.group = group;\n    return this;\n  }\n\n  public getTags(): Map {\n    return this.tagMap;\n  }\n\n  public getTag(name: string): string {\n    return this.tagMap.get(name);\n  }\n\n  public setTag(name: string, value: string): this {\n    this.tagMap.set(name, value);\n    return this;\n  }\n\n  public setTags(tags: Map): this {\n    this.tagMap = tags;\n    return this;\n  }\n\n  public addTags(tags: Map): this {\n    tags.forEach((value, key) => this.tagMap.set(key, value));\n    return this;\n  }\n\n  public removeTag(name: string): this {\n    this.tagMap.delete(name);\n    return this;\n  }\n\n  public removeTags(...names: string[]): this {\n    names.forEach((name) => this.removeTag(name));\n    return this;\n  }\n\n  public toString(): string {\n    if (this.group) {\n      return `${this.group}.${this.name}`;\n    }\n    return this.name;\n  }\n\n  /**\n   * Generates a serialized version of this metric.\n   *\n   * @returns {*}\n   * @memberof BaseMetric\n   */\n  public toJSON(): any {\n    return {\n      description: this.getDescription(),\n      group: this.getGroup(),\n      metadata: this.metadata,\n      name: this.getName(),\n      tags: this.tags,\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableSampling.html":{"url":"interfaces/SerializableSampling.html","title":"interface - SerializableSampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializableSampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/sampling.ts\n        \n\n\n            \n                Description\n            \n            \n                The serialized version of Sampling.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            snapshot\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        snapshot\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        snapshot:         SerializedSnapshot\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializedSnapshot\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gets the serialized, sorted collection of samples.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializedSnapshot, SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Interface for all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n  /**\n   * Gets the snapshot of values.\n   *\n   * @returns {Snapshot}\n   * @memberof Sampling\n   */\n  getSnapshot(): Snapshot;\n\n}\n\n/**\n * The serialized version of {@link Sampling}.\n *\n * @export\n * @interface SerializableSampling\n */\nexport interface SerializableSampling {\n\n  /**\n   * Gets the serialized, sorted collection of samples.\n   *\n   * @returns {SerializedSnapshot}\n   * @memberof SerializableSampling\n   */\n  snapshot: SerializedSnapshot;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableSampling} or not.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {metric is SerializableSampling}\n */\nexport function isSerializableSampling(metric: Sampling | SerializableSampling): metric is SerializableSampling {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getSnapshot && typeof anyMetric.getSnapshot === \"function\")) {\n    return false;\n  }\n  return anyMetric.hasOwnProperty(\"snapshot\");\n}\n\n/**\n * Convenience method to get the snapshot of a {@link Sampling} or a {@link SerializableSampling}.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {Snapshot}\n */\nexport function getSnapshot(metric: Sampling | SerializableSampling): Snapshot {\n  if (isSerializableSampling(metric)) {\n    return new SimpleSnapshot(metric.snapshot.values);\n  } else {\n    return metric.getSnapshot();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableSummarizing.html":{"url":"interfaces/SerializableSummarizing.html","title":"interface - SerializableSummarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializableSummarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/summarizing.ts\n        \n\n\n            \n                Description\n            \n            \n                The serialized version of Summarizing.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sum\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sum:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    int64 number in it's string representation.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n  /**\n   * Gets the sum of values.\n   *\n   * @returns {Int64Wrapper}\n   * @memberof Summarizing\n   */\n  getSum(): Int64Wrapper;\n\n}\n\n/**\n * The serialized version of {@link Summarizing}.\n *\n * @export\n * @interface SerializableSummarizing\n */\nexport interface SerializableSummarizing {\n\n  /**\n   * int64 number in it's string representation.\n   *\n   * @type {string}\n   * @memberof SerializableSummarizing\n   */\n  sum: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializedSnapshot.html":{"url":"interfaces/SerializedSnapshot.html","title":"interface - SerializedSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializedSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/snapshot.ts\n        \n\n\n            \n                Description\n            \n            \n                A serialized version of Snapshot.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sorted array of samples.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n  /**\n   * Gets the value of 75% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get75thPercentile(): number;\n\n  /**\n   * Gets the value of 95% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get95thPercentile(): number;\n\n  /**\n   * Gets the value of 98% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get98thPercentile(): number;\n\n  /**\n   * Gets the value of 99.9% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get999thPercentile(): number;\n\n  /**\n   * Gets the value of 99% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get99thPercentile(): number;\n\n  /**\n   * Gets the value of 50% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMedian(): number;\n\n  /**\n   * Gets the maximum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMax(): number;\n\n  /**\n   * Gets the minimum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMin(): number;\n\n  /**\n   * Gets all values.\n   *\n   * @returns {number[]}\n   * @memberof Snapshot\n   */\n  getValues(): number[];\n\n  /**\n   * Gets the number of values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  size(): number;\n\n  /**\n   * Gets the average of all values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMean(): number;\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getStdDev(): number;\n\n  /**\n   * Gets the value of boundary specified.\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getValue(quantile: number): number;\n\n}\n\n/**\n * A serialized version of {@link Snapshot}.\n *\n * @export\n * @interface SerializedSnapshot\n */\nexport interface SerializedSnapshot {\n  /**\n   * A sorted array of samples.\n   *\n   * @type {number[]}\n   * @memberof SerializedSnapshot\n   */\n  values: number[];\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot, SerializedSnapshot {\n\n  /**\n   * Sorted collection of values.\n   *\n   * @public\n   * @type {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public values: number[] = [];\n\n  /**\n   * Creates an instance of SimpleSnapshot.\n   *\n   * @param {number[]} values\n   * @memberof SimpleSnapshot\n   */\n  public constructor(values: number[]) {\n    this.values = values.slice(0, values.length);\n    this.values = this.values.sort((a, b) => a - b);\n  }\n\n  /**\n   * Calls getValue(0.75) to get the value of the 75% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get75thPercentile(): number {\n    return this.getValue(0.75);\n  }\n\n  /**\n   * Calls getValue(0.95) to get the value of the 95% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get95thPercentile(): number {\n    return this.getValue(0.95);\n  }\n\n  /**\n   * Calls getValue(0.98) to get the value of the 98% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get98thPercentile(): number {\n    return this.getValue(0.98);\n  }\n\n  /**\n   * Calls getValue(0.999) to get the value of the 99.9% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get999thPercentile(): number {\n    return this.getValue(0.999);\n  }\n\n  /**\n   * Calls getValue(0.99) to get the value of the 99% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get99thPercentile(): number {\n    return this.getValue(0.99);\n  }\n\n  /**\n   * Calls getValue(0.5) to get the value of the 50% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMedian(): number {\n    return this.getValue(0.5);\n  }\n\n  /**\n   * Gets the last value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMax(): number {\n    return this.values[this.values.length - 1];\n  }\n\n  /**\n   * Gets the first value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMin(): number {\n    return this.values[0];\n  }\n\n  /**\n   * Gets the value array.\n   *\n   * @returns {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public getValues(): number[] {\n    return this.values;\n  }\n\n  /**\n   * Gets the length of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Gets average value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMean(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.values.forEach((value) => sum += value);\n    return sum / this.values.length;\n  }\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getStdDev(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const mean = this.getMean();\n    let sum = 0;\n    this.values.forEach((value) => {\n      const diff = value - mean;\n      sum += diff * diff;\n    });\n\n    return Math.sqrt(sum / (this.values.length - 1));\n  }\n\n  /**\n   * Gets the value of the boundary specified.\n   *\n   * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n   *\n   * quantile | position / index | value\n   *\n   * 0.25 | 3 | 24.25\n   *\n   * 0.5 | 5 | 36\n   *\n   * 0.75 | 8 | 51,25\n   *\n   * 0.95 | 10 | NaN\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getValue(quantile: number): number {\n    if (quantile  1.0 || isNaN(quantile)) {\n      return NaN;\n    }\n\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const pos = quantile * (this.values.length + 1);\n    const index = Math.round(pos);\n\n    if (index = this.values.length) {\n      return this.getMax();\n    }\n\n    const lower = this.values[index - 1];\n    const upper = this.values[index];\n    return lower + (pos - Math.floor(pos)) * (upper - lower);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleGauge.html":{"url":"classes/SimpleGauge.html","title":"class - SimpleGauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleGauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/gauge.ts\n        \n\n\n            \n                Description\n            \n            \n                A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseMetric\n            \n\n            \n                Implements\n            \n            \n                            Gauge\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadataMap\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Protected\n                                tagMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                setValue\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/gauge.ts:42\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleGauge with an optional name.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional metric name.\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional metric description.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/gauge.ts:42\n                        \n                    \n\n            \n                \n                    The value - initially set to 0.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        COUNTER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:217\n\n                        \n                    \n\n            \n                \n                    A static number instance to give an unique id within an application instance.\nThis counter is only unique per process, forked processes start from 0.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:249\n\n                        \n                    \n\n            \n                \n                    The description of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:233\n\n                        \n                    \n\n            \n                \n                    The group set to this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : BaseMetric.COUNTER++\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:225\n\n                        \n                    \n\n            \n                \n                    The unique id of this metric instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        metadataMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:257\n\n                        \n                    \n\n            \n                \n                    The metadata associated with an instance of class.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:241\n\n                        \n                    \n\n            \n                \n                    The name of this metric.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        tagMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                        \n                            \n                                Inherited from         BaseMetric\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseMetric:265\n\n                        \n                    \n\n            \n                \n                    Maps of tags for this metric.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:63\n                \n            \n\n\n            \n                \n                    Gets the current value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:74\n                \n            \n\n\n            \n                \n                    Sets the current value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:85\n\n                \n            \n\n\n            \n                \n                    Same as BaseMetric, also adding value property.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:339\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDescription()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:303\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:312\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:279\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMetadataMap\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadataMap()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:275\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:325\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:321\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:283\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:344\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:349\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDescription(description: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:307\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroup(group: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:316\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:289\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setName\n                        \n                    \n                \n            \n            \n                \n                    \n                    setName(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:329\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:334\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:354\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { BaseMetric, Metric, SerializableMetric } from './model/metric'\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @extends {SerializableMetric}\n * @template T\n */\nexport interface Gauge extends Metric, SerializableMetric {\n\n  /**\n   * Gets the current value of the gauge.\n   *\n   * @returns {T}\n   * @memberof Gauge\n   */\n  getValue(): T\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n  /**\n   * The value - initially set to 0.\n   *\n   * @private\n   * @type {number}\n   * @memberof SimpleGauge\n   */\n  private value: number = 0\n\n  /**\n   * Creates an instance of SimpleGauge with an optional name.\n   *\n   * @param {string} [name] optional metric name.\n   * @param {string} [description] optional metric description.\n   * @memberof SimpleGauge\n   */\n  public constructor (name?: string, description?: string) {\n    super()\n    this.name = name\n    this.description = description\n  }\n\n  /**\n   * Gets the current value.\n   *\n   * @returns {number}\n   * @memberof SimpleGauge\n   */\n  public getValue (): number {\n    return this.value\n  }\n\n  /**\n   * Sets the current value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof SimpleGauge\n   */\n  public setValue (value: number): this {\n    this.value = value\n    return this\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SimpleGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.value\n    return json\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleSnapshot.html":{"url":"classes/SimpleSnapshot.html","title":"class - SimpleSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/snapshot.ts\n        \n\n\n            \n                Description\n            \n            \n                Default implementation of the Snapshot interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Snapshot\n                            SerializedSnapshot\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(values: number[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:150\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:150\n                        \n                    \n\n            \n                \n                    Sorted collection of values.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get75thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get75thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:169\n                \n            \n\n\n            \n                \n                    Calls getValue(0.75) to get the value of the 75% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get95thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get95thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:179\n                \n            \n\n\n            \n                \n                    Calls getValue(0.95) to get the value of the 95% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get98thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get98thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:189\n                \n            \n\n\n            \n                \n                    Calls getValue(0.98) to get the value of the 98% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get999thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get999thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:199\n                \n            \n\n\n            \n                \n                    Calls getValue(0.999) to get the value of the 99.9% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get99thPercentile\n                        \n                    \n                \n            \n            \n                \n                    \n                    get99thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:209\n                \n            \n\n\n            \n                \n                    Calls getValue(0.99) to get the value of the 99% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMax\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMax()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:229\n                \n            \n\n\n            \n                \n                    Gets the last value of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMean\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMean()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:269\n                \n            \n\n\n            \n                \n                    Gets average value of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMedian\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedian()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:219\n                \n            \n\n\n            \n                \n                    Calls getValue(0.5) to get the value of the 50% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMin\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMin()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:239\n                \n            \n\n\n            \n                \n                    Gets the first value of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStdDev\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStdDev()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:285\n                \n            \n\n\n            \n                \n                    Gets the average deviation among the values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue(quantile: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:319\n                \n            \n\n\n            \n                \n                    Gets the value of the boundary specified.\nE.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\nquantile | position / index | value\n0.25 | 3 | 24.25\n0.5 | 5 | 36\n0.75 | 8 | 51,25\n0.95 | 10 | NaN\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quantile\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getValues\n                        \n                    \n                \n            \n            \n                \n                    \n                    getValues()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:249\n                \n            \n\n\n            \n                \n                    Gets the value array.\n\n\n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        size\n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:259\n                \n            \n\n\n            \n                \n                    Gets the length of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n  /**\n   * Gets the value of 75% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get75thPercentile(): number;\n\n  /**\n   * Gets the value of 95% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get95thPercentile(): number;\n\n  /**\n   * Gets the value of 98% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get98thPercentile(): number;\n\n  /**\n   * Gets the value of 99.9% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get999thPercentile(): number;\n\n  /**\n   * Gets the value of 99% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get99thPercentile(): number;\n\n  /**\n   * Gets the value of 50% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMedian(): number;\n\n  /**\n   * Gets the maximum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMax(): number;\n\n  /**\n   * Gets the minimum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMin(): number;\n\n  /**\n   * Gets all values.\n   *\n   * @returns {number[]}\n   * @memberof Snapshot\n   */\n  getValues(): number[];\n\n  /**\n   * Gets the number of values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  size(): number;\n\n  /**\n   * Gets the average of all values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMean(): number;\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getStdDev(): number;\n\n  /**\n   * Gets the value of boundary specified.\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getValue(quantile: number): number;\n\n}\n\n/**\n * A serialized version of {@link Snapshot}.\n *\n * @export\n * @interface SerializedSnapshot\n */\nexport interface SerializedSnapshot {\n  /**\n   * A sorted array of samples.\n   *\n   * @type {number[]}\n   * @memberof SerializedSnapshot\n   */\n  values: number[];\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot, SerializedSnapshot {\n\n  /**\n   * Sorted collection of values.\n   *\n   * @public\n   * @type {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public values: number[] = [];\n\n  /**\n   * Creates an instance of SimpleSnapshot.\n   *\n   * @param {number[]} values\n   * @memberof SimpleSnapshot\n   */\n  public constructor(values: number[]) {\n    this.values = values.slice(0, values.length);\n    this.values = this.values.sort((a, b) => a - b);\n  }\n\n  /**\n   * Calls getValue(0.75) to get the value of the 75% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get75thPercentile(): number {\n    return this.getValue(0.75);\n  }\n\n  /**\n   * Calls getValue(0.95) to get the value of the 95% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get95thPercentile(): number {\n    return this.getValue(0.95);\n  }\n\n  /**\n   * Calls getValue(0.98) to get the value of the 98% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get98thPercentile(): number {\n    return this.getValue(0.98);\n  }\n\n  /**\n   * Calls getValue(0.999) to get the value of the 99.9% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get999thPercentile(): number {\n    return this.getValue(0.999);\n  }\n\n  /**\n   * Calls getValue(0.99) to get the value of the 99% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get99thPercentile(): number {\n    return this.getValue(0.99);\n  }\n\n  /**\n   * Calls getValue(0.5) to get the value of the 50% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMedian(): number {\n    return this.getValue(0.5);\n  }\n\n  /**\n   * Gets the last value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMax(): number {\n    return this.values[this.values.length - 1];\n  }\n\n  /**\n   * Gets the first value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMin(): number {\n    return this.values[0];\n  }\n\n  /**\n   * Gets the value array.\n   *\n   * @returns {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public getValues(): number[] {\n    return this.values;\n  }\n\n  /**\n   * Gets the length of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Gets average value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMean(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.values.forEach((value) => sum += value);\n    return sum / this.values.length;\n  }\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getStdDev(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const mean = this.getMean();\n    let sum = 0;\n    this.values.forEach((value) => {\n      const diff = value - mean;\n      sum += diff * diff;\n    });\n\n    return Math.sqrt(sum / (this.values.length - 1));\n  }\n\n  /**\n   * Gets the value of the boundary specified.\n   *\n   * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n   *\n   * quantile | position / index | value\n   *\n   * 0.25 | 3 | 24.25\n   *\n   * 0.5 | 5 | 36\n   *\n   * 0.75 | 8 | 51,25\n   *\n   * 0.95 | 10 | NaN\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getValue(quantile: number): number {\n    if (quantile  1.0 || isNaN(quantile)) {\n      return NaN;\n    }\n\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const pos = quantile * (this.values.length + 1);\n    const index = Math.round(pos);\n\n    if (index = this.values.length) {\n      return this.getMax();\n    }\n\n    const lower = this.values[index - 1];\n    const upper = this.values[index];\n    return lower + (pos - Math.floor(pos)) * (upper - lower);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeAttributeInterface.html":{"url":"interfaces/SizeAttributeInterface.html","title":"interface - SizeAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SizeAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            size\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeMethodInterface.html":{"url":"interfaces/SizeMethodInterface.html","title":"interface - SizeMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SizeMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        size\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n            \n                \nsize()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/size-gauge.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlidingWindowReservoir.html":{"url":"classes/SlidingWindowReservoir.html","title":"class - SlidingWindowReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlidingWindowReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/reservoir.ts\n        \n\n\n            \n                Description\n            \n            \n                A reservoir that keeps the order of values and restarts\nat the beginning if the maximum number of values is reached.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Reservoir\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                index\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:152\n                            \n                        \n\n                \n                    \n                            Creates an instance of SlidingWindowReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:152\n                        \n                    \n\n            \n                \n                    The current index in the value array.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:144\n                        \n                    \n\n            \n                \n                    The capacity of the reservoir.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:136\n                        \n                    \n\n            \n                \n                    The values.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        size\n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:170\n                \n            \n\n\n            \n                \n                    Gets the number of values, but at may the capacity of the reservoir.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        snapshot\n                        \n                    \n                \n            \n            \n                \n                    \n                    snapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:198\n                \n            \n\n\n            \n                \n                    Creates a new snapshot using the values array.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:183\n                \n            \n\n\n            \n                \n                    Adds the value to the array of values until the capacity\nof the reservoir is reached. If the maximum number of\nvalues is reached, the insertion restarts at the beginning.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n  /**\n   * Gets the capacity of this reservoir.\n   *\n   * @returns {number}\n   * @memberof Reservoir\n   */\n  size(): number;\n\n  /**\n   * Adds a value to the reservoir.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Reservoir\n   */\n  update(value: number): this;\n\n  /**\n   * Creates a new snapshot of this reservoir.\n   *\n   * @returns {Snapshot}\n   * @memberof Reservoir\n   */\n  snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n  /**\n   * The values.\n   *\n   * @private\n   * @type {number[]}\n   * @memberof DefaultReservoir\n   */\n  private values: number[] = [];\n  /**\n   * The capacity of this reservoir.\n   *\n   * @private\n   * @type {number}\n   * @memberof DefaultReservoir\n   */\n  private maxSize: number;\n\n  /**\n   * Creates an instance of DefaultReservoir.\n   *\n   * @param {number} maxSize\n   * @memberof DefaultReservoir\n   */\n  public constructor(maxSize: number) {\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Gets the actual number of value, but at max the specified maximum.\n   *\n   * @returns {number}\n   * @memberof DefaultReservoir\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Adds the value to the array of numbers until the maximum number of\n   * values is reached. If the maximum number of values is reached\n   * an old value at a random position is replaced with the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof DefaultReservoir\n   */\n  public update(value: number): this {\n    if (this.values.length \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Snapshot.html":{"url":"interfaces/Snapshot.html","title":"interface - Snapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Snapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/snapshot.ts\n        \n\n\n            \n                Description\n            \n            \n                A static state of a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get75thPercentile\n                                    \n                                \n                                \n                                    \n                                        get95thPercentile\n                                    \n                                \n                                \n                                    \n                                        get98thPercentile\n                                    \n                                \n                                \n                                    \n                                        get999thPercentile\n                                    \n                                \n                                \n                                    \n                                        get99thPercentile\n                                    \n                                \n                                \n                                    \n                                        getMax\n                                    \n                                \n                                \n                                    \n                                        getMean\n                                    \n                                \n                                \n                                    \n                                        getMedian\n                                    \n                                \n                                \n                                    \n                                        getMin\n                                    \n                                \n                                \n                                    \n                                        getStdDev\n                                    \n                                \n                                \n                                    \n                                        getValue\n                                    \n                                \n                                \n                                    \n                                        getValues\n                                    \n                                \n                                \n                                    \n                                        size\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get75thPercentile\n                        \n                    \n                \n            \n            \n                \nget75thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:17\n                \n            \n\n\n            \n                \n                    Gets the value of 75% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get95thPercentile\n                        \n                    \n                \n            \n            \n                \nget95thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:25\n                \n            \n\n\n            \n                \n                    Gets the value of 95% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get98thPercentile\n                        \n                    \n                \n            \n            \n                \nget98thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:33\n                \n            \n\n\n            \n                \n                    Gets the value of 98% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get999thPercentile\n                        \n                    \n                \n            \n            \n                \nget999thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:41\n                \n            \n\n\n            \n                \n                    Gets the value of 99.9% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get99thPercentile\n                        \n                    \n                \n            \n            \n                \nget99thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:49\n                \n            \n\n\n            \n                \n                    Gets the value of 99% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMax\n                        \n                    \n                \n            \n            \n                \ngetMax()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:65\n                \n            \n\n\n            \n                \n                    Gets the maximum value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMean\n                        \n                    \n                \n            \n            \n                \ngetMean()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:97\n                \n            \n\n\n            \n                \n                    Gets the average of all values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMedian\n                        \n                    \n                \n            \n            \n                \ngetMedian()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:57\n                \n            \n\n\n            \n                \n                    Gets the value of 50% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMin\n                        \n                    \n                \n            \n            \n                \ngetMin()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:73\n                \n            \n\n\n            \n                \n                    Gets the minimum value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStdDev\n                        \n                    \n                \n            \n            \n                \ngetStdDev()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:105\n                \n            \n\n\n            \n                \n                    Gets the average deviation among the values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValue\n                        \n                    \n                \n            \n            \n                \ngetValue(quantile: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:114\n                \n            \n\n\n            \n                \n                    Gets the value of boundary specified.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quantile\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValues\n                        \n                    \n                \n            \n            \n                \ngetValues()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:81\n                \n            \n\n\n            \n                \n                    Gets all values.\n\n\n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n            \n                \nsize()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:89\n                \n            \n\n\n            \n                \n                    Gets the number of values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n  /**\n   * Gets the value of 75% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get75thPercentile(): number;\n\n  /**\n   * Gets the value of 95% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get95thPercentile(): number;\n\n  /**\n   * Gets the value of 98% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get98thPercentile(): number;\n\n  /**\n   * Gets the value of 99.9% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get999thPercentile(): number;\n\n  /**\n   * Gets the value of 99% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get99thPercentile(): number;\n\n  /**\n   * Gets the value of 50% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMedian(): number;\n\n  /**\n   * Gets the maximum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMax(): number;\n\n  /**\n   * Gets the minimum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMin(): number;\n\n  /**\n   * Gets all values.\n   *\n   * @returns {number[]}\n   * @memberof Snapshot\n   */\n  getValues(): number[];\n\n  /**\n   * Gets the number of values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  size(): number;\n\n  /**\n   * Gets the average of all values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMean(): number;\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getStdDev(): number;\n\n  /**\n   * Gets the value of boundary specified.\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getValue(quantile: number): number;\n\n}\n\n/**\n * A serialized version of {@link Snapshot}.\n *\n * @export\n * @interface SerializedSnapshot\n */\nexport interface SerializedSnapshot {\n  /**\n   * A sorted array of samples.\n   *\n   * @type {number[]}\n   * @memberof SerializedSnapshot\n   */\n  values: number[];\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot, SerializedSnapshot {\n\n  /**\n   * Sorted collection of values.\n   *\n   * @public\n   * @type {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public values: number[] = [];\n\n  /**\n   * Creates an instance of SimpleSnapshot.\n   *\n   * @param {number[]} values\n   * @memberof SimpleSnapshot\n   */\n  public constructor(values: number[]) {\n    this.values = values.slice(0, values.length);\n    this.values = this.values.sort((a, b) => a - b);\n  }\n\n  /**\n   * Calls getValue(0.75) to get the value of the 75% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get75thPercentile(): number {\n    return this.getValue(0.75);\n  }\n\n  /**\n   * Calls getValue(0.95) to get the value of the 95% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get95thPercentile(): number {\n    return this.getValue(0.95);\n  }\n\n  /**\n   * Calls getValue(0.98) to get the value of the 98% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get98thPercentile(): number {\n    return this.getValue(0.98);\n  }\n\n  /**\n   * Calls getValue(0.999) to get the value of the 99.9% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get999thPercentile(): number {\n    return this.getValue(0.999);\n  }\n\n  /**\n   * Calls getValue(0.99) to get the value of the 99% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get99thPercentile(): number {\n    return this.getValue(0.99);\n  }\n\n  /**\n   * Calls getValue(0.5) to get the value of the 50% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMedian(): number {\n    return this.getValue(0.5);\n  }\n\n  /**\n   * Gets the last value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMax(): number {\n    return this.values[this.values.length - 1];\n  }\n\n  /**\n   * Gets the first value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMin(): number {\n    return this.values[0];\n  }\n\n  /**\n   * Gets the value array.\n   *\n   * @returns {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public getValues(): number[] {\n    return this.values;\n  }\n\n  /**\n   * Gets the length of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Gets average value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMean(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.values.forEach((value) => sum += value);\n    return sum / this.values.length;\n  }\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getStdDev(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const mean = this.getMean();\n    let sum = 0;\n    this.values.forEach((value) => {\n      const diff = value - mean;\n      sum += diff * diff;\n    });\n\n    return Math.sqrt(sum / (this.values.length - 1));\n  }\n\n  /**\n   * Gets the value of the boundary specified.\n   *\n   * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n   *\n   * quantile | position / index | value\n   *\n   * 0.25 | 3 | 24.25\n   *\n   * 0.5 | 5 | 36\n   *\n   * 0.75 | 8 | 51,25\n   *\n   * 0.95 | 10 | NaN\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getValue(quantile: number): number {\n    if (quantile  1.0 || isNaN(quantile)) {\n      return NaN;\n    }\n\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const pos = quantile * (this.values.length + 1);\n    const index = Math.round(pos);\n\n    if (index = this.values.length) {\n      return this.getMax();\n    }\n\n    const lower = this.values[index - 1];\n    const upper = this.values[index];\n    return lower + (pos - Math.floor(pos)) * (upper - lower);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpaceHistory.html":{"url":"classes/SpaceHistory.html","title":"class - SpaceHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpaceHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n        \n\n\n            \n                Description\n            \n            \n                A collection of SimpleGauge values for space metrics.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                availableSize\n                            \n                            \n                                    Public\n                                physicalSize\n                            \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                usedSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(spaceName: string, metrics: Metric[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:45\n                            \n                        \n\n                \n                    \n                            Creates an instance of SpaceHistory.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spaceName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metrics\n                                                  \n                                                        \n                                                                        Metric[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        availableSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SimpleGauge\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:38\n                        \n                    \n\n            \n                \n                    Available size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        physicalSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SimpleGauge\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:45\n                        \n                    \n\n            \n                \n                    Physical size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SimpleGauge\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:24\n                        \n                    \n\n            \n                \n                    Total size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        usedSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SimpleGauge\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:31\n                        \n                    \n\n            \n                \n                    Used size.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  BaseMetric,\n  Metric,\n  MetricSet,\n  SimpleGauge\n} from 'inspector-metrics'\nimport * as v8 from 'v8'\n\n/**\n * A collection of {@link SimpleGauge} values for space metrics.\n *\n * @export\n * @class SpaceHistory\n */\nexport class SpaceHistory {\n  /**\n   * Total size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public size: SimpleGauge;\n  /**\n   * Used size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public usedSize: SimpleGauge;\n  /**\n   * Available size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public availableSize: SimpleGauge;\n  /**\n   * Physical size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public physicalSize: SimpleGauge;\n\n  /**\n   * Creates an instance of SpaceHistory.\n   *\n   * @param {string} spaceName\n   * @param {Metric[]} metrics\n   * @memberof SpaceHistory\n   */\n  public constructor (spaceName: string, metrics: Metric[]) {\n    this.size = new SimpleGauge('spaceSize')\n    this.usedSize = new SimpleGauge('spaceUsedSize')\n    this.availableSize = new SimpleGauge('spaceAvailableSize')\n    this.physicalSize = new SimpleGauge('spacePhysicalSize')\n\n    this.size.setTag('space', spaceName)\n    this.usedSize.setTag('space', spaceName)\n    this.availableSize.setTag('space', spaceName)\n    this.physicalSize.setTag('space', spaceName)\n\n    metrics.push(this.size)\n    metrics.push(this.usedSize)\n    metrics.push(this.availableSize)\n    metrics.push(this.physicalSize)\n  }\n}\n\n/**\n * Metric set with values related to the memory nodejs uses.\n *\n * @export\n * @class V8MemoryMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8MemoryMetrics extends BaseMetric implements MetricSet {\n  /**\n   * Contains all the metrics in this metric-set.\n   *\n   * @private\n   * @type {Metric[]}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly metrics: Metric[] = [];\n  /**\n   * Stores the size gauges for different specs.\n   *\n   * @private\n   * @type {Map}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly spaces: Map = new Map();\n  /**\n   * Total heap size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalHeapSize: SimpleGauge = new SimpleGauge('totalHeapSize');\n  /**\n   * Total available size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalAvailableSize: SimpleGauge = new SimpleGauge('totalAvailableSize');\n  /**\n   * Total physical size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalPhysicalSize: SimpleGauge = new SimpleGauge('totalPhysicalSize');\n  /**\n   * Total heap size for executable code.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalHeapSizeExecutable: SimpleGauge = new SimpleGauge('totalHeapSizeExecutable');\n  /**\n   * Used heap size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly usedHeapSize: SimpleGauge = new SimpleGauge('usedHeapSize');\n  /**\n   * Maximum heap size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly heapSizeLimit: SimpleGauge = new SimpleGauge('heapSizeLimit');\n  /**\n   * Allocated memory.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly mallocedMemory: SimpleGauge = new SimpleGauge('mallocedMemory');\n  /**\n   * Maximum allocated memory.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly peakMallocedMemory: SimpleGauge = new SimpleGauge('peakMallocedMemory');\n  /**\n   * The timer reference from the scheduler.\n   *\n   * @private\n   * @type {NodeJS.Timer}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly intervalRef: NodeJS.Timer;\n\n  /**\n   * Creates an instance of V8MemoryMetrics.\n   *\n   * @param {string} name\n   * @param {number} [sampleRate=1000]\n   * @memberof V8MemoryMetrics\n   */\n  public constructor (name: string, sampleRate = 1000) {\n    super()\n    this.name = name\n\n    this.metrics.push(this.totalHeapSize)\n    this.metrics.push(this.totalPhysicalSize)\n    this.metrics.push(this.totalAvailableSize)\n    this.metrics.push(this.totalHeapSizeExecutable)\n    this.metrics.push(this.usedHeapSize)\n    this.metrics.push(this.heapSizeLimit)\n    this.metrics.push(this.mallocedMemory)\n    this.metrics.push(this.peakMallocedMemory)\n\n    this.spaces.set('new_space', new SpaceHistory('new_space', this.metrics))\n    this.spaces.set('old_space', new SpaceHistory('old_space', this.metrics))\n    this.spaces.set('code_space', new SpaceHistory('code_space', this.metrics))\n    this.spaces.set('map_space', new SpaceHistory('map_space', this.metrics))\n    this.spaces.set('large_object_space', new SpaceHistory('large_object_space', this.metrics))\n\n    this.intervalRef = global.setInterval(() => {\n      const heapSpaceStatistics = v8.getHeapSpaceStatistics()\n      const heapStatistics = v8.getHeapStatistics()\n\n      this.totalHeapSize.setValue(heapStatistics.total_heap_size)\n      this.totalPhysicalSize.setValue(heapStatistics.total_physical_size)\n      this.totalAvailableSize.setValue(heapStatistics.total_available_size)\n      this.totalHeapSizeExecutable.setValue(heapStatistics.total_heap_size_executable)\n      this.usedHeapSize.setValue(heapStatistics.used_heap_size)\n      this.heapSizeLimit.setValue(heapStatistics.heap_size_limit)\n      this.mallocedMemory.setValue(heapStatistics.heap_size_limit)\n      this.peakMallocedMemory.setValue(heapStatistics.heap_size_limit)\n\n      heapSpaceStatistics.forEach((heapSpaceStatistic) => {\n        if (this.spaces.has(heapSpaceStatistic.space_name)) {\n          const history = this.spaces.get(heapSpaceStatistic.space_name)\n          history.availableSize.setValue(heapSpaceStatistic.space_available_size)\n          history.physicalSize.setValue(heapSpaceStatistic.physical_space_size)\n          history.size.setValue(heapSpaceStatistic.space_size)\n          history.usedSize.setValue(heapSpaceStatistic.space_used_size)\n        }\n      })\n    }, sampleRate)\n  }\n\n  /**\n   * Stops the recording of memory metrics.\n   *\n   * @memberof V8MemoryMetrics\n   */\n  public stop (): void {\n    this.intervalRef.unref()\n  }\n\n  /**\n   * Gets all metrics.\n   *\n   * @returns {Map}\n   * @memberof V8MemoryMetrics\n   */\n  public getMetrics (): Map {\n    const map: Map = new Map()\n    this.metrics.forEach((metric) => map.set(metric.getName(), metric))\n    return map\n  }\n\n  /**\n   * Gets all metrics.\n   *\n   * @returns {Metric[]}\n   * @memberof V8MemoryMetrics\n   */\n  public getMetricList (): Metric[] {\n    return this.metrics\n  }\n\n  /**\n   * Sets the group of this metric-set as well as all contained metrics.\n   *\n   * @param {string} group\n   * @returns {this}\n   * @memberof V8MemoryMetrics\n   */\n  public setGroup (group: string): this {\n    this.group = group\n\n    this.totalHeapSize.setGroup(group)\n    this.totalAvailableSize.setGroup(group)\n    this.totalPhysicalSize.setGroup(group)\n    this.totalHeapSizeExecutable.setGroup(group)\n    this.usedHeapSize.setGroup(group)\n    this.heapSizeLimit.setGroup(group)\n    this.mallocedMemory.setGroup(group)\n    this.peakMallocedMemory.setGroup(group)\n\n    this.spaces.forEach((history) => {\n      history.availableSize.setGroup(group)\n      history.physicalSize.setGroup(group)\n      history.size.setGroup(group)\n      history.usedSize.setGroup(group)\n    })\n\n    return this\n  }\n\n  /**\n   * Sets the tags of this metric-set all contained metrics accordingly.\n   *\n   * @param {string} name\n   * @param {string} value\n   * @returns {this}\n   * @memberof V8MemoryMetrics\n   */\n  public setTag (name: string, value: string): this {\n    this.tagMap.set(name, value)\n\n    this.totalHeapSize.setTag(name, value)\n    this.totalAvailableSize.setTag(name, value)\n    this.totalPhysicalSize.setTag(name, value)\n    this.totalHeapSizeExecutable.setTag(name, value)\n    this.usedHeapSize.setTag(name, value)\n    this.heapSizeLimit.setTag(name, value)\n    this.mallocedMemory.setTag(name, value)\n    this.peakMallocedMemory.setTag(name, value)\n\n    this.spaces.forEach((history) => {\n      history.availableSize.setTag(name, value)\n      history.physicalSize.setTag(name, value)\n      history.size.setTag(name, value)\n      history.usedSize.setTag(name, value)\n    })\n\n    return this\n  }\n\n  /**\n   * Removes the specified tag from this metric-set and all contained metrics accordingly.\n   *\n   * @param {string} name\n   * @memberof V8MemoryMetrics\n   */\n  public removeTag (name: string): this {\n    this.tagMap.delete(name)\n\n    this.totalHeapSize.removeTag(name)\n    this.totalAvailableSize.removeTag(name)\n    this.totalPhysicalSize.removeTag(name)\n    this.totalHeapSizeExecutable.removeTag(name)\n    this.usedHeapSize.removeTag(name)\n    this.heapSizeLimit.removeTag(name)\n    this.mallocedMemory.removeTag(name)\n    this.peakMallocedMemory.removeTag(name)\n\n    this.spaces.forEach((history) => {\n      history.availableSize.removeTag(name)\n      history.physicalSize.removeTag(name)\n      history.size.removeTag(name)\n      history.usedSize.removeTag(name)\n    })\n\n    return this\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StdClock.html":{"url":"classes/StdClock.html","title":"class - StdClock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StdClock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/clock.ts\n        \n\n\n            \n                Description\n            \n            \n                Default implementation of a Clock. Uses Date.now() as source of truth.\n\n            \n\n            \n                Extends\n            \n            \n                        Clock\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        time\n                        \n                    \n                \n            \n            \n                \n                    \n                    time()\n                \n            \n\n\n            \n                \n                    Inherited from         Clock\n\n                \n            \n            \n                \n                        Defined in         Clock:65\n\n                \n            \n\n\n            \n                \n                    Returns a Time object who's nanoseconds component is always zero.\n\n\n                    \n                    \n                    \n                        Returns :         Time\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n  milliseconds: number\n  nanoseconds: number\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff (one: Time, two: Time): number {\n  if (!one || !two) {\n    return 0\n  }\n  const oneValue: number = one.nanoseconds + one.milliseconds * 1000000\n  const twoValue: number = two.nanoseconds + two.milliseconds * 1000000\n  return twoValue - oneValue\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n  /**\n   * Gets the current point in time according to the logic of the clock implementation.\n   *\n   * @abstract\n   * @returns {Time}\n   * @memberof Clock\n   */\n  public abstract time (): Time\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n  /**\n   * Returns a Time object who's nanoseconds component is always zero.\n   *\n   * @returns {Time}\n   * @memberof StdClock\n   */\n  public time (): Time {\n    const time = {\n      milliseconds: Date.now(),\n      nanoseconds: 0\n    }\n    return time\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopWatch.html":{"url":"classes/StopWatch.html","title":"class - StopWatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopWatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/timer.ts\n        \n\n\n            \n                Description\n            \n            \n                A convenience wrapper class for a Timer to measure durations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clock\n                            \n                            \n                                    Private\n                                startTime\n                            \n                            \n                                    Private\n                                    Readonly\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(clock: Clock, timer: Timer)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/timer.ts:46\n                            \n                        \n\n                \n                    \n                            Creates an instance of StopWatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                        Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timer\n                                                  \n                                                        \n                                                                        Timer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Clock\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/timer.ts:30\n                        \n                    \n\n            \n                \n                    Used to determine a duration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Time\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/timer.ts:46\n                        \n                    \n\n            \n                \n                    Gets set when the start function is invoked using the clock.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        timer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Timer\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/timer.ts:38\n                        \n                    \n\n            \n                \n                    The timer the duration is reported to.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        start\n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/timer.ts:66\n                \n            \n\n\n            \n                \n                    Sets the startTime variable.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stop\n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/timer.ts:78\n                \n            \n\n\n            \n                \n                    Adds the duration between the last invocation of the start function\nand this invocation to the timer in nanoseconds.\n\n\n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Clock, diff, Time } from './clock'\nimport { Histogram } from './histogram'\nimport { Meter } from './meter'\nimport { BucketCounting, Buckets, BucketToCountMap, SerializableBucketCounting } from './model/counting'\nimport { Int64Wrapper } from './model/int64'\nimport { Metered, MeteredRates, SerializableMetered } from './model/metered'\nimport { BaseMetric } from './model/metric'\nimport { Reservoir } from './model/reservoir'\nimport { Sampling, SerializableSampling } from './model/sampling'\nimport { SerializedSnapshot, Snapshot } from './model/snapshot'\nimport { SerializableSummarizing, Summarizing } from './model/summarizing'\nimport { NANOSECOND, TimeUnit } from './model/time-unit'\n\n/**\n * A convenience wrapper class for a {@link Timer} to measure durations.\n *\n * @export\n * @class StopWatch\n */\nexport class StopWatch {\n  /**\n   * Used to determine a duration.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof StopWatch\n   */\n  private readonly clock: Clock\n  /**\n   * The timer the duration is reported to.\n   *\n   * @private\n   * @type {Timer}\n   * @memberof StopWatch\n   */\n  private readonly timer: Timer\n  /**\n   * Gets set when the start function is invoked using the clock.\n   *\n   * @private\n   * @type {Time}\n   * @memberof StopWatch\n   */\n  private startTime: Time\n\n  /**\n   * Creates an instance of StopWatch.\n   *\n   * @param {Clock} clock\n   * @param {Timer} timer\n   * @memberof StopWatch\n   */\n  public constructor (clock: Clock, timer: Timer) {\n    this.clock = clock\n    this.timer = timer\n  }\n\n  /**\n   * Sets the startTime variable.\n   *\n   * @returns {this}\n   * @memberof StopWatch\n   */\n  public start (): this {\n    this.startTime = this.clock.time()\n    return this\n  }\n\n  /**\n   * Adds the duration between the last invocation of the start function\n   * and this invocation to the timer in nanoseconds.\n   *\n   * @returns {this}\n   * @memberof StopWatch\n   */\n  public stop (): this {\n    this.timer.addDuration(diff(this.startTime, this.clock.time()), NANOSECOND)\n    return this\n  }\n}\n\n/**\n * A Timer is a combination of a {@link Histogram} (for the duration of an event)\n * and a {@link Meter} (for the rate of events).\n *\n * @export\n * @class Timer\n * @extends {BaseMetric}\n * @implements {Metered}\n * @implements {Sampling}\n */\nexport class Timer extends BaseMetric implements\n    BucketCounting, Metered, Sampling, Summarizing,\n    SerializableSummarizing, SerializableBucketCounting,\n    SerializableSampling, SerializableMetered {\n  /**\n   * Used to determine a duration.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof Timer\n   */\n  private readonly clock: Clock\n  /**\n   * Metric to measure the event rate.\n   *\n   * @private\n   * @type {Meter}\n   * @memberof Timer\n   */\n  private readonly meter: Meter\n  /**\n   * Metric to measure the duration of events.\n   *\n   * @private\n   * @type {Histogram}\n   * @memberof Timer\n   */\n  private readonly histogram: Histogram\n\n  /**\n   * Creates an instance of Timer.\n   *\n   * @param {Clock} clock\n   * @param {Reservoir} reservoir\n   * @param {string} [name]\n   * @param {string} [description]\n   * @param {string} [buckets=new Buckets()]\n   * @memberof Timer\n   */\n  public constructor (\n    clock: Clock,\n    reservoir: Reservoir,\n    name?: string,\n    description?: string,\n    buckets: Buckets = new Buckets()) {\n    super()\n    this.clock = clock\n    this.name = name\n    this.description = description\n    this.meter = new Meter(clock, 1, name)\n    this.histogram = new Histogram(reservoir, name, description, buckets)\n  }\n\n  /**\n   * Gets the bucket boundaries from the internal {@link Histogram}.\n   *\n   * @returns {number[]}\n   * @memberof Timer\n   */\n  public get buckets (): number[] {\n    return this.histogram.buckets\n  }\n\n  /**\n   * Gets the {@link BucketToCountMap} from the internal {@link Histogram}.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof Timer\n   */\n  public get counts (): BucketToCountMap {\n    return this.histogram.counts\n  }\n\n  /**\n   * Gets the 64bit number as string from the internal {@link Histogram}.\n   *\n   * @readonly\n   * @type {string}\n   * @memberof Timer\n   */\n  public get sum (): string {\n    return this.histogram.sum\n  }\n\n  /**\n   * Gets the {@link SerializedSnapshot} from the internal histogram.\n   *\n   * @readonly\n   * @type {SerializedSnapshot}\n   * @memberof Timer\n   */\n  public get snapshot (): SerializedSnapshot {\n    return this.histogram.snapshot\n  }\n\n  /**\n   * Gets the count of event reported.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof Timer\n   */\n  public get count (): number {\n    return this.getCount()\n  }\n\n  /**\n   * Getter method for mean-rate\n   *\n   * @readonly\n   * @type {number}\n   * @memberof Timer\n   */\n  public get meanRate (): number {\n    return this.getMeanRate()\n  }\n\n  /**\n   * Getter method for rates 'snapshot'\n   *\n   * @readonly\n   * @type {MeteredRates}\n   * @memberof Timer\n   */\n  public get rates (): MeteredRates {\n    return {\n      15: this.get15MinuteRate(),\n      5: this.get5MinuteRate(),\n      1: this.get1MinuteRate()\n    }\n  }\n\n  /**\n   * Adds a duration manually.\n   *\n   * @param {number} duration\n   * @param {TimeUnit} unit\n   * @returns {this}\n   * @memberof Timer\n   */\n  public addDuration (duration: number, unit: TimeUnit): this {\n    if (duration >= 0) {\n      this.histogram.update(unit.convertTo(duration, NANOSECOND))\n      this.meter.mark(1)\n    }\n    return this\n  }\n\n  /**\n   * Gets a snapshot from the embedded {@link Histogram}.\n   *\n   * @returns {Snapshot}\n   * @memberof Timer\n   */\n  public getSnapshot (): Snapshot {\n    return this.histogram.getSnapshot()\n  }\n\n  /**\n   * Gets the count from the embedded {@link Histogram}.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public getCount (): number {\n    return this.histogram.getCount()\n  }\n\n  /**\n   * Gets the sum from the embedded {@link Histogram}.\n   *\n   * @returns {Int64Wrapper}\n   * @memberof Timer\n   */\n  public getSum (): Int64Wrapper {\n    return this.histogram.getSum()\n  }\n\n  /**\n   * Gets the average rate per second of last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public get15MinuteRate (): number {\n    return this.meter.get15MinuteRate()\n  }\n\n  /**\n   * Gets the average rate per second of last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public get5MinuteRate (): number {\n    return this.meter.get5MinuteRate()\n  }\n\n  /**\n   * Gets the average rate per second of last minute.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public get1MinuteRate (): number {\n    return this.meter.get1MinuteRate()\n  }\n\n  /**\n   * Gets the mean rate from the embedded {@link Meter}.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public getMeanRate (): number {\n    return this.meter.getMeanRate()\n  }\n\n  /**\n   * Gets the bucket config from the internal {@link Histogram} and therefore representing the durations.\n   *\n   * @returns {Buckets}\n   * @memberof Timer\n   */\n  public getBuckets (): Buckets {\n    return this.histogram.getBuckets()\n  }\n\n  /**\n   * Gets the bucket counts from the internal {@link Histogram}.\n   *\n   * @returns {Map}\n   * @memberof Timer\n   */\n  public getCounts (): Map {\n    return this.histogram.getCounts()\n  }\n\n  /**\n   * Measures the duration of the passed function's invocation\n   * synchronously and adds it to the pool.\n   *\n   * @template T\n   * @returns {T}\n   * @memberof Timer\n   */\n  public time (f: () => T): T {\n    const startTime: Time = this.clock.time()\n    try {\n      return f()\n    } finally {\n      this.addDuration(diff(startTime, this.clock.time()), NANOSECOND)\n    }\n  }\n\n  /**\n   * Measures the duration of the passed function's invocation\n   * asynchronously and adds it to the pool.\n   *\n   * @template T\n   * @returns {T}\n   * @memberof Timer\n   */\n  public async timeAsync (f: () => Promise): Promise {\n    const startTime: Time = this.clock.time()\n    return await f()\n      .then((res) => {\n        this.addDuration(diff(startTime, this.clock.time()), NANOSECOND)\n        return res\n      })\n      .catch((err) => {\n        this.addDuration(diff(startTime, this.clock.time()), NANOSECOND)\n        throw err\n      })\n  }\n\n  /**\n   * Builds a new StopWatch.\n   *\n   * @returns {StopWatch}\n   * @memberof Timer\n   */\n  public newStopWatch (): StopWatch {\n    return new StopWatch(this.clock, this)\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding the values of the internal histogram property.\n   *\n   * @returns {*}\n   * @memberof Timer\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    const histogramJson = this.histogram.toJSON()\n    const meterJson = this.meter.toJSON()\n    return {\n      ...meterJson,\n      ...histogramJson,\n      ...json\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Summarizing.html":{"url":"interfaces/Summarizing.html","title":"interface - Summarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Summarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/summarizing.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface fo all metric classes that build a sum of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getSum\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getSum\n                        \n                    \n                \n            \n            \n                \ngetSum()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/summarizing.ts:19\n                \n            \n\n\n            \n                \n                    Gets the sum of values.\n\n\n                    \n                    \n                    \n                        Returns :         Int64Wrapper\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n  /**\n   * Gets the sum of values.\n   *\n   * @returns {Int64Wrapper}\n   * @memberof Summarizing\n   */\n  getSum(): Int64Wrapper;\n\n}\n\n/**\n * The serialized version of {@link Summarizing}.\n *\n * @export\n * @interface SerializableSummarizing\n */\nexport interface SerializableSummarizing {\n\n  /**\n   * int64 number in it's string representation.\n   *\n   * @type {string}\n   * @memberof SerializableSummarizing\n   */\n  sum: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Taggable.html":{"url":"interfaces/Taggable.html","title":"interface - Taggable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Taggable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/taggable.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface for taggable classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addTags\n                                    \n                                \n                                \n                                    \n                                        getTag\n                                    \n                                \n                                \n                                    \n                                        getTags\n                                    \n                                \n                                \n                                    \n                                        removeTag\n                                    \n                                \n                                \n                                    \n                                        removeTags\n                                    \n                                \n                                \n                                    \n                                        setTag\n                                    \n                                \n                                \n                                    \n                                        setTags\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addTags\n                        \n                    \n                \n            \n            \n                \naddTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:61\n                \n            \n\n\n            \n                \n                    Adds the specified tags to metric's tags.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTag\n                        \n                    \n                \n            \n            \n                \ngetTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:33\n                \n            \n\n\n            \n                \n                    Gets the specified tag or {@code null}.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTags\n                        \n                    \n                \n            \n            \n                \ngetTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:24\n                \n            \n\n\n            \n                \n                    Gets all tags.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeTag\n                        \n                    \n                \n            \n            \n                \nremoveTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:70\n                \n            \n\n\n            \n                \n                    Removes the specified tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeTags\n                        \n                    \n                \n            \n            \n                \nremoveTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:79\n                \n            \n\n\n            \n                \n                    Removes the specified tag names.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTag\n                        \n                    \n                \n            \n            \n                \nsetTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:43\n                \n            \n\n\n            \n                \n                    Sets the specified tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTags\n                        \n                    \n                \n            \n            \n                \nsetTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:52\n                \n            \n\n\n            \n                \n                    Sets tags set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n  [key: string]: string;\n}\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n  /**\n   * Gets all tags.\n   *\n   * @returns {Map}\n   * @memberof Taggable\n   */\n  getTags(): Map;\n\n  /**\n   * Gets the specified tag or {@code null}.\n   *\n   * @param {string} name\n   * @returns {string}\n   * @memberof Taggable\n   */\n  getTag(name: string): string;\n\n  /**\n   * Sets the specified tag.\n   *\n   * @param {string} name\n   * @param {string} value\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTag(name: string, value: string): this;\n\n  /**\n   * Sets tags set.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Adds the specified tags to metric's tags.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  addTags(tags: Map): this;\n\n  /**\n   * Removes the specified tag.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTag(name: string): this;\n\n  /**\n   * Removes the specified tag names.\n   *\n   * @param {string[]} names\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTags(...names: string[]): this;\n\n}\n\n/**\n * Transforms the {@link Tags} object into a {@link Map} object.\n *\n * @export\n * @param {Tags} tags\n * @returns {Map}\n */\nexport function tagsToMap(tags: Tags): Map {\n  const tagMap: Map = new Map();\n  if (tags) {\n    Object.keys(tags).forEach((key) => tagMap.set(key, tags[key]));\n  }\n  return tagMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Tags} object.\n *\n * @export\n * @param {Map} tagMap\n * @returns {Tags}\n */\nexport function mapToTags(tagMap: Map): Tags {\n  const tags: Tags = {};\n  if (tagMap) {\n    tagMap.forEach((tag, name) => tags[name] = tag);\n  }\n  return tags;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tags.html":{"url":"interfaces/Tags.html","title":"interface - Tags","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tags\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/taggable.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper interface for handling tags.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n  [key: string]: string;\n}\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n  /**\n   * Gets all tags.\n   *\n   * @returns {Map}\n   * @memberof Taggable\n   */\n  getTags(): Map;\n\n  /**\n   * Gets the specified tag or {@code null}.\n   *\n   * @param {string} name\n   * @returns {string}\n   * @memberof Taggable\n   */\n  getTag(name: string): string;\n\n  /**\n   * Sets the specified tag.\n   *\n   * @param {string} name\n   * @param {string} value\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTag(name: string, value: string): this;\n\n  /**\n   * Sets tags set.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Adds the specified tags to metric's tags.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  addTags(tags: Map): this;\n\n  /**\n   * Removes the specified tag.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTag(name: string): this;\n\n  /**\n   * Removes the specified tag names.\n   *\n   * @param {string[]} names\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTags(...names: string[]): this;\n\n}\n\n/**\n * Transforms the {@link Tags} object into a {@link Map} object.\n *\n * @export\n * @param {Tags} tags\n * @returns {Map}\n */\nexport function tagsToMap(tags: Tags): Map {\n  const tagMap: Map = new Map();\n  if (tags) {\n    Object.keys(tags).forEach((key) => tagMap.set(key, tags[key]));\n  }\n  return tagMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Tags} object.\n *\n * @export\n * @param {Map} tagMap\n * @returns {Tags}\n */\nexport function mapToTags(tagMap: Map): Tags {\n  const tags: Tags = {};\n  if (tagMap) {\n    tagMap.forEach((tag, name) => tags[name] = tag);\n  }\n  return tags;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagsOnlyMetricRegistry.html":{"url":"classes/TagsOnlyMetricRegistry.html","title":"class - TagsOnlyMetricRegistry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagsOnlyMetricRegistry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n        \n\n\n            \n                Description\n            \n            \n                Pseudo-MetricRegistry used to provide an interface for registry tags.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(tags: Tags)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:123\n                            \n                        \n\n                \n                    \n                            Creates an instance of TagsOnlyMetricRegistry.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                                        Tags\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:123\n                        \n                    \n\n            \n                \n                    private tags map.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:141\n                \n            \n\n\n            \n                \n                    Gets the tags map.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { getMetricTags, Metric } from \"../model/metric\";\nimport { Taggable, Tags, tagsToMap } from \"../model/taggable\";\nimport { MILLISECOND, MINUTE } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { InterprocessMessage, InterprocessReportMessage } from \"./interprocess-message\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricReporterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof IMetricReporter\n   */\n  getTags(): Map;\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  reportEvent>(event: TEvent): Promise;\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  flushEvents(): Promise;\n}\n\n/**\n * Pseudo-{@link MetricRegistry} used to provide an interface for registry tags.\n *\n * @class TagsOnlyMetricRegistry\n */\nclass TagsOnlyMetricRegistry {\n\n  /**\n   * private tags map.\n   *\n   * @private\n   * @type {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  private tags: Map;\n\n  /**\n   * Creates an instance of TagsOnlyMetricRegistry.\n   *\n   * @param {Tags} tags\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public constructor(tags: Tags) {\n      this.tags = tagsToMap(tags);\n  }\n\n  /**\n   * Gets the tags map.\n   *\n   * @returns {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public getTags(): Map {\n      return this.tags;\n  }\n\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-messages\n   * from reporter of forked processes.\n   *\n   * @static\n   * @memberof MetricReporter\n   */\n  public static readonly MESSAGE_TYPE = \"inspector-metrics:metric-reporter:report\";\n\n  /**\n   * {@link MetricRegistry} instances.\n   *\n   * @protected\n   * @readonly\n   * @type {MetricRegistry[]}\n   * @memberof MetricReporter\n   */\n  protected readonly metricRegistries: MetricRegistry[] = [];\n  /**\n   * options for this reporter instance.\n   *\n   * @protected\n   * @readonly\n   * @type {O}\n   * @memberof MetricReporter\n   */\n  protected readonly options: O;\n  /**\n   * Keeps track of the reporting states for each metric.\n   *\n   * @protected\n   * @readonly\n   * @type {Map}\n   * @memberof MetricReporter\n   */\n  protected readonly metricStates: Map = new Map();\n  /**\n   * The type of the reporter implementation - for internal use.\n   *\n   * @protected\n   * @readonly\n   * @type {string}\n   * @memberof MetricReporter\n   */\n  protected readonly reporterType: string;\n\n  /**\n   * Creates an instance of MetricReporter.\n   *\n   * @param {O} options\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof MetricReporter\n   */\n  public constructor(options: O, reporterType?: string) {\n      this.options = options;\n      this.reporterType = reporterType || this.constructor.name;\n      const clusterOptions = this.options.clusterOptions;\n      if (clusterOptions &&\n          clusterOptions.enabled &&\n          !clusterOptions.sendMetricsToMaster) {\n          clusterOptions.eventReceiver.on(\"message\", (worker, message, handle) =>\n              this.handleReportMessage(worker, message, handle));\n      }\n  }\n\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof MetricReporter\n   */\n  public getTags(): Map {\n      return this.options.tags;\n  }\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public setTags(tags: Map): this {\n      this.options.tags = tags;\n      return this;\n  }\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public addMetricRegistry(metricRegistry: MetricRegistry): this {\n      this.metricRegistries.push(metricRegistry);\n      return this;\n  }\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n      const index: number = this.metricRegistries.indexOf(metricRegistry);\n      if (index > -1) {\n          this.metricRegistries.splice(index, 1);\n      }\n      return this;\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      return event;\n  }\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async flushEvents(): Promise {\n  }\n\n  /**\n   * Checks if the specified message can be handle by this metric-reporter and is of the desired type.\n   *\n   * @protected\n   * @param {InterprocessMessage} message\n   * @param {string} [targetType=MetricReporter.MESSAGE_TYPE]\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected canHandleMessage(\n      message: InterprocessMessage,\n      targetType: string = MetricReporter.MESSAGE_TYPE): boolean {\n      return message &&\n          message.type && message.type === targetType &&\n          message.targetReporterType && message.targetReporterType === this.reporterType;\n  }\n\n  /**\n   * Handles messages from forked processes.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof MetricReporter\n   */\n  protected async handleReportMessage(worker: cluster.Worker, message: any, handle: any) {\n      if (this.canHandleMessage(message)) {\n          const report: InterprocessReportMessage = message;\n          const reg: MetricRegistry = (new TagsOnlyMetricRegistry(report.tags) as any) as MetricRegistry;\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.monotoneCounters);\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.counters);\n          await this.handleResults(report.ctx, reg, report.date, \"gauge\", report.metrics.gauges);\n          await this.handleResults(report.ctx, reg, report.date, \"histogram\", report.metrics.histograms);\n          await this.handleResults(report.ctx, reg, report.date, \"meter\", report.metrics.meters);\n          await this.handleResults(report.ctx, reg, report.date, \"timer\", report.metrics.timers);\n      }\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Called after each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async afterReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Run the reporting procedures. Calls {@link #beforeReport} before each\n   * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n   * afterwards.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async report(): Promise {\n      if (this.metricRegistries && this.metricRegistries.length > 0) {\n          const ctx = this.createOverallReportContext();\n          await this.beforeReport(ctx);\n          for (const registry of this.metricRegistries) {\n              await this.reportMetricRegistry(ctx, registry);\n          }\n          await this.afterReport(ctx);\n          return ctx;\n      }\n      return {};\n  }\n\n  /**\n   * Reporting function for a single {@link MetricRegistry}.\n   * Calls {@link #createReportingContext} for each metric type.\n   * Afterwards calls {@link #reportMetrics} for each of the\n   * registry's metrics - grouped by type.\n   * And finally calls {@link #handleResults} for each of the results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @memberof MetricReporter\n   */\n  protected async reportMetricRegistry(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null) {\n\n      const date: Date = new Date(this.options.clock.time().milliseconds);\n      const counterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"counter\");\n      const gaugeCtx: MetricSetReportContext> = this\n          .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n      const histogramCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n      const meterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"meter\");\n      const timerCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n      counterCtx.metrics = registry.getMonotoneCounterList();\n      const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n          (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n          (counter: MonotoneCounter) => counter.getCount());\n\n      counterCtx.metrics = registry.getCounterList();\n      const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n          (counter: Counter) => this.reportCounter(counter, counterCtx),\n          (counter: Counter) => counter.getCount());\n\n      gaugeCtx.metrics = registry.getGaugeList();\n      const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n          (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n          (gauge: Gauge) => gauge.getValue());\n\n      histogramCtx.metrics = registry.getHistogramList();\n      const histogramResults = this.reportMetrics(ctx, histogramCtx,\n          (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n          (histogram: Histogram) => histogram.getCount());\n\n      meterCtx.metrics = registry.getMeterList();\n      const meterResults = this.reportMetrics(ctx, meterCtx,\n          (meter: Meter) => this.reportMeter(meter, meterCtx),\n          (meter: Meter) => meter.getCount());\n\n      timerCtx.metrics = registry.getTimerList();\n      const timerResults = this.reportMetrics(ctx, timerCtx,\n          (timer: Timer) => this.reportTimer(timer, timerCtx),\n          (timer: Timer) => timer.getCount());\n\n      if (this.sendMetricsToMaster()) {\n          const message: InterprocessReportMessage = {\n              ctx,\n              date,\n              metrics: {\n                  counters: counterResults,\n                  gauges: gaugeResults,\n                  histograms: histogramResults,\n                  meters: meterResults,\n                  monotoneCounters: monotoneCounterResults,\n                  timers: timerResults,\n              },\n              tags: this.buildTags(registry, null),\n              targetReporterType: this.reporterType,\n              type: MetricReporter.MESSAGE_TYPE,\n          };\n          this.options.clusterOptions.sendToMaster(message);\n      } else {\n          await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n          await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n          await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n          await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n          await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n          await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n      }\n  }\n\n  /**\n   * Called in {@link #reportMetricRegistry} to determine to send a reporting-message to the master process.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected sendMetricsToMaster(): boolean {\n      return  this.options.clusterOptions &&\n              this.options.clusterOptions.enabled &&\n              this.options.clusterOptions.sendMetricsToMaster;\n  }\n\n  /**\n   * Creates an OverallReportContext.\n   *\n   * @protected\n   * @returns {OverallReportContext}\n   * @memberof MetricReporter\n   */\n  protected createOverallReportContext(): OverallReportContext {\n      return {\n      };\n  }\n\n  /**\n   * Creates a MetricSetReportContext with the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {MetricSetReportContext}\n   * @memberof MetricReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType): MetricSetReportContext {\n      return {\n          date,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Filters out each metric that does not necessarily need to be reported\n   * and calls the specified reporting function for the remaining.\n   *\n   * @protected\n   * @template M type of the metric\n   * @template C typed ReportingContext\n   * @param {C} ctx\n   * @param {(metric: M, ctx: C) => T} reportFunction\n   * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n   * @returns {Array>}\n   * @memberof MetricReporter\n   */\n  protected reportMetrics>(\n      overallCtx: OverallReportContext,\n      ctx: C,\n      reportFunction: (metric: M, ctx: C) => T,\n      lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n      return ctx.metrics\n          .filter((metric) => {\n              const metricId = (metric as any).id;\n              return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n          })\n          .map((metric) => ({\n              metric,\n              result: reportFunction(metric, ctx),\n          }))\n          .filter((result) => !!result.result);\n  }\n\n  /**\n   * Handles the reporting result for a group of metric instances.\n   *\n   * @protected\n   * @abstract\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  protected abstract handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>): Promise;\n\n  /**\n   * Does the reporting for a counter or monotone counter.\n   *\n   * @protected\n   * @abstract\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportCounter(\n      counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a gauge.\n   *\n   * @protected\n   * @abstract\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n  /**\n   * Does the reporting for a histogram.\n   *\n   * @protected\n   * @abstract\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a meter.\n   *\n   * @protected\n   * @abstract\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a timer.\n   *\n   * @protected\n   * @abstract\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n  /**\n   * Determines if a metric instance has changed it's value since the last check.\n   * This is always true if the minimal-reporting timeout was reached.\n   *\n   * @private\n   * @param {number} metricId\n   * @param {number} lastValue\n   * @param {number} date\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n      let changed = true;\n      let metricEntry = {\n          lastReport: 0,\n          lastValue,\n      };\n      if (this.metricStates.has(metricId)) {\n          metricEntry = this.metricStates.get(metricId);\n          changed = metricEntry.lastValue !== lastValue;\n          if (!changed) {\n              const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n              changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n      }\n      if (registry && registry.getTags()) {\n          registry.getTags().forEach((tag, key) => tags[key] = tag);\n      }\n      if (taggable) {\n          const customTags = getMetricTags(taggable);\n          Object.keys(customTags).forEach((key) => tags[key] = customTags[key]);\n      }\n      return tags;\n  }\n\n  /**\n   * Checks the number and gives it back or zero (0) if it's not a number.\n   *\n   * @protected\n   * @param {number} value\n   * @returns {number}\n   * @memberof MetricReporter\n   */\n  protected getNumber(value: number): number {\n      if (isNaN(value)) {\n          return 0;\n      }\n      return value;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Time.html":{"url":"interfaces/Time.html","title":"interface - Time","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Time\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/clock.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a point in time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            milliseconds\n                                        \n                                \n                                \n                                        \n                                            nanoseconds\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        milliseconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        milliseconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nanoseconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nanoseconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n  milliseconds: number\n  nanoseconds: number\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff (one: Time, two: Time): number {\n  if (!one || !two) {\n    return 0\n  }\n  const oneValue: number = one.nanoseconds + one.milliseconds * 1000000\n  const twoValue: number = two.nanoseconds + two.milliseconds * 1000000\n  return twoValue - oneValue\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n  /**\n   * Gets the current point in time according to the logic of the clock implementation.\n   *\n   * @abstract\n   * @returns {Time}\n   * @memberof Clock\n   */\n  public abstract time (): Time\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n  /**\n   * Returns a Time object who's nanoseconds component is always zero.\n   *\n   * @returns {Time}\n   * @memberof StdClock\n   */\n  public time (): Time {\n    const time = {\n      milliseconds: Date.now(),\n      nanoseconds: 0\n    }\n    return time\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeUnit.html":{"url":"classes/TimeUnit.html","title":"class - TimeUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/time-unit.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a time unit like second, minute, hour.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nanosecondsPerUnit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convertTo\n                            \n                            \n                                    Public\n                                getNanosecondsPerUnit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(nanosecondsPerUnit: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of TimeUnit.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nanosecondsPerUnit\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nanosecondsPerUnit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:18\n                        \n                    \n\n            \n                \n                    The nanoseconds for one unit of this time unit.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        convertTo\n                        \n                    \n                \n            \n            \n                \n                    \n                    convertTo(value: number, unit: TimeUnit)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:53\n                \n            \n\n\n            \n                \n                    Converts the given value to the time unit specified.\nE.g.:\nNANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\nMICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unit\n                                    \n                                                TimeUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNanosecondsPerUnit\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNanosecondsPerUnit()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:36\n                \n            \n\n\n            \n                \n                    Gets the nanoseconds in one unit of this time unit.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a time unit like second, minute, hour.\n *\n * @export\n * @class TimeUnit\n */\nexport class TimeUnit {\n\n  /**\n   * The nanoseconds for one unit of this time unit.\n   *\n   * @private\n   * @type {number}\n   * @memberof TimeUnit\n   */\n  private nanosecondsPerUnit: number;\n\n  /**\n   * Creates an instance of TimeUnit.\n   *\n   * @param {number} nanosecondsPerUnit\n   * @memberof TimeUnit\n   */\n  public constructor(nanosecondsPerUnit: number) {\n    this.nanosecondsPerUnit = nanosecondsPerUnit;\n  }\n\n  /**\n   * Gets the nanoseconds in one unit of this time unit.\n   *\n   * @returns {number}\n   * @memberof TimeUnit\n   */\n  public getNanosecondsPerUnit(): number {\n    return this.nanosecondsPerUnit;\n  }\n\n  /**\n   * Converts the given value to the time unit specified.\n   *\n   * E.g.:\n   *\n   * NANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\n   * MICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n   *\n   * @param {number} value\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof TimeUnit\n   */\n  public convertTo(value: number, unit: TimeUnit): number {\n    return (value * this.nanosecondsPerUnit) / unit.nanosecondsPerUnit;\n  }\n\n}\n\n/**\n * One nanosecond.\n */\nexport const NANOSECOND = new TimeUnit(1);\n/**\n * One microsecond in nanoseconds.\n */\nexport const MICROSECOND = new TimeUnit(1000);\n/**\n * One millisecond in nanoseconds.\n */\nexport const MILLISECOND = new TimeUnit(1000000);\n/**\n * One second in nanoseconds.\n */\nexport const SECOND = new TimeUnit(1000000000);\n/**\n * One minute in nanoseconds.\n */\nexport const MINUTE = new TimeUnit(60000000000);\n/**\n * One hour in nanoseconds.\n */\nexport const HOUR = new TimeUnit(3600000000000);\n/**\n * One day in nanoseconds.\n */\nexport const DAY = new TimeUnit(86400000000000);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            class\n            CarbonMetricReporter\n            \n                100 %\n                (40/40)\n            \n        \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            interface\n            CarbonData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            interface\n            CarbonMetricReporterOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            variable\n            graphite\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            class\n            CsvMetricReporter\n            \n                100 %\n                (45/45)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            interface\n            CsvFileWriter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            interface\n            CsvMetricReporterOptions\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            interface\n            Fields\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n            \n            class\n            DefaultCsvFileWriter\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n            \n            interface\n            DefaultCsvFileWriterOptions\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n            \n            class\n            ElasticsearchMetricReporter\n            \n                100 %\n                (49/49)\n            \n        \n        \n            \n                \n                packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n            \n            interface\n            ElasticsearchMetricReporterOption\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n            \n            class\n            InfluxMetricReporter\n            \n                100 %\n                (40/40)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n            \n            interface\n            InfluxMetricReporterOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n            \n            interface\n            MeasurementPoint\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n            \n            interface\n            Sender\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/Influxdb1Sender.ts\n            \n            class\n            Influxdb1Sender\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/Influxdb2Sender.ts\n            \n            class\n            Influxdb2Sender\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            class\n            Clock\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            class\n            StdClock\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            interface\n            Time\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            function\n            diff\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/counter.ts\n            \n            class\n            Counter\n            \n                45 %\n                (15/33)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/counter.ts\n            \n            class\n            MonotoneCounter\n            \n                43 %\n                (14/32)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/event.ts\n            \n            class\n            Event\n            \n                50 %\n                (17/34)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/gauge.ts\n            \n            class\n            SimpleGauge\n            \n                41 %\n                (13/31)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/gauge.ts\n            \n            interface\n            Gauge\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            class\n            HdrHistogram\n            \n                56 %\n                (23/41)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            class\n            HdrSnapshot\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            variable\n            NativeHistogram\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/histogram.ts\n            \n            class\n            Histogram\n            \n                53 %\n                (21/39)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/meter.ts\n            \n            class\n            Meter\n            \n                63 %\n                (31/49)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry-listener.ts\n            \n            interface\n            MetricRegistryListener\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            class\n            MetricRegistration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            class\n            MetricRegistry\n            \n                61 %\n                (56/91)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            class\n            MetricRegistryListenerRegistration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-set.ts\n            \n            interface\n            MetricSet\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            class\n            Buckets\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            BucketCounting\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            BucketToCountMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            Counting\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            SerializableBucketCounting\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            function\n            getMetricBuckets\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            function\n            getMetricCounts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            function\n            isSerializableBucketCounting\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/groupable.ts\n            \n            interface\n            Groupable\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/int64.ts\n            \n            class\n            Int64Wrapper\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/int64.ts\n            \n            variable\n            Int64\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            interface\n            Metadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            interface\n            MetadataContainer\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            function\n            mapToMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            function\n            metadataToMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metered.ts\n            \n            interface\n            Metered\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metered.ts\n            \n            interface\n            MeteredRates\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metered.ts\n            \n            interface\n            SerializableMetered\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            class\n            BaseMetric\n            \n                33 %\n                (9/27)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            interface\n            Metric\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            interface\n            SerializableMetric\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricDescription\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricGroup\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricTags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            isSerializableMetric\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/moving-average.ts\n            \n            class\n            ExponentiallyWeightedMovingAverage\n            \n                68 %\n                (13/19)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/moving-average.ts\n            \n            interface\n            MovingAverage\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            class\n            DefaultReservoir\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            class\n            SlidingWindowReservoir\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            interface\n            Reservoir\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            interface\n            Sampling\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            interface\n            SerializableSampling\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            function\n            getSnapshot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            function\n            isSerializableSampling\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            class\n            SimpleSnapshot\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            interface\n            SerializedSnapshot\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            interface\n            Snapshot\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/summarizing.ts\n            \n            interface\n            SerializableSummarizing\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/summarizing.ts\n            \n            interface\n            Summarizing\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            interface\n            Taggable\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            interface\n            Tags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            function\n            mapToTags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            function\n            tagsToMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            class\n            TimeUnit\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            DAY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            HOUR\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            MICROSECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            MILLISECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            MINUTE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            NANOSECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            SECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n            \n            interface\n            InterprocessMessage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n            \n            interface\n            InterprocessReportMessage\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            class\n            LoggerReporter\n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            interface\n            LoggerReporterOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            interface\n            LoggerReportingContext\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            interface\n            LogLine\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger.ts\n            \n            interface\n            Logger\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-entry.ts\n            \n            interface\n            MetricEntry\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            class\n            DefaultClusterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            class\n            DisabledClusterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            interface\n            ClusterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            interface\n            MetricReporterOptions\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            variable\n            defaultCluster\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            class\n            MetricReporter\n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            class\n            TagsOnlyMetricRegistry\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            interface\n            IMetricReporter\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-set-report-context.ts\n            \n            interface\n            MetricSetReportContext\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/overall-report-context.ts\n            \n            interface\n            OverallReportContext\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/report-message-receiver.ts\n            \n            interface\n            ReportMessageReceiver\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/reporting-result.ts\n            \n            interface\n            ReportingResult\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n            \n            class\n            ScheduledMetricReporter\n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n            \n            interface\n            ScheduledMetricReporterOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            class\n            SizeGauge\n            \n                47 %\n                (16/34)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            LengthAttributeInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            LengthMethodInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            SizeAttributeInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            SizeMethodInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/timer.ts\n            \n            class\n            StopWatch\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/timer.ts\n            \n            class\n            Timer\n            \n                59 %\n                (26/44)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n            \n            class\n            DefaultPrometheusClusterOptions\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n            \n            variable\n            defaultCluster\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/InterprocessReportRequest.ts\n            \n            interface\n            InterprocessReportRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/InterprocessReportResponse.ts\n            \n            interface\n            InterprocessReportResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/Percentiles.ts\n            \n            class\n            Percentiles\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusClusterOptions.ts\n            \n            interface\n            PrometheusClusterOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            class\n            PrometheusMetricReporter\n            \n                90 %\n                (55/61)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            interface\n            PrometheusFields\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            interface\n            PrometheusMetricResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusReporterOptions.ts\n            \n            interface\n            PrometheusReporterOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            class\n            PushgatewayMetricReporter\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            interface\n            PushgatewayReporterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8EventLoop.ts\n            \n            class\n            V8EventLoop\n            \n                57 %\n                (20/35)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            class\n            V8GCMetrics\n            \n                60 %\n                (23/38)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            variable\n            GC\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            class\n            SpaceHistory\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            class\n            V8MemoryMetrics\n            \n                64 %\n                (27/42)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8ProcessMetrics.ts\n            \n            class\n            V8ProcessMetrics\n            \n                55 %\n                (24/43)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExportMode   (packages/.../CsvMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        ExportMode\n                    \n                \n                    \n                        \n                            Tags and metadata can be exported in one row or in separate rows.\n\n                        \n                    \n                        \n                            \n                                 ALL_IN_ONE_COLUMN\n                            \n                        \n                        \n                            \n                                 EACH_IN_OWN_COLUMN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            diff   (packages/.../clock.ts)\n                        \n                        \n                            getMetricBuckets   (packages/.../counting.ts)\n                        \n                        \n                            getMetricCounts   (packages/.../counting.ts)\n                        \n                        \n                            getMetricDescription   (packages/.../metric.ts)\n                        \n                        \n                            getMetricGroup   (packages/.../metric.ts)\n                        \n                        \n                            getMetricMetadata   (packages/.../metric.ts)\n                        \n                        \n                            getMetricName   (packages/.../metric.ts)\n                        \n                        \n                            getMetricTags   (packages/.../metric.ts)\n                        \n                        \n                            getSnapshot   (packages/.../sampling.ts)\n                        \n                        \n                            isSerializableBucketCounting   (packages/.../counting.ts)\n                        \n                        \n                            isSerializableMetric   (packages/.../metric.ts)\n                        \n                        \n                            isSerializableSampling   (packages/.../sampling.ts)\n                        \n                        \n                            mapToMetadata   (packages/.../metadata-container.ts)\n                        \n                        \n                            mapToTags   (packages/.../taggable.ts)\n                        \n                        \n                            metadataToMap   (packages/.../metadata-container.ts)\n                        \n                        \n                            tagsToMap   (packages/.../taggable.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-metrics/lib/metrics/clock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        diff\n                        \n                    \n                \n            \n            \n                \ndiff(one: Time, two: Time)\n                \n            \n\n\n\n\n            \n                \n                    Gets the time elapsed from parameter one to parameter two in nanoseconds.\nAlso assumes that the first point in time is older than the second point in time.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    one\n                                    \n                                                Time\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        time sample\n\n                                    \n                                \n                                \n                                    two\n                                    \n                                                Time\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        time sample\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        a duration in nanoseconds\n\n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/counting.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getMetricBuckets\n                        \n                    \n                \n            \n            \n                \ngetMetricBuckets(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the Buckets of a\nBucketCounting or a SerializableBucketCounting.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMetricCounts\n                        \n                    \n                \n            \n            \n                \ngetMetricCounts(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the counts of a\nBucketCounting or a SerializableBucketCounting.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BucketToCountMap\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSerializableBucketCounting\n                        \n                    \n                \n            \n            \n                \nisSerializableBucketCounting(metric)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the metric passed is a SerializableBucketCounting or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SerializableBucketCounting\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/metric.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getMetricDescription\n                        \n                    \n                \n            \n            \n                \ngetMetricDescription(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the description of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMetricGroup\n                        \n                    \n                \n            \n            \n                \ngetMetricGroup(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the group of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMetricMetadata\n                        \n                    \n                \n            \n            \n                \ngetMetricMetadata(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the metadata of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Metadata\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMetricName\n                        \n                    \n                \n            \n            \n                \ngetMetricName(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the name of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMetricTags\n                        \n                    \n                \n            \n            \n                \ngetMetricTags(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the tags of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Tags\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSerializableMetric\n                        \n                    \n                \n            \n            \n                \nisSerializableMetric(metric)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the metric passed is a SerializableMetric or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SerializableMetric\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/sampling.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getSnapshot\n                        \n                    \n                \n            \n            \n                \ngetSnapshot(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method to get the snapshot of a Sampling or a SerializableSampling.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSerializableSampling\n                        \n                    \n                \n            \n            \n                \nisSerializableSampling(metric)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the metric passed is a SerializableSampling or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SerializableSampling\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapToMetadata\n                        \n                    \n                \n            \n            \n                \nmapToMetadata(metadataMap: Map)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the Map object into a Metadata object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataMap\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Metadata\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metadataToMap\n                        \n                    \n                \n            \n            \n                \nmetadataToMap(metadata: Metadata)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the Metadata object into a Map object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/taggable.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapToTags\n                        \n                    \n                \n            \n            \n                \nmapToTags(tagMap: Map)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the Map object into a Tags object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tagMap\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Tags\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tagsToMap\n                        \n                    \n                \n            \n            \n                \ntagsToMap(tags: Tags)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the Tags object into a Map object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                                Tags\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n\n\nThis is the mono repository for the inspector-metrics modules.inspector-metrics modules are a collection of modules around application metrics and monitoring for nodejs.  \nTake a look at the Documentation.\nFeatures\n\nmetric model independent from time-series DB\nmultiple reporter modules\nmulti process support (nodejs cluster)\nbusiness friendly license (MIT License)\n\nModules\n\n\n\nModule\nDescription\nLink\n\n\n\n\n\ninspector-metrics\nAPI / interface module\n\n \n\n\nReporter\n\n\n\n\n\ninspector-carbon\nreporter for graphite / carbon\ngraphite\n \n\n\ninspector-csv\nreporter for CSV files\n\n \n\n\ninspector-elasticsearch\nreporter for elasticsearch\nelasticsearch\n \n\n\ninspector-influx\nreporter for influxdb\ninfluxdb\n \n\n\ninspector-prometheus\nreporter for prometheus / pushgateway\nprometheus\n \n\n\nMetric Collectors\n\n\n\n\n\ninspector-vm\nmetric collection for nodejs VM\n\n \n\n\n\n3rd party modules\n\n\n\nModule\nDescription\nLink\n\n\n\n\n\ninspector-amqp\nreporter for AMQP\namqp-ts\n \n\n\ninspector-nats\nreporter for NATS\nnode-nats\n \n\n\n\nExamples\nCode examples for javascript and typescript are in the examples folder.\ndevelopment\nlocal setup / prerequisites\nYou should have nodejs, docker and docker-compose installed.\nboot test environment:./test-env/boot.sh\nshutdown test environment:./test-env/reset.sh\nexecute compatibility tests:docker-compose run --rm nodeXX = nodejs version (available: 10, 11, 12, 13, 14, 15, 16, 17)\ninit / update project (if a new dependency is introduced or an existing is updated):  \npnpm igenerate dependency report:  \n# run 'pnpm run build' before checking dependencies\ndocker-compose run --rm depsrelease packages / publish docs:  \n# check functionality\npnpm i\npnpm run build\n\n# publish docs\nrm -fr docs/\ngit branch -D gh-pages\ngit worktree prune\ngit worktree list\ngit worktree add -b gh-pages docs origin/gh-pages\npnpm run publishDocs\n\n# publish package\npnpm publishLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    46 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    62 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColumnType   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            Filter   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            MetricDocumentBuilder   (packages/.../ElasticsearchMetricReporter.ts)\n                        \n                        \n                            MetricInfoDeterminator   (packages/.../ElasticsearchMetricReporter.ts)\n                        \n                        \n                            MetricType   (packages/.../metric-type.ts)\n                        \n                        \n                            NameFactory   (packages/.../metric-registry.ts)\n                        \n                        \n                            PrometheusMetricType   (packages/.../PrometheusMetricReporter.ts)\n                        \n                        \n                            Row   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            Rows   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            Scheduler   (packages/.../scheduled-reporter.ts)\n                        \n                        \n                            ValueExtractor   (packages/.../size-gauge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n    \n    \n        \n            \n                \n                    \n                    ColumnType\n                \n            \n            \n                \n                    Lists all possible column types.\n\n                \n            \n            \n                \n                        \"date\" | \"name\" | \"field\" | \"group\" | \"description\" | \"value\" | \"tags\" | \"type\" | \"metadata\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                    Type for a tag or metadata filter.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Row\n                \n            \n            \n                \n                    Shortcut type for a row.\n\n                \n            \n            \n                \n                        string[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Rows\n                \n            \n            \n                \n                    Shortcut type for many rows.\n\n                \n            \n            \n                \n                            Row[]\n\n                \n            \n        \n    \n    packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n    \n    \n        \n            \n                \n                    \n                    MetricDocumentBuilder\n                \n            \n            \n                \n                    Interface for building a document for a metric.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MetricInfoDeterminator\n                \n            \n            \n                \n                    Interface for getting a certain information using the specified metric metadata -\ne.g. name of the index, metric type, etc.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/reporter/metric-type.ts\n    \n    \n        \n            \n                \n                    \n                    MetricType\n                \n            \n            \n                \n                    Enumeration of all metric types.\n\n                \n            \n            \n                \n                        \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\"\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/metric-registry.ts\n    \n    \n        \n            \n                \n                    \n                    NameFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n    \n    \n        \n            \n                \n                    \n                    PrometheusMetricType\n                \n            \n            \n                \n                    Enumeration used to determine valid metric types of prometheus.\n\n                \n            \n            \n                \n                        \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\"\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n    \n    \n        \n            \n                \n                    \n                    Scheduler\n                \n            \n            \n                \n                    Scheduler function type definition.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/size-gauge.ts\n    \n    \n        \n            \n                \n                    \n                    ValueExtractor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            \n                97 %\n                (153/157)\n            \n            \n                75 %\n                (76/102)\n            \n            \n                89 %\n                (40/45)\n            \n            \n                99 %\n                (148/150)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n            \n            \n                10 %\n                (6/58)\n            \n            \n                0 %\n                (0/25)\n            \n            \n                0 %\n                (0/19)\n            \n            \n                11 %\n                (6/55)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/clock.ts\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/counter.ts\n            \n            \n                100 %\n                (23/23)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/event.ts\n            \n            \n                16 %\n                (3/19)\n            \n            \n                0 %\n                (0/1)\n            \n            \n                0 %\n                (0/7)\n            \n            \n                16 %\n                (3/19)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/gauge.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            \n                93 %\n                (43/46)\n            \n            \n                69 %\n                (11/16)\n            \n            \n                90 %\n                (18/20)\n            \n            \n                93 %\n                (43/46)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/histogram.ts\n            \n            \n                86 %\n                (37/43)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                75 %\n                (9/12)\n            \n            \n                86 %\n                (37/43)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/meter.ts\n            \n            \n                98 %\n                (55/56)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                92 %\n                (12/13)\n            \n            \n                98 %\n                (55/56)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/metric-registry-listener.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            \n                92 %\n                (163/178)\n            \n            \n                88 %\n                (82/93)\n            \n            \n                84 %\n                (72/86)\n            \n            \n                91 %\n                (159/174)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/metric-set.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            \n                75 %\n                (21/28)\n            \n            \n                88 %\n                (14/16)\n            \n            \n                75 %\n                (9/12)\n            \n            \n                78 %\n                (18/23)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/timer.ts\n            \n            \n                84 %\n                (47/56)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                70 %\n                (19/27)\n            \n            \n                84 %\n                (47/56)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            \n                38 %\n                (18/47)\n            \n            \n                11 %\n                (2/19)\n            \n            \n                43 %\n                (3/7)\n            \n            \n                36 %\n                (16/44)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/groupable.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/int64.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            \n                62 %\n                (8/13)\n            \n            \n                25 %\n                (1/4)\n            \n            \n                50 %\n                (2/4)\n            \n            \n                64 %\n                (7/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/metered.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            \n                43 %\n                (30/69)\n            \n            \n                0 %\n                (0/22)\n            \n            \n                40 %\n                (12/30)\n            \n            \n                45 %\n                (30/67)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/moving-average.ts\n            \n            \n                93 %\n                (27/29)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                67 %\n                (4/6)\n            \n            \n                93 %\n                (27/29)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            \n                91 %\n                (20/22)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                75 %\n                (6/8)\n            \n            \n                91 %\n                (20/22)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            \n                36 %\n                (4/11)\n            \n            \n                0 %\n                (0/6)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                36 %\n                (4/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            \n                95 %\n                (41/43)\n            \n            \n                87 %\n                (13/15)\n            \n            \n                100 %\n                (17/17)\n            \n            \n                95 %\n                (39/41)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/summarizing.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            \n                62 %\n                (8/13)\n            \n            \n                25 %\n                (1/4)\n            \n            \n                50 %\n                (2/4)\n            \n            \n                64 %\n                (7/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            \n                92 %\n                (11/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                67 %\n                (2/3)\n            \n            \n                92 %\n                (11/12)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            \n                11 %\n                (6/57)\n            \n            \n                0 %\n                (0/20)\n            \n            \n                0 %\n                (0/11)\n            \n            \n                11 %\n                (6/57)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/logger.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/metric-entry.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            \n                26 %\n                (5/19)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                0 %\n                (0/4)\n            \n            \n                29 %\n                (5/17)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            \n                5 %\n                (6/119)\n            \n            \n                0 %\n                (0/44)\n            \n            \n                0 %\n                (0/41)\n            \n            \n                5 %\n                (6/116)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/metric-set-report-context.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/overall-report-context.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/report-message-receiver.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/reporting-result.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n            \n            \n                31 %\n                (4/13)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                0 %\n                (0/5)\n            \n            \n                36 %\n                (4/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n            \n            \n                65 %\n                (13/20)\n            \n            \n                50 %\n                (4/8)\n            \n            \n                33 %\n                (2/6)\n            \n            \n                68 %\n                (13/19)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/InterprocessReportRequest.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/InterprocessReportResponse.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/Percentiles.ts\n            \n            \n                82 %\n                (9/11)\n            \n            \n                40 %\n                (2/5)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/PrometheusClusterOptions.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                92 %\n                (158/171)\n            \n            \n                84 %\n                (88/105)\n            \n            \n                86 %\n                (42/49)\n            \n            \n                92 %\n                (154/167)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/PrometheusReporterOptions.ts\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                95 %\n                (18/19)\n            \n            \n                50 %\n                (7/14)\n            \n            \n                50 %\n                (6/12)\n            \n            \n                95 %\n                (18/19)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            \n                81 %\n                (52/64)\n            \n            \n                0 %\n                (0/5)\n            \n            \n                89 %\n                (8/9)\n            \n            \n                81 %\n                (51/63)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            \n                85 %\n                (94/111)\n            \n            \n                33 %\n                (1/3)\n            \n            \n                86 %\n                (12/14)\n            \n            \n                85 %\n                (93/110)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DAY   (packages/.../time-unit.ts)\n                        \n                        \n                            defaultCluster   (packages/.../DefaultPrometheusClusterOptions.ts)\n                        \n                        \n                            defaultCluster   (packages/.../metric-reporter-options.ts)\n                        \n                        \n                            GC   (packages/.../V8GCMetrics.ts)\n                        \n                        \n                            graphite   (packages/.../CarbonMetricReporter.ts)\n                        \n                        \n                            HOUR   (packages/.../time-unit.ts)\n                        \n                        \n                            Int64   (packages/.../int64.ts)\n                        \n                        \n                            MICROSECOND   (packages/.../time-unit.ts)\n                        \n                        \n                            MILLISECOND   (packages/.../time-unit.ts)\n                        \n                        \n                            MINUTE   (packages/.../time-unit.ts)\n                        \n                        \n                            NANOSECOND   (packages/.../time-unit.ts)\n                        \n                        \n                            NativeHistogram   (packages/.../hdr-histogram.ts)\n                        \n                        \n                            SECOND   (packages/.../time-unit.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-metrics/lib/metrics/model/time-unit.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DAY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TimeUnit(86400000000000)\n                    \n                \n\n            \n                \n                    One day in nanoseconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HOUR\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TimeUnit(3600000000000)\n                    \n                \n\n            \n                \n                    One hour in nanoseconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MICROSECOND\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TimeUnit(1000)\n                    \n                \n\n            \n                \n                    One microsecond in nanoseconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MILLISECOND\n                        \n                    \n                \n            \n                \n                    \n                        Type :     miscellaneous\n\n                    \n                \n                \n                    \n                        Default value : new TimeUnit(1000000)\n                    \n                \n\n            \n                \n                    One millisecond in nanoseconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MINUTE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TimeUnit(60000000000)\n                    \n                \n\n            \n                \n                    One minute in nanoseconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NANOSECOND\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TimeUnit(1)\n                    \n                \n\n            \n                \n                    One nanosecond.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SECOND\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TimeUnit(1000000000)\n                    \n                \n\n            \n                \n                    One second in nanoseconds.\n\n                \n            \n\n        \n    \n\n    packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultCluster\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cluster.default || cluster) as any\n                    \n                \n\n\n        \n    \n\n    packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultCluster\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cluster.default || cluster) as any\n                    \n                \n\n\n        \n    \n\n    packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GC\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('gc-stats')\n                    \n                \n\n            \n                \n                    Event emitter for GC event within nodejs.\n\n                \n            \n\n        \n    \n\n    packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        graphite\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('graphite')\n                    \n                \n\n            \n                \n                    Graphite / carbon client module.\n\n                \n            \n\n        \n    \n\n    packages/inspector-metrics/lib/metrics/model/int64.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Int64\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"node-cint64\").Int64\n                    \n                \n\n            \n                \n                    native Int64 lib.\n\n                \n            \n\n        \n    \n\n    packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NativeHistogram\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n\n            \n                \n                    The 'native-hdr-histogram' module (optional).\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-metrics.html":{"url":"additional-documentation/inspector-metrics.html","title":"additional-page - inspector-metrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nTake a look at the Documentation.\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-metrics\nbasic usage\nAt least a MetricRegistry, a Metric and a MetricReporter is necessary\nto use the library.\nSupported metric types:\n\nCounter - measures an integer value (e.g. \"how many time was my function called, number of bookings in a sales system\")\nMonotoneCounter - a monotonically increasing integer value (e.g. \"error count\")\nEvent - ad-hoc event to report events (e.g. \"application start / deployment\", \"batch import started / ended\")\nGauge - measurement of a value (e.g. \"number of waiting threads on a resource\")\nHdrHistogram - recording and analyzing sampled data value counts across a configurable integer value range with configurable value precision\nHistogram - measures the statistical distribution of all values\nMeter - measures the rate of events over time (e.g. \"requests per second\")\nTimer - measures call-rate of a function and the distribution of the duration of all calls\n\nThere are libraries which collect some metrics:\n\nnode VM - collects memory & garbage collection metric for node VM\n\nThe library ships with a default console MetricReporter.\nSome other reporter:\n\nAMQP\nCarbon / Graphite\nCSV\nElasticsearch\nInflux\nNATS\nPrometheus / Pushgateway\n\nimport { LoggerReporter, MetricRegistry, Timer } from \"inspector-metrics\";\n\n// a registry is a collection of metric objects\nconst registry = new MetricRegistry();\n// the reporter prints the stats\nconst reporter = new LoggerReporter({\n    log: global.console,\n});\n// a new timer instance\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.addMetricRegistry(registry);\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i Counter\nimport { Counter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst requestCount: Counter = registry.newCounter(\"requestCount\");\n\n// +1\nrequestCount.increment(1);\n\n// -1\nrequestCount.decrement(1);\n\n// =0\nrequestCount.getCount();\n\nrequestCount.reset();MonotoneCounter\nimport { MonotoneCounter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst errorCount: MonotoneCounter = registry.newMonotoneCounter(\"errorCount\");\n\n// +1\nerrorCount.increment(1);\n\n// causes error\nerrorCount.increment(-1);\n\n// =1\nerrorCount.getCount();\n\nerrorCount.reset();Event\nimport { BaseMetric, Event, MetricRegistry } from \"inspector-metrics\";\n\n// common application tags - applied to each metric / event\nconst tags: Map = new Map();\ntags.set(\"application\", \"project-name\");\ntags.set(\"hostname\", \"127.0.0.4\");\n\n// the reporter prints the stats\nconst reporter = new LoggerReporter({\n    log: global.console,\n    tags,\n});\n\n// not connected to a MetricRegistry like the other metrics\nconst event = new Event(\"application_started\", \"signals an application start\")\n    .setValue(\"started\")\n    .setTag(\"mode\", \"test\")\n    .setTag(\"component\", \"main\");\n\n// directly send to time-series DB\nawait reporter.reportEvent(event);Gauge\nimport { BaseMetric, Gauge, MetricRegistry, SimpleGauge } from \"inspector-metrics\";\n\nclass ArrayLengthGauge extends BaseMetric implements Gauge {\n\n    public constructor(name: string, private a: Array) {\n        super();\n        this.name = name;\n    }\n\n    public getValue(): number {\n        return this.a.length;\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst queueSize: Gauge = new SimpleGauge(\"requestCount\");\nlet myArray: number[] = [];\nconst arrayLength: Gauge = new ArrayLengthGauge(\"arrayLength\", myArray);\n\nregistry.registerMetric(queueSize);\nregistry.registerMetric(arrayLength);\n\nqueueSize.setValue(12345);\n\n// 12345\nqueueSize.getValue();\n\nmyArray.push(1);\nmyArray.push(2);\nmyArray.push(3);\n\n// 3\narrayLength.getValue();Histogram\nimport { Histogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency\nconst requestLatency: Histogram = registry.newHistogram(\"requestLatency\");\n\nrequestLatency.update(12345);\nrequestLatency.update(23456);\nrequestLatency.update(34567);\n\n// a copy of the current values\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();HdrHistogram\nimport { HdrHistogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency between 1 and 1000000000 nanoseconds\nconst requestLatency: HdrHistogram = registry.newHdrHistogram(\"requestLatency\", 1, 1000000000);\n\n// 102 microseconds in nanoseconds\nrequestLatency.update(102000);\n// 4.390 milliseconds in nanoseconds\nrequestLatency.update(4390000);\n\n// only snapshot interface - always uses the current values\n// since the native-hdr-histogram is used as a reference\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();Meter\nimport { Meter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callCount: Meter = registry.newMeter(\"callCount\");\n\ncallCount.mark(1);\n\nconst count: number = callCount.getCount();\nconst m15: number = callCount.get15MinuteRate();\nconst m5: number = callCount.get5MinuteRate();\nconst m1: number = callCount.get1MinuteRate();\nconst mean: number = callCount.getMeanRate();Timer\nimport { MetricRegistry, MILLISECOND, Snapshot, StopWatch, Timer } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callStats: Timer = registry.newTimer(\"callStats\");\n\ncallStats.addDuration(100, MILLISECOND);\n\n// 1\nconst count: number = callStats.getCount();\n// ~1\nconst m15: number = callStats.get15MinuteRate();\n// ~1\nconst m5: number = callStats.get5MinuteRate();\n// ~1\nconst m1: number = callStats.get1MinuteRate();\n// ~1\nconst mean: number = callStats.getMeanRate();\n\nlet snapshot: Snapshot = callStats.getSnapshot();\n\n// some value around 100000000 (100ms in nanoseconds)\nconst mean: number = snapshot.getMean();\n\nconst timer: StopWatch = callStats.newStopWatch();\n\ntimer.start();\n// 100ms has passed\ntimer.stop();\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through stop-watch ...\nsnapshot.getMean();\n\ncallStats.time(() => {\n    // some time has passed\n});\n\n// works with promise too\nawait callStats.timeAsync(async () => {\n    // some time has passed\n});\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through time function ...\nsnapshot.getMean();MetricListeners\nimport { Metric, MetricRegistry, MetricRegistryListener, MetricRegistryListenerRegistration } from \"inspector-metrics\";\n\nclass Listener implements MetricRegistryListener {\n\n    public metricAdded(name: string, metric: Metric): void {\n        console.log(`added metric ${name}: ${metric}`);\n    }\n\n    public metricRemoved(name: string, metric: Metric): void {\n        console.log(`removed metric ${name}: ${metric}`);\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst registration: MetricRegistryListenerRegistration = registry.addListener(new Listener());\n\n// prints \"added metric requests: Counter...\" via console\nregistry.newCounter(\"requests\");\n\n// removes the listener\nregistration.remove();Metric Groups\nEach metric can have a group, which is used to gather different metrics\nwithin metric reporter instances. E.g. if only gauges are used\nto gather metrics data a group can be used to report them all as one\nmeasure point with different fields.\nimport { Gauge, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// reports the internal storage capacity of a queue\nconst capacity: Gauge = ...;\n// reports the element count in the queue\nconst queueSize: Gauge = ...;\n\n// all values grouped as buffer\nregistry.registerMetric(queueSize, \"buffer\");\nregistry.registerMetric(capacity, \"buffer\");\n// counts the number of allocations during the execution of the application\nregistry.newCounter(\"newAllocations\", \"buffer\");\n\n// the reporter can now report the values as a single measurement point if supported ...License\nMIT\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-carbon.html":{"url":"additional-documentation/inspector-carbon.html","title":"additional-page - inspector-carbon","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninspector-carbon\nTypescript Metrics Reporter for\ngraphite carbon.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-graphite as graphite/carbon client.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-carbon\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();set common tags for all metrics\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// set common tags for all metrics\nreporter.getTags().set(\"app-name\", \"my-service\");\nreporter.getTags().set(\"app-version\", \"v1.2.3\");reporting events\nimport { Event, MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to graphite\nreporter.reportEvent(event);multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The CarbonMetricReporter is listening for those messagesand reports the metrics from the other processes.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.  \nimport { tagsToMap, DisabledClusterOptions } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    clusterOptions: new DisabledClusterOptions(),\n    host: \"http://graphite-server/\",\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-csv.html":{"url":"additional-documentation/inspector-csv.html","title":"additional-page - inspector-csv","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninspector-csv\nTypescript metric reporter for CSV files.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics\nnode module and is meant to be used with nodejs.  \nAll metrics from the inspector-metrics library\ncan exported into CSV files.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-csv\nbasic usage\nexample.ts\nimport {\n    CsvMetricReporter,\n    DefaultCsvFileWriter,\n} from \"inspector-csv\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// metric registry is used in the application code to measure durations, error codes, etc...\nconst registry: MetricRegistry = new MetricRegistry();\n\n// some timers for this example\nconst requests1: Timer = registry.newTimer(\"requests1\");\nconst requests2: Timer = registry.newTimer(\"requests2\");\nconst requests3: Timer = registry.newTimer(\"requests3\");\n\nrequests1.setGroup(\"requests\");\nrequests2.setGroup(\"requests\");\n\nrequests1.setTag(\"host\", \"127.0.0.1\");\nrequests2.setTag(\"host\", \"127.0.0.2\");\nrequests3.setTag(\"host\", \"127.0.0.3\");\n\n// default csv file writer\nconst writer = new DefaultCsvFileWriter({});\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\"],\n    writer,\n});\n\n// register registry in the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();\n\n// simulate a running application which produces some custom measures\nsetInterval(() => requests1.time(() => { ... }), 100);\nsetInterval(() => requests2.time(() => { ... }), 50);\nsetInterval(() => requests3.time(() => { ... }), 25);201810201900_metrics.csv (example output file)\ndate,group,name,field,value\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.005\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.01\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.025\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.05\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.1\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.25\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.5\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_1\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_2.5\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_5\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_10\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_inf\",10\n20181020191953.380+00:00,\"requests\",\"requests1\",\"count\",10\n20181020191953.380+00:00,\"requests\",\"requests1\",\"m15_rate\",9\n20181020191953.380+00:00,\"requests\",\"requests1\",\"m1_rate\",9\n20181020191953.380+00:00,\"requests\",\"requests1\",\"m5_rate\",9\n20181020191953.380+00:00,\"requests\",\"requests1\",\"max\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"mean\",1399961.6\n20181020191953.380+00:00,\"requests\",\"requests1\",\"mean_rate\",6.622515994912551\n20181020191953.380+00:00,\"requests\",\"requests1\",\"min\",999936\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p50\",999936\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p75\",2000128\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p95\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p98\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p99\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p999\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"stddev\",699209.9735144262\n20181020191953.380+00:00,\"requests\",\"requests1\",\"sum\",13999616\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_1\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_5\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_10\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_inf\",20\n20181020191953.380+00:00,\"requests\",\"requests2\",\"count\",20\n20181020191953.380+00:00,\"requests\",\"requests2\",\"m15_rate\",19\n20181020191953.380+00:00,\"requests\",\"requests2\",\"m1_rate\",19\n20181020191953.380+00:00,\"requests\",\"requests2\",\"m5_rate\",19\n20181020191953.380+00:00,\"requests\",\"requests2\",\"max\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"mean\",850022.4\n20181020191953.380+00:00,\"requests\",\"requests2\",\"mean_rate\",13.227513227513228\n20181020191953.380+00:00,\"requests\",\"requests2\",\"min\",0\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p50\",999936\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p75\",1000192\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p95\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p98\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p99\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p999\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"stddev\",587171.928872124\n20181020191953.380+00:00,\"requests\",\"requests2\",\"sum\",17000448\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.005\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.01\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.025\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.05\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.1\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.25\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.5\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_1\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_2.5\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_5\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_10\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_inf\",40\n20181020191953.380+00:00,\"\",\"requests3\",\"count\",40\n20181020191953.380+00:00,\"\",\"requests3\",\"m15_rate\",38\n20181020191953.380+00:00,\"\",\"requests3\",\"m1_rate\",38\n20181020191953.380+00:00,\"\",\"requests3\",\"m5_rate\",38\n20181020191953.380+00:00,\"\",\"requests3\",\"max\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"mean\",700012.8\n20181020191953.380+00:00,\"\",\"requests3\",\"mean_rate\",26.455026455026456\n20181020191953.380+00:00,\"\",\"requests3\",\"min\",0\n20181020191953.380+00:00,\"\",\"requests3\",\"p50\",999936\n20181020191953.380+00:00,\"\",\"requests3\",\"p75\",1000192\n20181020191953.380+00:00,\"\",\"requests3\",\"p95\",2000115.2\n20181020191953.380+00:00,\"\",\"requests3\",\"p98\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"p99\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"p999\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"stddev\",563876.4091414141\n20181020191953.380+00:00,\"\",\"requests3\",\"sum\",28000512CSV reporter options\n\nwriter\nThe writer used to store the rows.\n\n\nreportInterval\nReporting interval in TimeUnit\ndefault value 1000\n\n\nunit\nTimeUnit of the reporting interval\ndefault value MILLISECOND\n\n\nscheduler\nfunction used to schedule reporting tasks\ndefault value setInterval\n\n\nclock\nClock used to determine the date for the reporting as well as the minimum-reporting timeout feature\ndefault value new StdClock()\n\n\nminReportingTimeout\nTimeout in minutes a metric need to be included in the report without having changed\ndefault value 1\n\n\ntags\nTags for this reporter instance - to be combined with the tags of each metric while reporting\ndefault value new Map()\n\n\nuseSingleQuotes\nIndicates that single quotes are used instead of double quotes.\ndefault value false\n\n\ntagExportMode\nExportMode for tags\ndefault value ExportMode.ALL_IN_ONE_COLUMN\n\n\nmetadataExportMode\nExportMode for metadata\ndefault value ExportMode.ALL_IN_ONE_COLUMN\n\n\ntagColumnPrefix\nPrefix for tag columns if exported separately\ndefault value \"tag_\"\n\n\ntagDelimiter\nDelimiter between the tags if exported in one column\ndefault value \";\"\n\n\nmetadataColumnPrefix\nPrefix for metadata columns if exported separately\ndefault value \"meta_\"\n\n\nmetadataDelimiter\nDelimiter between the metadata if exported in one column\ndefault value \";\"\n\n\ncolumns\nThe columns to export\ndefault value []\npossible values for each element\n\"date\" - the date of the current reporting run\n\"name\" - name of the metric\n\"field\" - field identifier (depends on the metric type)\n\"group\" - group of the metric\n\"description\" - description of the metric\n\"value\" - numeric value of the field of the metric\n\"tags\" - either one column with all tags or all tag columns\n\"type\" - type of the metric, one of \"counter\", \"gauge\", \"histogram\", \"meter\", \"timer\"\n\"metadata\" - either one column with all metadata or all metadata columns\n\n\n\n\ndateFormat\nThe format for the date column\ndefault value \"YYYYMMDDHHmmss.SSSZ\"\n\n\ntimezone\nThe timezone used to determine the date\ndefault value \"UTC\"\n\n\ntagFilter\nAn async filter function used to filter out unwanted tags\ndefault value async () => true\n\n\nmetadataFilter\nAn async filter function used to filter out unwanted metadata\ndefault value async () => true\n\n\n\ndefault CSV writer options\n\nfilename\nAn async function determining the filename of the metrics\ndefault value _async () => ${moment().format(\"YYYYMMDDHH00\")}metrics.csv\n\n\ndir\nAn async function determining the directory of the metricsfile\ndefault value async () => \"./metrics\"\n\n\nwriteHeaders\nDetermines if the column headers should be written at the top of each file\ndefault value true\n\n\ncreateDir\nDetermines if the dir for the metrics reporting should be created if it doesn't exist\ndefault value true\n\n\ndelimiter\nThe delimiter between the fields\ndefault value \",\"\n\n\nencoding\nThe encoding of the file\ndefault value \"utf8\"\n\n\nlineEnding\nThe line endings in the file\ndefault value \"\\n\"\n\n\n\nexporting tags\nexample.ts\nimport {\n    CsvMetricReporter,\n    DefaultCsvFileWriter,\n} from \"inspector-csv\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// metric registry is used in the application code to measure durations, error codes, etc...\nconst registry: MetricRegistry = new MetricRegistry();\n\n// some timers for this example\nconst requests1: Timer = registry.newTimer(\"requests1\");\nconst requests2: Timer = registry.newTimer(\"requests2\");\nconst requests3: Timer = registry.newTimer(\"requests3\");\n\nrequests1.setGroup(\"requests\");\nrequests2.setGroup(\"requests\");\n\nrequests1.setTag(\"host\", \"127.0.0.1\");\nrequests2.setTag(\"host\", \"127.0.0.2\");\n// override common tag from reporter\nrequests2.setTag(\"type\", \"override_tag\");\nrequests3.setTag(\"host\", \"127.0.0.3\");\nrequests3.setTag(\"special_tag\", \"test_abc\");\n\n// default csv file writer\nconst writer = new DefaultCsvFileWriter({});\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\", \"type\", \"tags\"],\n    tagExportMode: ExportMode.ALL_IN_ONE_COLUMN,\n    writer,\n});\n\n// common tags for all metrics\nconst tags = new Map();\ntags.set(\"type\", \"metric\");\nreporter.setTags(tags);\n\n// register registry in the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();\n\n// simulate a running application which produces some custom measures\nsetInterval(() => requests1.time(() => { ... }), 100);\nsetInterval(() => requests2.time(() => { ... }), 50);\nsetInterval(() => requests3.time(() => { ... }), 25);201810201900_metrics.csv (example output file)\ndate,group,name,field,value,type,tags\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.005\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.01\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.025\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.05\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.25\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_2.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_10\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"max\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"mean\",1000012.8,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"mean_rate\",6.565989008975633,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p50\",1000064,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p75\",1000192,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p95\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p98\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p99\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p999\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"stddev\",471374.3671220714,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"sum\",10000128,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_10\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"max\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"mean\",900006.4,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"mean_rate\",13.106160994487947,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p75\",1000192,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p95\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p98\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p99\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p999\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"stddev\",852194.9951649873,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"sum\",18000128,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.005\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.01\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.025\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.05\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.25\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_2.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_10\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"count\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"max\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"mean\",800006.4,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"mean_rate\",26.19515279863145,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p75\",1000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p95\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p98\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p99\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p999\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"stddev\",516413.0421795807,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"sum\",32000256,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"example-with-separate-columns.ts\n// same as in the example above ...\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\", \"type\", \"tags\"],\n    tagExportMode: ExportMode.EACH_IN_OWN_COLUMN,\n    ...\n});201810201900_metrics.csv (example output file)\ndate,group,name,field,value,type,tag_type,tag_host,tag_special_tag\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.005\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.01\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.025\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.05\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.1\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.25\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.5\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_1\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_2.5\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_5\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_10\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"mean\",999987.2,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"mean_rate\",6.578947368421053,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p75\",1250112,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p95\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"stddev\",942809.0458299838,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"sum\",9999872,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.005\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.01\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.025\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.05\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.1\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.25\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.5\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_1\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_2.5\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_5\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_10\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"max\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"mean\",1049996.8,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"mean_rate\",13.1319758106064,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p75\",1749952,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p95\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p98\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p99\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p999\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"stddev\",604805.6067375874,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"sum\",20999936,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.005\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.01\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.025\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.05\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.25\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_2.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_10\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"count\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"mean\",899987.2,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"mean_rate\",26.2639516212128,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"min\",0,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p75\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p95\",2950067.1999999955,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"stddev\",545386.4756426474,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"sum\",35999488,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The CsvMetricReporter is listening for those messagesand writes the metrics from the other processes into the CSV file.  \nOnly the master process writes the header of the CSV file.Also each write-operation is handled by the master process.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.And in case of disabling cluster support the pid should be part of the filename.  \nimport { tagsToMap, DisabledClusterOptions } from \"inspector-metrics\";\nimport { CsvMetricReporter } from \"inspector-csv\";\n\nconst writer = new DefaultCsvFileWriter({\n    filename: async () => `${moment().format(\"YYYYMMDDHH00\")}_${process.pid}_metrics.csv`\n});\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    clusterOptions: new DisabledClusterOptions(),\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\", \"type\", \"tags\"],\n    writer,\n    ...\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-elasticsearch.html":{"url":"additional-documentation/inspector-elasticsearch.html","title":"additional-page - inspector-elasticsearch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninspector-elasticsearch\nTypescript Metrics Reporter for\nelasticsearch.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.It uses the official elasticsearch js client.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-elasticsearch\nbasic usage\nFrom version 2.6.0 onwards this library uses the official elasticsearch js client instead of the legacy elasticsearch js client.\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = {\n    node: \"http://localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    indexnameDeterminator: ElasticsearchMetricReporter.dailyIndex(`metrics`),\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();For users of versions before 2.6.0:  \nimport { MetricRegistry } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst clientOptions: ConfigOptions = {\n    apiVersion: \"6.0\",\n    host: \"localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    indexnameDeterminator: ElasticsearchMetricReporter.dailyIndex(`metrics`),\n    log: null,\n    metricDocumentBuilder: ElasticsearchMetricReporter.defaultDocumentBuilder(),\n    typeDeterminator: ElasticsearchMetricReporter.defaultTypeDeterminator(),\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();determine the indexname for a metric\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricInfoDeterminator\n} from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = { ... };\n// computes the name of the index using the timestamp of the metric\nconst indexnameDeterminator: MetricInfoDeterminator = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    date: Date) => {\n    \n    const day = date.getDate();\n    const dayPrefix: string = (day >= 10) ? \"\" : \"0\";\n    const month = date.getMonth() + 1;\n    const monthPrefix: string = (month >= 10) ? \"\" : \"0\";\n    return `metrics-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`;\n};\n// the indexname generator needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    indexnameDeterminator,\n});build a metric document\nimport { MetricRegistry, Tags } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricDocumentBuilder,\n    MetricType\n} from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = { ... };\n// only build documents for counter metrics\nconst metricDocumentBuilder: MetricDocumentBuilder = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    timestamp: Date,\n    commonTags: Tags) => {\n\n    if (metric instanceof Counter) {\n        const tags = commonTags;\n        const name = metric.getName();\n        const group = metric.getGroup();\n        return { name, group, tags, timestamp, values: { count: metric.getCount() }, type };\n\n    } else {\n        // null values will not be reported / published\n        return null;\n    }\n};\n\n// the document builder needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    metricDocumentBuilder,\n});multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The ElasticsearchMetricReporter is listening for those messagesand report the metrics from the other processes.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.  \nimport { tagsToMap, DisabledClusterOptions } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = {\n    apiVersion: \"6.0\",\n    host: \"localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    clusterOptions: new DisabledClusterOptions(),\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-influx.html":{"url":"additional-documentation/inspector-influx.html","title":"additional-page - inspector-influx","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-influx as influxdb client.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-influx\nbasic usage\nFor influxDB v1:  \nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    sender,\n});\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\n// need ot wait for the reporter to start\nawait reporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i For influxDB v2:  \nimport { ClientOptions } from \"@influxdata/influxdb-client\";\nimport { Influxdb2Sender, InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\nconst clientOptions: ClientOptions = {\n    url: 'http://localhost:8087',\n    token: '' // have a look at the examples (/examples/influxdb-2x)\n}\nconst reporter = new InfluxMetricReporter({\n    sender: new Influxdb2Sender(clientOptions, 'testing', 'test-bucket', [], 'ms', {\n    batchSize: 10,\n    defaultTags: {},\n    flushInterval: 0,\n    maxBufferLines: 10_000,\n    maxRetries: 3,\n    maxRetryDelay: 3000,\n    minRetryDelay: 1000,\n    retryJitter: 1000,\n    writeFailed: function(error, lines, failedAttempts) { console.log(error, lines, failedAttempts)},\n    }),\n    log: null,\n    minReportingTimeout: 30,\n    reportInterval: 5000\n})\n\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\n// need ot wait for the reporter to start\nawait reporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i reporting events\nimport { InfluxMetricReporter } from \"inspector-influx\";\nimport { Event } from \"inspector-metrics\";\n\nconst reporter: InfluxMetricReporter = ...\n\n// need ot wait for the reporter to start before reporting events\nawait reporter.start();\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to influxdb\nawait reporter.reportEvent(event);multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The InfluxMetricReporter is listening for those messagesand report the metrics from the other processes.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.  \nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { tagsToMap, DisabledClusterOptions, MetricRegistry, Timer } from \"inspector-metrics\";\n\nconst dbConfig = {...};\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    clusterOptions: new DisabledClusterOptions(),\n    sender,\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-prometheus.html":{"url":"additional-documentation/inspector-prometheus.html","title":"additional-page - inspector-prometheus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninspector-prometheus\nTypescript metric reporter for prometheus.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics\nnode module and is meant to be used with nodejs.  \nAll metrics from the inspector-metrics library\ncan be pushed to a pushgateway or be exposed with\na custom /metrics endpoint in your application.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-prometheus\nbasic usage\nexample.ts\nimport {\n    MetricRegistry,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter({});\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\n// common tags for all metrics\nconst tags = new Map();\ntags.set(\"app_version\", \"1.0.0\");\nreporter.setTags(tags);\n\n// a simple request timer used to report response latencies\nconst requests: Timer = registry.newTimer(\"requests\");\n// custom metric tag\nrequests.setTag(\"host\", \"127.0.0.3\");\n\n// some server implementation - could be anything KOA, Express, HAPI ...\nconst server = new Hapi.Server({ host: \"0.0.0.0\", port: 8080 });\n\n// '/metrics' is the standard route used by prometheus ...\nserver.route({\n    method: \"GET\",\n    path: \"/metrics\",\n    handler(request, h) {\n        console.log(\"reporting metrics\");\n        return h.response(reporter.getMetricsString())\n            .code(200)\n            .type(\"text/plain\");\n    },\n});\n\n// starts the server\nserver.start();/etc/prometheus/config.yml\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 30s\n\nscrape_configs:\n- job_name: test-app\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - localhost:8080example metrics report\n# HELP requests request durations for some endpoint\n# TYPE requests summary\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98\"} 1999872\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99\"} 2000128\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999\"} 4000000\nrequests_count{app_version=\"1.0.0\",host=\"127.0.0.3\"} 362\nrequests_sum{app_version=\"1.0.0\",host=\"127.0.0.3\"} 283998208reporting options for PrometheusMetricReporter\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter({\n    includeTimestamp: true,\n    emitComments: true,\n    useUntyped: false,\n});multi process support (nodejs cluster)\nDue to the nature of prometheus scraping multiple processes need to collectmetrics in order report all metrics of every process.  \nTherefore the PrometheusMetricReporter implements an internalrequest/response mechanism to gather all metrics from all forked processesand wait for the response before serving all metrics data.  \nYou should set the pid as reporter tag to be able to determinebetween the multiple metrics sources.  \nOnly the master process should serve the metrics to the prometheus server.  \nimport * as cluster from \"cluster\";\n\nimport {\n    tagsToMap,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter({});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));\n\nif (cluster.isMaster) {\n    // some server implementation - could be anything KOA, Express, HAPI ...\n    const server = new Hapi.Server({ host: \"0.0.0.0\", port: 8080 });\n\n    // '/metrics' is the standard route used by prometheus ...\n    server.route({\n        method: \"GET\",\n        path: \"/metrics\",\n        handler(request, h) {\n            console.log(\"reporting metrics\");\n            return h.response(reporter.getMetricsString())\n                .code(200)\n                .type(\"text/plain\");\n        },\n    });\n\n    // starts the server\n    server.start();\n}report metrics with pushgateway\nimport ...; // like in the example above\n\nimport {\n    PrometheusMetricReporter,\n    PushgatewayMetricReporter,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter({});\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\nconst pushReporter = new PushgatewayMetricReporter({\n    reporter,\n\n    host: \"localhost\",\n    port: 9091,\n    job: \"pushgateway\",\n    instance: \"127.0.0.4\",\n});\n\n// start reporting\nawait pushReporter.start();multi process support (nodejs cluster)\nBy default cluster support is disabled for PushgatewayMetricReporter.You should set the pid as reporter tag.  \nimport {\n    tagsToMap,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n    PushgatewayMetricReporter,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter({});\nconst pushReporter = new PushgatewayMetricReporter({\n    reporter,\n    ...\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));\n\n// start reporting\nawait pushReporter.start();License\nMIT\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-vm.html":{"url":"additional-documentation/inspector-vm.html","title":"additional-page - inspector-vm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninspector-vm\nNodeJS VM Metric Collector\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nTake a look at the Documentation.\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-vm\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    V8EventLoop,\n    V8MemoryMetrics,\n    V8GCMetrics,\n    V8ProcessMetrics,\n} from \"inspector-vm\";\n\n// get a registry\nconst registry: MetricRegistry = ...;\n\n// instance the memory metric, contains\n//   - space statistics\n//   - memory statistics\nconst memoryMetrics: V8MemoryMetrics = new V8MemoryMetrics(\"v8\");\n//   - gc statistics\nconst gc: V8GCMetrics = new V8GCMetrics(\"gc\", registry.getDefaultClock());\n//   - event loop delay / latency\nconst eventLoop: V8EventLoop = new V8EventLoop(\"eventLoop\");\n//   - cpu_usage (system, user, total)\n//   - active_handles\n//   - active_requests\nconst processMetric: V8ProcessMetrics = new V8ProcessMetrics(\"process\");\n\n// metric is registered und the name \"v8\"\nregistry.registerMetric(memoryMetrics);\n// metric is registered und the name \"gc\"\nregistry.registerMetric(gc);\n// metric is registered und the name \"eventLoop\"\nregistry.registerMetric(eventLoop);\n// metric is registered und the name \"process\"\nregistry.registerMetric(processMetric);\n\n// setup reporter ...\n\n// note that unstopped metrics can cause the application to keep running\nmemoryMetrics.stop();\ngc.stop();\neventLoop.stop();\nprocessMetric.stop();License\nMIT\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
